
Aesop's Fables Translated by George Fyler Townsend




The Wolf and the Lamb

WOLF, meeting with a Lamb astray from the fold, resolved not to
lay violent hands on him, but to find some plea to justify to the
Lamb the Wolf's right to eat him.  He thus addressed him:
"Sirrah, last year you grossly insulted me."  "Indeed," bleated
the Lamb in a mournful tone of voice, "I was not then born."  Then
said the Wolf, "You feed in my pasture."  "No, good sir," replied
the Lamb, "I have not yet tasted grass."  Again said the Wolf,
"You drink of my well."  "No," exclaimed the Lamb, "I never yet
drank water, for as yet my mother's milk is both food and drink
to me."  Upon which the Wolf seized him and ate him up, saying,
"Well! I won't remain supperless, even though you refute every
one of my imputations."  The tyrant will always find a pretext for
his tyranny.


The Bat and the Weasels

A BAT who fell upon the ground and was caught by a Weasel pleaded
to be spared his life.  The Weasel refused, saying that he was by
nature the enemy of all birds.  The Bat assured him that he was
not a bird, but a mouse, and thus was set free.  Shortly
afterwards the Bat again fell to the ground and was caught by
another Weasel, whom he likewise entreated not to eat him.  The
Weasel said that he had a special hostility to mice.  The Bat
assured him that he was not a mouse, but a bat, and thus a second
time escaped.

It is wise to turn circumstances to good account.


The Ass and the Grasshopper

AN ASS having heard some Grasshoppers chirping, was highly
enchanted; and, desiring to possess the same charms of melody,
demanded what sort of food they lived on to give them such
beautiful voices.  They replied, "The dew."  The Ass resolved that
he would live only upon dew, and in a short time died of hunger.


The Lion and the Mouse

A LION was awakened from sleep by a Mouse running over his face.
Rising up angrily, he caught him and was about to kill him, when
the Mouse piteously entreated, saying:  "If you would only spare
my life, I would be sure to repay your kindness."  The Lion
laughed and let him go.  It happened shortly after this that the
Lion was caught by some hunters, who bound him by st ropes to the
ground.  The Mouse, recognizing his roar, came gnawed the rope
with his teeth, and set him free, exclaim

"You ridiculed the idea of my ever being able to help you,
expecting to receive from me any repayment of your favor; I now
you know that it is possible for even a Mouse to con benefits on
a Lion."


The Charcoal-Burner and the Fuller

A CHARCOAL-BURNER carried on his trade in his own house.  One day
he met a friend, a Fuller, and entreated him to come and live
with him, saying that they should be far better neighbors and
that their housekeeping expenses would be lessened.  The Fuller
replied, "The arrangement is impossible as far as I am concerned,
for whatever I should whiten, you would immediately blacken again
with your charcoal."

Like will draw like.


The Father and His Sons

A FATHER had a family of sons who were perpetually quarreling
among themselves.  When he failed to heal their disputes by his
exhortations, he determined to give them a practical illustration
of the evils of disunion; and for this purpose he one day told
them to bring him a bundle of sticks.  When they had done so, he
placed the faggot into the hands of each of them in succession,
and ordered them to break it in pieces.  They tried with all
their strength, and were not able to do it.  He next opened the
faggot, took the sticks separately, one by one, and again put
them into his sons' hands, upon which they broke them easily.  He
then addressed them in these words:  "My sons, if you are of one
mind, and unite to assist each other, you will be as this faggot,
uninjured by all the attempts of your enemies; but if you are
divided among yourselves, you will be broken as easily as these
sticks."


The Boy Hunting Locusts

A BOY was hunting for locusts.  He had caught a goodly number,
when he saw a Scorpion, and mistaking him for a locust, reached
out his hand to take him.  The Scorpion, showing his sting, said:
If you had but touched me, my friend, you would have lost me, and
all your locusts too!"


The Cock and the Jewel

A COCK, scratching for food for himself and his hens, found a
precious stone and exclaimed:  "If your owner had found thee, and
not I, he would have taken thee up, and have set thee in thy
first estate; but I have found thee for no purpose.  I would
rather have one barleycorn than all the jewels in the world."


The Kingdom of the Lion

THE BEASTS of the field and forest had a Lion as their king.  He
was neither wrathful, cruel, nor tyrannical, but just and gentle
as a king could be.  During his reign he made a royal
proclamation for a general assembly of all the birds and beasts,
and drew up conditions for a universal league, in which the Wolf
and the Lamb, the Panther and the Kid, the Tiger and the Stag,
the Dog and the Hare, should live together in perfect peace and
amity.  The Hare said, "Oh, how I have longed to see this day, in
which the weak shall take their place with impunity by the side
of the strong."  And after the Hare said this, he ran for his
life.


The Wolf and the Crane

A WOLF who had a bone stuck in his throat hired a Crane, for a
large sum, to put her head into his mouth and draw out the bone.
When the Crane had extracted the bone and demanded the promised
payment, the Wolf, grinning and grinding his teeth, exclaimed:
"Why, you have surely already had a sufficient recompense, in
having been permitted to draw out your head in safety from the
mouth and jaws of a wolf."

In serving the wicked, expect no reward, and be thankful if you
escape injury for your pains.


The Fisherman Piping

A FISHERMAN skilled in music took his flute and his nets to the
seashore.  Standing on a projecting rock, he played several tunes
in the hope that the fish, attracted by his melody, would of
their own accord dance into his net, which he had placed below.
At last, having long waited in vain, he laid aside his flute, and
casting his net into the sea, made an excellent haul of fish.
When he saw them leaping about in the net upon the rock he said:
"O you most perverse creatures, when I piped you would not dance,
but now that I have ceased you do so merrily."


Hercules and the Wagoner

A CARTER was driving a wagon along a country lane, when the
wheels sank down deep into a rut.  The rustic driver, stupefied
and aghast, stood looking at the wagon, and did nothing but utter
loud cries to Hercules to come and help him.  Hercules, it is
said, appeared and thus addressed him:  "Put your shoulders to the
wheels, my man.  Goad on your bullocks, and never more pray to me
for help, until you have done your best to help yourself, or
depend upon it you will henceforth pray in vain."

Self-help is the best help.


The Ants and the Grasshopper

THE ANTS were spending a fine winter's day drying grain collected
in the summertime.  A Grasshopper, perishing with famine, passed
by and earnestly begged for a little food.  The Ants inquired of
him, "Why did you not treasure up food during the summer?'  He
replied, "I had not leisure enough.  I passed the days in
singing."  They then said in derision:  "If you were foolish enough
to sing all the summer, you must dance supperless to bed in the
winter."


The Traveler and His Dog

A TRAVELER about to set out on a journey saw his Dog stand at the
door stretching himself.  He asked him sharply:  "Why do you stand
there gaping? Everything is ready but you, so come with me
instantly."  The Dog, wagging his tail, replied:  "O, master! I am
quite ready; it is you for whom I am waiting."

The loiterer often blames delay on his more active friend.


The Dog and the Shadow

A DOG, crossing a bridge over a stream with a piece of flesh in
his mouth, saw his own shadow in the water and took it for that
of another Dog, with a piece of meat double his own in size.  He
immediately let go of his own, and fiercely attacked the other
Dog to get his larger piece from him.  He thus lost both:  that
which he grasped at in the water, because it was a shadow; and
his own, because the stream swept it away.


The Mole and His Mother

A MOLE, a creature blind from birth, once said to his Mother:  "I
am sure than I can see, Mother!"  In the desire to prove to him
his mistake, his Mother placed before him a few grains of
frankincense, and asked, "What is it?'  The young Mole said, "It
is a pebble."  His Mother exclaimed:  "My son, I am afraid that you
are not only blind, but that you have lost your sense of smell.


The Herdsman and the Lost Bull

A HERDSMAN tending his flock in a forest lost a Bull-calf from
the fold.  After a long and fruitless search, he made a vow that,
if he could only discover the thief who had stolen the Calf, he
would offer a lamb in sacrifice to Hermes, Pan, and the Guardian
Deities of the forest.  Not long afterwards, as he ascended a
small hillock, he saw at its foot a Lion feeding on the Calf.
Terrified at the sight, he lifted his eyes and his hands to
heaven, and said:  "Just now I vowed to offer a lamb to the
Guardian Deities of the forest if I could only find out who had
robbed me; but now that I have discovered the thief, I would
willingly add a full-grown Bull to the Calf I have lost, if I may
only secure my own escape from him in safety."


The Hare and the Tortoise

A HARE one day ridiculed the short feet and slow pace of the
Tortoise, who replied, laughing:  "Though you be swift as the
wind, I will beat you in a race."  The Hare, believing her
assertion to be simply impossible, assented to the proposal; and
they agreed that the Fox should choose the course and fix the
goal.  On the day appointed for the race the two started
together.  The Tortoise never for a moment stopped, but went on
with a slow but steady pace straight to the end of the course.
The Hare, lying down by the wayside, fell fast asleep.  At last
waking up, and moving as fast as he could, he saw the Tortoise
had reached the goal, and was comfortably dozing after her
fatigue.

Slow but steady wins the race.


The Pomegranate, Apple-Tree, and Bramble

THE POMEGRANATE and Apple-Tree disputed as to which was the most
beautiful.  When their strife was at its height, a Bramble from
the neighboring hedge lifted up its voice, and said in a boastful
tone:  "Pray, my dear friends, in my presence at least cease from
such vain disputings."


The Farmer and the Stork

A FARMER placed nets on his newly-sown plowlands and caught a
number of Cranes, which came to pick up his seed.  With them he
trapped a Stork that had fractured his leg in the net and was
earnestly beseeching the Farmer to spare his life.  "Pray save
me, Master," he said, "and let me go free this once.  My broken
limb should excite your pity.  Besides, I am no Crane, I am a
Stork, a bird of excellent character; and see how I love and
slave for my father and mother.  Look too, at my feathers--
they are not the least like those of a Crane."   The Farmer
laughed aloud and said, "It may be all as you say, I only know
this:  I have taken you with these robbers, the Cranes, and you
must die in their company."

Birds of a feather flock together.


The Farmer and the Snake

ONE WINTER a Farmer found a Snake stiff and frozen with cold.  He
had compassion on it, and taking it up, placed it in his bosom.
The Snake was quickly revived by the warmth, and resuming its
natural instincts, bit its benefactor, inflicting on him a mortal
wound.  "Oh," cried the Farmer with his last breath, "I am
rightly served for pitying a scoundrel."

The greatest kindness will not bind the ungrateful.


The Fawn and His Mother

A YOUNG FAWN once said to his Mother, "You are larger than a dog,
and swifter, and more used to running, and you have your horns as
a defense; why, then, O Mother! do the hounds frighten you so?"
She smiled, and said:  "I know full well, my son, that all you say
is true.  I have the advantages you mention, but when I hear even
the bark of a single dog I feel ready to faint, and fly away as
fast as I can."

No arguments will give courage to the coward.


The Bear and the Fox

A BEAR boasted very much of his philanthropy, saying that of all
animals he was the most tender in his regard for man, for he had
such respect for him that he would not even touch his dead body.
A Fox hearing these words said with a smile to the Bear, "Oh!
that you would eat the dead and not the living."


The Swallow and the Crow

THE SWALLOW and the Crow had a contention about their plumage.
The Crow put an end to the dispute by saying, "Your feathers are
all very well in the spring, but mine protect me against the
winter."

Fair weather friends are not worth much.


The Mountain in Labor

A MOUNTAIN was once greatly agitated.  Loud groans and noises
were heard, and crowds of people came from all parts to see what
was the matter.  While they were assembled in anxious expectation
of some terrible calamity, out came a Mouse.

Don't make much ado about nothing.


The Ass, the Fox, and the Lion

THE ASS and the Fox, having entered into partnership together for
their mutual protection, went out into the forest to hunt.  They
had not proceeded far when they met a Lion.  The Fox, seeing
imminent danger, approached the Lion and promised to contrive for
him the capture of the Ass if the Lion would pledge his word not
to harm the Fox.  Then, upon assuring the Ass that he would not
be injured, the Fox led him to a deep pit and arranged that he
should fall into it.  The Lion, seeing that the Ass was secured,
immediately clutched the Fox, and attacked the Ass at his
leisure.


The Tortoise and the Eagle

A TORTOISE, lazily basking in the sun, complained to the
sea-birds of her hard fate, that no one would teach her to fly.
An Eagle, hovering near, heard her lamentation and demanded what
reward she would give him if he would take her aloft and float
her in the air.  "I will give you," she said, "all the riches of
the Red Sea."  "I will teach you to fly then," said the Eagle; and
taking her up in his talons he carried her almost to the clouds
suddenly he let her go, and she fell on a lofty mountain, dashing
her shell to pieces.  The Tortoise exclaimed in the moment of
death:  "I have deserved my present fate; for what had I to do
with wings and clouds, who can with difficulty move about on the
earth?'

If men had all they wished, they would be often ruined.


The Flies and the Honey-Pot

A NUMBER of Flies were attracted to a jar of honey which had been
overturned in a housekeeper's room, and placing their feet in it,
ate greedily.  Their feet, however, became so smeared with the
honey that they could not use their wings, nor release
themselves, and were suffocated.  Just as they were expiring,
they exclaimed, "O foolish creatures that we are, for the sake of
a little pleasure we have destroyed ourselves."

Pleasure bought with pains, hurts.


The Man and the Lion

A MAN and a Lion traveled together through the forest.  They soon
began to boast of their respective superiority to each other in
strength and prowess.  As they were disputing, they passed a
statue carved in stone, which represented "a Lion strangled by a
Man."  The traveler pointed to it and said:  "See there! How strong
we are, and how we prevail over even the king of beasts."  The
Lion replied:  "This statue was made by one of you men.  If we
Lions knew how to erect statues, you would see the Man placed
under the paw of the Lion."

One story is good, till another is told.


The Farmer and the Cranes

SOME CRANES made their feeding grounds on some plowlands newly
sown with wheat.  For a long time the Farmer, brandishing an
empty sling, chased them away by the terror he inspired; but when
the birds found that the sling was only swung in the air, they
ceased to take any notice of it and would not move.  The Farmer,
on seeing this, charged his sling with stones, and killed a great
number.  The remaining birds at once forsook his fields, crying
to each other, "It is time for us to be off to Liliput:  for this
man is no longer content to scare us, but begins to show us in
earnest what he can do."

If words suffice not, blows must follow.


The Dog in the Manger

A DOG lay in a manger, and by his growling and snapping prevented
the oxen from eating the hay which had been placed for them.
"What a selfish Dog!"  said one of them to his companions; "he
cannot eat the hay himself, and yet refuses to allow those to eat
who can."


The Fox and the Goat

A FOX one day fell into a deep well and could find no means of
escape.  A Goat, overcome with thirst, came to the same well, and
seeing the Fox, inquired if the water was good.  Concealing his
sad plight under a merry guise, the Fox indulged in a lavish
praise of the water, saying it was excellent beyond measure, and
encouraging him to descend.  The Goat, mindful only of his
thirst, thoughtlessly jumped down, but just as he drank, the Fox
informed him of the difficulty they were both in and suggested a
scheme for their common escape.  "If," said he, "you will place
your forefeet upon the wall and bend your head, I will run up
your back and escape, and will help you out afterwards."  The Goat
readily assented and the Fox leaped upon his back.  Steadying
himself with the Goat's horns, he safely reached the mouth of the
well and made off as fast as he could.  When the Goat upbraided
him for breaking his promise, he turned around and cried out,
"You foolish old fellow! If you had as many brains in your head
as you have hairs in your beard, you would never have gone down
before you had inspected the way up, nor have exposed yourself to
dangers from which you had no means of escape."

Look before you leap.


The Bear and the Two Travelers

TWO MEN were traveling together, when a Bear suddenly met them on
their path.  One of them climbed up quickly into a tree and
concealed himself in the branches.  The other, seeing that he
must be attacked, fell flat on the ground, and when the Bear came
up and felt him with his snout, and smelt him all over, he held
his breath, and feigned the appearance of death as much as he
could.  The Bear soon left him, for it is said he will not touch
a dead body.  When he was quite gone, the other Traveler
descended from the tree, and jocularly inquired of his friend
what it was the Bear had whispered in his ear.  "He gave me this
advice," his companion replied.  "Never travel with a friend who
deserts you at the approach of danger."

Misfortune tests the sincerity of friends.


The Oxen and the Axle-Trees

A HEAVY WAGON was being dragged along a country lane by a team of
Oxen.  The Axle-trees groaned and creaked terribly; whereupon the
Oxen, turning round, thus addressed the wheels:  "Hullo there! why
do you make so much noise? We bear all the labor, and we, not
you, ought to cry out."

Those who suffer most cry out the least.


The Thirsty Pigeon

A PIGEON, oppressed by excessive thirst, saw a goblet of water
painted on a signboard.  Not supposing it to be only a picture,
she flew towards it with a loud whir and unwittingly dashed
against the signboard, jarring herself terribly.  Having broken
her wings by the blow, she fell to the ground, and was caught by
one of the bystanders.

Zeal should not outrun discretion.


The Raven and the Swan

A RAVEN saw a Swan and desired to secure for himself the same
beautiful plumage.  Supposing that the Swan's splendid white
color arose from his washing in the water in which he swam, the
Raven left the altars in the neighborhood where he picked up his
living, and took up residence in the lakes and pools.  But
cleansing his feathers as often as he would, he could not change
their color, while through want of food he perished.

Change of habit cannot alter Nature.


The Goat and the Goatherd

A GOATHERD had sought to bring back a stray goat to his flock.
He whistled and sounded his horn in vain; the straggler paid no
attention to the summons.  At last the Goatherd threw a stone,
and breaking its horn, begged the Goat not to tell his master.
The Goat replied, "Why, you silly fellow, the horn will speak
though I be silent."

Do not attempt to hide things which cannot be hid.


The Miser

A MISER sold all that he had and bought a lump of gold, which he
buried in a hole in the ground by the side of an old wall and
went to look at daily.  One of his workmen observed his frequent
visits to the spot and decided to watch his movements.  He soon
discovered the secret of the hidden treasure, and digging down,
came to the lump of gold, and stole it.  The Miser, on his next
visit, found the hole empty and began to tear his hair and to
make loud lamentations.  A neighbor, seeing him overcome with
grief and learning the cause, said, "Pray do not grieve so; but
go and take a stone, and place it in the hole, and fancy that the
gold is still lying there.  It will do you quite the same
service; for when the gold was there, you had it not, as you did
not make the slightest use of it."


The Sick Lion

A LION, unable from old age and infirmities to provide himself
with food by force, resolved to do so by artifice.  He returned
to his den, and lying down there, pretended to be sick, taking
care that his sickness should be publicly known.  The beasts
expressed their sorrow, and came one by one to his den, where the
Lion devoured them.  After many of the beasts had thus
disappeared, the Fox discovered the trick and presenting himself
to the Lion, stood on the outside of the cave, at a respectful
distance, and asked him how he was.  "I am very middling,"
replied the Lion, "but why do you stand without? Pray enter
within to talk with me."  "No, thank you," said the Fox.  "I
notice that there are many prints of feet entering your cave, but
I see no trace of any returning."

He is wise who is warned by the misfortunes of others.


The Horse and Groom

A GROOM used to spend whole days in currycombing and rubbing down
his Horse, but at the same time stole his oats and sold them for
his own profit.  "Alas!"  said the Horse, "if you really wish me
to be in good condition, you should groom me less, and feed me
more."


The Ass and the Lapdog

A MAN had an Ass, and a Maltese Lapdog, a very great beauty.  The
Ass was left in a stable and had plenty of oats and hay to eat,
just as any other Ass would.  The Lapdog knew many tricks and was
a great favorite with his master, who often fondled him and
seldom went out to dine without bringing him home some tidbit to
eat.  The Ass, on the contrary, had much work to do in grinding
the corn-mill and in carrying wood from the forest or burdens
from the farm.  He often lamented his own hard fate and
contrasted it with the luxury and idleness of the Lapdog, till at
last one day he broke his cords and halter, and galloped into his
master's house, kicking up his heels without measure, and
frisking and fawning as well as he could.  He next tried to jump
about his master as he had seen the Lapdog do, but he broke the
table and smashed all the dishes upon it to atoms.  He then
attempted to lick his master, and jumped upon his back.  The
servants, hearing the strange hubbub and perceiving the danger of
their master, quickly relieved him, and drove out the Ass to his
stable with kicks and clubs and cuffs.  The Ass, as he returned
to his stall beaten nearly to death, thus lamented:  "I have
brought it all on myself! Why could I not have been contented to
labor with my companions, and not wish to be idle all the day
like that useless little Lapdog!"


The Lioness

A CONTROVERSY prevailed among the beasts of the field as to which
of the animals deserved the most credit for producing the
greatest number of whelps at a birth.  They rushed clamorously
into the presence of the Lioness and demanded of her the
settlement of the dispute.  "And you," they said, "how many sons
have you at a birth?'  The Lioness laughed at them, and said:
"Why! I have only one; but that one is altogether a thoroughbred
Lion."

The value is in the worth, not in the number.


The Boasting Traveler

A MAN who had traveled in foreign lands boasted very much, on
returning to his own country, of the many wonderful and heroic
feats he had performed in the different places he had visited.
Among other things, he said that when he was at Rhodes he had
leaped to such a distance that no man of his day could leap
anywhere near him as to that, there were in Rhodes many persons
who saw him do it and whom he could call as witnesses.  One of
the bystanders interrupted him, saying:  "Now, my good man, if
this be all true there is no need of witnesses.  Suppose this
to be Rhodes, and leap for us."


The Cat and the Cock

A CAT caught a Cock, and pondered how he might find a reasonable
excuse for eating him.  He accused him of being a nuisance to men
by crowing in the nighttime and not permitting them to sleep.
The Cock defended himself by saying that he did this for the
benefit of men, that they might rise in time for their labors.
The Cat replied, "Although you abound in specious apologies, I
shall not remain supperless"; and he made a meal of him.


The Piglet, the Sheep, and the Goat

A YOUNG PIG was shut up in a fold-yard with a Goat and a Sheep.
On one occasion when the shepherd laid hold of him, he grunted
and squeaked and resisted violently.  The Sheep and the Goat
complained of his distressing cries, saying, "He often handles
us, and we do not cry out."  To this the Pig replied, "Your
handling and mine are very different things.  He catches you only
for your wool, or your milk, but he lays hold on me for my very
life."


The Boy and the Filberts

A BOY put his hand into a pitcher full of filberts.  He grasped
as many as he could possibly hold, but when he tried to pull out
his hand, he was prevented from doing so by the neck of the
pitcher.  Unwilling to lose his filberts, and yet unable to
withdraw his hand, he burst into tears and bitterly lamented his
disappointment.  A bystander said to him, "Be satisfied with half
the quantity, and you will readily draw out your hand."

Do not attempt too much at once.


The Lion in Love

A LION demanded the daughter of a woodcutter in marriage.  The
Father, unwilling to grant, and yet afraid to refuse his request,
hit upon this expedient to rid himself of his importunities.  He
expressed his willingness to accept the Lion as the suitor of his
daughter on one condition:  that he should allow him to extract
his teeth, and cut off his claws, as his daughter was fearfully
afraid of both.  The Lion cheerfully assented to the proposal.
But when the toothless, clawless Lion returned to repeat his
request, the Woodman, no longer afraid, set upon him with his
club, and drove him away into the forest.


The Laborer and the Snake

A SNAKE, having made his hole close to the porch of a cottage,
inflicted a mortal bite on the Cottager's infant son.  Grieving
over his loss, the Father resolved to kill the Snake.  The next
day, when it came out of its hole for food, he took up his axe,
but by swinging too hastily, missed its head and cut off only the
end of its tail.  After some time the Cottager, afraid that the
Snake would bite him also, endeavored to make peace, and placed
some bread and salt in the hole.  The Snake, slightly hissing,
said:  "There can henceforth be no peace between us; for whenever
I see you I shall remember the loss of my tail, and whenever you
see me you will be thinking of the death of your son."

No one truly forgets injuries in the presence of him who caused
the injury.


The Wolf in Sheep's Clothing

ONCE UPON A TIME a Wolf resolved to disguise his appearance in
order to secure food more easily.  Encased in the skin of a
sheep, he pastured with the flock deceiving the shepherd by his
costume.  In the evening he was shut up by the shepherd in the
fold; the gate was closed, and the entrance made thoroughly
secure.  But the shepherd, returning to the fold during the night
to obtain meat for the next day, mistakenly caught up the Wolf
instead of a sheep, and killed him instantly.

Harm seek.  harm find.


The Ass and the Mule

A MULETEER set forth on a journey, driving before him an Ass and
a Mule, both well laden.  The Ass, as long as he traveled along
the plain, carried his load with ease, but when he began to
ascend the steep path of the mountain, felt his load to be more
than he could bear.  He entreated his companion to relieve him of
a small portion, that he might carry home the rest; but the Mule
paid no attention to the request.  The Ass shortly afterwards
fell down dead under his burden.  Not knowing what else to do in
so wild a region, the Muleteer placed upon the Mule the load
carried by the Ass in addition to his own, and at the top of all
placed the hide of the Ass, after he had skinned him.  The Mule,
groaning beneath his heavy burden, said to himself:  "I am treated
according to my deserts.  If I had only been willing to assist
the Ass a little in his need, I should not now be bearing,
together with his burden, himself as well."


The Frogs Asking for a King

THE FROGS, grieved at having no established Ruler, sent
ambassadors to Jupiter entreating for a King.  Perceiving their
simplicity, he cast down a huge log into the lake.  The Frogs
were terrified at the splash occasioned by its fall and hid
themselves in the depths of the pool.  But as soon as they
realized that the huge log was motionless, they swam again to the
top of the water, dismissed their fears, climbed up, and began
squatting on it in contempt.  After some time they began to think
themselves ill-treated in the appointment of so inert a Ruler,
and sent a second deputation to Jupiter to pray that he would set
over them another sovereign.  He then gave them an Eel to govern
them.  When the Frogs discovered his easy good nature, they sent
yet a third time to Jupiter to beg him to choose for them still
another King.  Jupiter, displeased with all their complaints,
sent a Heron, who preyed upon the Frogs day by day till there
were none left to croak upon the lake.


The Boys and the Frogs

SOME BOYS, playing near a pond, saw a number of Frogs in the
water and began to pelt them with stones.  They killed several of
them, when one of the Frogs, lifting his head out of the water,
cried out:  "Pray stop, my boys:  what is sport to you, is death to
us."


The Sick Stag

A SICK STAG lay down in a quiet corner of its pasture-ground.
His companions came in great numbers to inquire after his health,
and each one helped himself to a share of the food which had been
placed for his use; so that he died, not from his sickness, but
from the failure of the means of living.

Evil companions bring more hurt than profit.


The Salt Merchant and His Ass

A PEDDLER drove his Ass to the seashore to buy salt.  His road
home lay across a stream into which his Ass, making a false step,
fell by accident and rose up again with his load considerably
lighter, as the water melted the sack.  The Peddler retraced his
steps and refilled his panniers with a larger quantity of salt
than before.  When he came again to the stream, the Ass fell down
on purpose in the same spot, and, regaining his feet with the
weight of his load much diminished, brayed triumphantly as if he
had obtained what he desired.  The Peddler saw through his trick
and drove him for the third time to the coast, where he bought a
cargo of sponges instead of salt.  The Ass, again playing the
fool, fell down on purpose when he reached the stream, but the
sponges became swollen with water, greatly increasing his load.
And thus his trick recoiled on him, for he now carried on his
back a double burden.


The Oxen and the Butchers

THE OXEN once upon a time sought to destroy the Butchers, who
practiced a trade destructive to their race.  They assembled on a
certain day to carry out their purpose, and sharpened their horns
for the contest.  But one of them who was exceedingly old (for
many a field had he plowed) thus spoke:  "These Butchers, it is
true, slaughter us, but they do so with skillful hands, and with
no unnecessary pain.  If we get rid of them, we shall fall into
the hands of unskillful operators, and thus suffer a double
death:  for you may be assured, that though all the Butchers
should perish, yet will men never want beef."

Do not be in a hurry to change one evil for another.


The Lion, the Mouse, and the Fox

A LION, fatigued by the heat of a summer's day, fell fast asleep
in his den.  A Mouse ran over his mane and ears and woke him from
his slumbers.  He rose up and shook himself in great wrath, and
searched every corner of his den to find the Mouse.  A Fox seeing
him said:  "A fine Lion you are, to be frightened of a Mouse."
"'Tis not the Mouse I fear," said the Lion; "I resent his
familiarity and ill-breeding."

Little liberties are great offenses.


The Vain Jackdaw

JUPITER DETERMINED, it is said, to create a sovereign over the
birds, and made proclamation that on a certain day they should
all present themselves before him, when he would himself choose
the most beautiful among them to be king.  The Jackdaw, knowing
his own ugliness, searched through the woods and fields, and
collected the feathers which had fallen from the wings of his
companions, and stuck them in all parts of his body, hoping
thereby to make himself the most beautiful of all.  When the
appointed day arrived, and the birds had assembled before
Jupiter, the Jackdaw also made his appearance in his many
feathered finery.  But when Jupiter proposed to make him king
because of the beauty of his plumage, the birds indignantly
protested, and each plucked from him his own feathers, leaving
the Jackdaw nothing but a Jackdaw.


The Goatherd and the Wild Goats

A GOATHERD, driving his flock from their pasture at eventide,
found some Wild Goats mingled among them, and shut them up
together with his own for the night.  The next day it snowed very
hard, so that he could not take the herd to their usual feeding
places, but was obliged to keep them in the fold.  He gave his
own goats just sufficient food to keep them alive, but fed the
strangers more abundantly in the hope of enticing them to stay
with him and of making them his own.  When the thaw set in, he
led them all out to feed, and the Wild Goats scampered away as
fast as they could to the mountains.  The Goatherd scolded them
for their ingratitude in leaving him, when during the storm he
had taken more care of them than of his own herd.  One of them,
turning about, said to him:  "That is the very reason why we are
so cautious; for if you yesterday treated us better than the
Goats you have had so long, it is plain also that if others came
after us, you would in the same manner prefer them to ourselves."


Old friends cannot with impunity be sacrificed for new ones.


The Mischievous Dog

A DOG used to run up quietly to the heels of everyone he met, and
to bite them without notice.  His master suspended a bell about
his neck so that the Dog might give notice of his presence
wherever he went.  Thinking it a mark of distinction, the Dog
grew proud of his bell and went tinkling it all over the
marketplace.  One day an old hound said to him:  Why do you make
such an exhibition of yourself? That bell that you carry is not,
believe me, any order of merit, but on the contrary a mark of
disgrace, a public notice to all men to avoid you as an ill
mannered dog."

Notoriety is often mistaken for fame.


The Fox Who Had Lost His Tail

A FOX caught in a trap escaped, but in so doing lost his tail.
Thereafter, feeling his life a burden from the shame and ridicule
to which he was exposed, he schemed to convince all the other
Foxes that being tailless was much more attractive, thus making
up for his own deprivation.  He assembled a good many Foxes and
publicly advised them to cut off their tails, saying that they
would not only look much better without them, but that they would
get rid of the weight of the brush, which was a very great
inconvenience.  One of them interrupting him said, "If you had
not yourself lost your tail, my friend, you would not thus
counsel us."


The Boy and the Nettles

A BOY was stung by a Nettle.  He ran home and told his Mother,
saying, "Although it hurts me very much, I only touched it
gently."  "That was just why it stung you," said his Mother.  "The
next time you touch a Nettle, grasp it boldly, and it will be
soft as silk to your hand, and not in the least hurt you."

Whatever you do, do with all your might.


The Man and His Two Sweethearts

A MIDDLE-AGED MAN, whose hair had begun to turn gray, courted two
women at the same time.  One of them was young, and the other
well advanced in years.  The elder woman, ashamed to be courted
by a man younger than herself, made a point, whenever her admirer
visited her, to pull out some portion of his black hairs.  The
younger, on the contrary, not wishing to become the wife of an
old man, was equally zealous in removing every gray hair she
could find.  Thus it came to pass that between them both he very
soon found that he had not a hair left on his head.

Those who seek to please everybody please nobody.


The Astronomer

AN ASTRONOMER used to go out at night to observe the stars.  One
evening, as he wandered through the suburbs with his whole
attention fixed on the sky, he fell accidentally into a deep
well.  While he lamented and bewailed his sores and bruises, and
cried loudly for help, a neighbor ran to the well, and learning
what had happened said:  "Hark ye, old fellow, why, in striving to
pry into what is in heaven, do you not manage to see what is on
earth?'


The Wolves and the Sheep

"WHY SHOULD there always be this fear and slaughter between us?"
said the Wolves to the Sheep.  "Those evil-disposed Dogs have
much to answer for.  They always bark whenever we approach you
and attack us before we have done any harm.  If you would only
dismiss them from your heels, there might soon be treaties of
peace and reconciliation between us."  The Sheep, poor silly
creatures, were easily beguiled and dismissed the Dogs, whereupon
the Wolves destroyed the unguarded flock at their own pleasure.


The Old Woman and the Physician

AN OLD WOMAN having lost the use of her eyes, called in a
Physician to heal them, and made this bargain with him in the
presence of witnesses:  that if he should cure her blindness, he
should receive from her a sum of money; but if her infirmity
remained, she should give him nothing.  This agreement being
made, the Physician, time after time, applied his salve to her
eyes, and on every visit took something away, stealing all her
property little by little.  And when he had got all she had, he
healed her and demanded the promised payment.  The Old Woman,
when she recovered her sight and saw none of her goods in her
house, would give him nothing.  The Physician insisted on his
claim, and.  as she still refused, summoned her before the Judge.
The Old Woman, standing up in the Court, argued:  "This man here
speaks the truth in what he says; for I did promise to give him a
sum of money if I should recover my sight:  but if I continued
blind, I was to give him nothing.  Now he declares that I am
healed.  I on the contrary affirm that I am still blind; for when
I lost the use of my eyes, I saw in my house various chattels and
valuable goods:  but now, though he swears I am cured of my
blindness, I am not able to see a single thing in it."


The Fighting Cocks and the Eagle

TWO GAME COCKS were fiercely fighting for the mastery of the
farmyard.  One at last put the other to flight.  The vanquished
Cock skulked away and hid himself in a quiet corner, while the
conqueror, flying up to a high wall, flapped his wings and crowed
exultingly with all his might.  An Eagle sailing through the air
pounced upon him and carried him off in his talons.  The
vanquished Cock immediately came out of his corner, and ruled
henceforth with undisputed mastery.

Pride goes before destruction.


The Charger and the Miller

A CHARGER, feeling the infirmities of age, was sent to work in a
mill instead of going out to battle.  But when he was compelled
to grind instead of serving in the wars, he bewailed his change
of fortune and called to mind his former state, saying, "Ah!
Miller, I had indeed to go campaigning before, but I was barbed
from counter to tail, and a man went along to groom me; and now I
cannot understand what ailed me to prefer the mill before the
battle."  "Forbear," said the Miller to him, "harping on what was
of yore, for it is the common lot of mortals to sustain the ups
and downs of fortune."


The Fox and the Monkey

A MONKEY once danced in an assembly of the Beasts, and so pleased
them all by his performance that they elected him their King.  A
Fox, envying him the honor, discovered a piece of meat lying in a
trap, and leading the Monkey to the place where it was, said that
she had found a store, but had not used it  e had kept it for him
as treasure trove of his kingdom, and counseled him to lay hold
of it.  The Monkey approached carelessly and was caught in the
trap; and on his accusing the Fox of purposely leading him into
the snare, she replied, "O Monkey, and are you, with such a mind
as yours, going to be King over the Beasts?"


The Horse and His Rider

A HORSE SOLDIER took the utmost pains with his charger.  As long
as the war lasted, he looked upon him as his fellow-helper in all
emergencies and fed him carefully with hay and corn.  But when
the war was over, he only allowed him chaff to eat and made him
carry heavy loads of wood, subjecting him to much slavish
drudgery and ill-treatment.  War was again proclaimed, however,
and when the trumpet summoned him to his standard, the Soldier
put on his charger its military trappings, and mounted, being
clad in his heavy coat of mail.  The Horse fell down straightway
under the weight, no longer equal to the burden, and said to his
master, "You must now go to the war on foot, for you have
transformed me from a Horse into an Ass; and how can you expect
that I can again turn in a moment from an Ass to a Horse?'


The Belly and the Members

THE MEMBERS of the Body rebelled against the Belly, and said,
"Why should we be perpetually engaged in administering to your
wants, while you do nothing but take your rest, and enjoy
yourself in luxury and self-indulgence?'  The Members carried out
their resolve and refused their assistance to the Belly.  The
whole Body quickly became debilitated, and the hands, feet,
mouth, and eyes, when too late, repented of their folly.


The Vine and the Goat

A VINE was luxuriant in the time of vintage with leaves and
grapes.  A Goat, passing by, nibbled its young tendrils and its
leaves.  The Vine addressed him and said:  "Why do you thus injure
me without a cause, and crop my leaves? Is there no young grass
left? But I shall not have to wait long for my just revenge; for
if you now should crop my leaves, and cut me down to my root, I
shall provide the wine to pour over you when you are led as a
victim to the sacrifice."


Jupiter and the Monkey

JUPITER ISSUED a proclamation to all the beasts of the forest and
promised a royal reward to the one whose offspring should be
deemed the handsomest.  The Monkey came with the rest and
presented, with all a mother's tenderness, a flat-nosed,
hairless, ill-featured young Monkey as a candidate for the
promised reward.  A general laugh saluted her on the presentation
of her son.  She resolutely said, "I know not whether Jupiter
will allot the prize to my son, but this I do know, that he is at
least in the eyes of me his mother, the dearest, handsomest, and
most beautiful of all."


The Widow and Her Little Maidens

A WIDOW who was fond of cleaning had two little maidens to wait
on her.  She was in the habit of waking them early in the
morning, at cockcrow.  The maidens, aggravated by such excessive
labor, resolved to kill the cock who roused their mistress so
early.  When they had done this, they found that they had only
prepared for themselves greater troubles, for their mistress, no
longer hearing the hour from the cock, woke them up to their work
in the middle of the night.


The Shepherd's Boy and the Wolf

A SHEPHERD-BOY, who watched a flock of sheep near a village,
brought out the villagers three or four times by crying out,
"Wolf! Wolf!"  and when his neighbors came to help him, laughed at
them for their pains.  The Wolf, however, did truly come at last.
The Shepherd-boy, now really alarmed, shouted in an agony of
terror:  "Pray, do come and help me; the Wolf is killing the
sheep"; but no one paid any heed to his cries, nor rendered any
assistance.  The Wolf, having no cause of fear, at his leisure
lacerated or destroyed the whole flock.

There is no believing a liar, even when he speaks the truth.


The Cat and the Birds

A CAT, hearing that the Birds in a certain aviary were ailing
dressed himself up as a physician, and, taking his cane and a bag
of instruments becoming his profession, went to call on them.  He
knocked at the door and inquired of the inmates how they all did,
saying that if they were ill, he would be happy to prescribe for
them and cure them.  They replied, "We are all very well, and
shall continue so, if you will only be good enough to go away,
and leave us as we are."


The Kid and the Wolf

A KID standing on the roof of a house, out of harm's way, saw a
Wolf passing by and immediately began to taunt and revile him.
The Wolf, looking up, said, "Sirrah! I hear thee:  yet it is not
thou who mockest me, but the roof on which thou art standing."

Time and place often give the advantage to the weak over the
strong.


The Ox and the Frog

AN OX drinking at a pool trod on a brood of young frogs and
crushed one of them to death.  The Mother coming up, and missing
one of her sons, inquired of his brothers what had become of him.
"He is dead, dear Mother; for just now a very huge beast with
four great feet came to the pool and crushed him to death with
his cloven heel."  The Frog, puffing herself out, inquired, "if
the beast was as big as that in size."  "Cease, Mother, to puff
yourself out," said her son, "and do not be angry; for you would,
I assure you, sooner burst than successfully imitate the hugeness
of that monster."


The Shepherd and the Wolf

 A SHEPHERD once found the whelp of a Wolf and brought it up, and
after a while taught it to steal lambs from the neighboring
flocks.  The Wolf, having shown himself an apt pupil, said to the
Shepherd, "Since you have taught me to steal, you must keep a
sharp lookout, or you will lose some of your own flock."


The Father and His Two Daughters

A MAN had two daughters, the one married to a gardener, and the
other to a tile-maker.  After a time he went to the daughter who
had married the gardener, and inquired how she was and how all
things went with her.  She said, "All things are prospering with
me, and I have only one wish, that there may be a heavy fall of
rain, in order that the plants may be well watered."  Not long
after, he went to the daughter who had married the tilemaker, and
likewise inquired of her how she fared; she replied, "I want for
nothing, and have only one wish, that the dry weather may
continue, and the sun shine hot and bright, so that the bricks
might be dried."  He said to her, "If your sister wishes for rain,
and you for dry weather, with which of the two am I to join my
wishes?'


The Farmer and His Sons

A FATHER, being on the point of death, wished to be sure that his
sons would give the same attention to his farm as he himself had
given it.  He called them to his bedside and said, "My sons,
there is a great treasure hid in one of my vineyards."  The sons,
after his death, took their spades and mattocks and carefully dug
over every portion of their land.  They found no treasure, but
the vines repaid their labor by an extraordinary and
superabundant crop.


The Crab and Its Mother

A CRAB said to her son, "Why do you walk so one-sided, my child?
It is far more becoming to go straight forward."  The young Crab
replied:  "Quite true, dear Mother; and if you will show me the
straight way, I will promise to walk in it."  The Mother tried in
vain, and submitted without remonstrance to the reproof of her
child.

Example is more powerful than precept.


The Heifer and the Ox

A HEIFER saw an Ox hard at work harnessed to a plow, and
tormented him with reflections on his unhappy fate in being
compelled to labor.  Shortly afterwards, at the harvest festival,
the owner released the Ox from his yoke, but bound the Heifer
with cords and led him away to the altar to be slain in honor of
the occasion.  The Ox saw what was being done, and said with a
smile to the Heifer:  "For this you were allowed to live in
idleness, because you were presently to be sacrificed."


The Swallow, the Serpent, and the Court of Justice

A SWALLOW, returning from abroad and especially fond of dwelling
with men, built herself a nest in the wall of a Court of Justice
and there hatched seven young birds.  A Serpent gliding past the
nest from its hole in the wall ate up the young unfledged
nestlings.  The Swallow, finding her nest empty, lamented greatly
and exclaimed:  "Woe to me a stranger! that in this place where
all others' rights are protected, I alone should suffer wrong."


The Thief and His Mother

A BOY stole a lesson-book from one of his schoolfellows and took
it home to his Mother.  She not only abstained from beating him,
but encouraged him.  He next time stole a cloak and brought it to
her, and she again commended him.  The Youth, advanced to
adulthood, proceeded to steal things of still greater value.  At
last he was caught in the very act, and having his hands bound
behind him, was led away to the place of public execution.  His
Mother followed in the crowd and violently beat her breast in
sorrow, whereupon the young man said, "I wish to say something to
my Mother in her ear."  She came close to him, and he quickly
seized her ear with his teeth and bit it off.  The Mother
upbraided him as an unnatural child, whereon he replied, "Ah! if
you had beaten me when I first stole and brought to you that
lesson-book, I should not have come to this, nor have been thus
led to a disgraceful death."


The Old Man and Death

AN OLD MAN was employed in cutting wood in the forest, and, in
carrying the faggots to the city for sale one day, became very
wearied with his long journey.  He sat down by the wayside, and
throwing down his load, besought "Death" to come.  "Death"
immediately appeared in answer to his summons and asked for what
reason he had called him.  The Old Man hurriedly replied, "That,
lifting up the load, you may place it again upon my shoulders."


The Fir-Tree and the Bramble

A FIR-TREE said boastingly to the Bramble, "You are useful for
nothing at all; while I am everywhere used for roofs and houses."
The Bramble answered:  'You poor creature, if you would only call
to mind the axes and saws which are about to hew you down, you
would have reason to wish that you had grown up a Bramble, not a
Fir-Tree."

Better poverty without care, than riches with.


The Mouse, the Frog, and the Hawk

A MOUSE who always lived on the land, by an unlucky chance formed
an intimate acquaintance with a Frog, who lived for the most part
in the water.  The Frog, one day intent on mischief, bound the
foot of the Mouse tightly to his own.  Thus joined together, the
Frog first of all led his friend the Mouse to the meadow where
they were accustomed to find their food.  After this, he
gradually led him towards the pool in which he lived, until
reaching the very brink, he suddenly jumped in, dragging the
Mouse with him.  The Frog enjoyed the water amazingly, and swam
croaking about, as if he had done a good deed.  The unhappy Mouse
was soon suffocated by the water, and his dead body floated about
on the surface, tied to the foot of the Frog.  A Hawk observed
it, and, pouncing upon it with his talons, carried it aloft.  The
Frog, being still fastened to the leg of the Mouse, was also
carried off a prisoner, and was eaten by the Hawk.

Harm hatch, harm catch.


The Man Bitten by a Dog

A MAN who had been bitten by a Dog went about in quest of someone
who might heal him.  A friend, meeting him and learning what he
wanted, said, "If you would be cured, take a piece of bread, and
dip it in the blood from your wound, and go and give it to the
Dog that bit you."  The Man who had been bitten laughed at this
advice and said, "Why? If I should do so, it would be as if I
should beg every Dog in the town to bite me."

Benefits bestowed upon the evil-disposed increase their means of
injuring you.


The Two Pots

A RIVER carried down in its stream two Pots, one made of
earthenware and the other of brass.  The Earthen Pot said to the
Brass Pot, "Pray keep at a distance and do not come near me, for
if you touch me ever so slightly, I shall be broken in pieces,
and besides, I by no means wish to come near you."

Equals make the best friends.


The Wolf and the Sheep

A WOLF, sorely wounded and bitten by dogs, lay sick and maimed in
his lair.  Being in want of food, he called to a Sheep who was
passing, and asked him to fetch some water from a stream flowing
close beside him.  "For," he said, "if you will bring me drink, I
will find means to provide myself with meat."  "Yes," said the
Sheep, "if I should bring you the draught, you would doubtless
make me provide the meat also."

Hypocritical speeches are easily seen through.


The Aethiop

THE PURCHASER of a black servant was persuaded that the color of
his skin arose from dirt contracted through the neglect of his
former masters.  On bringing him home he resorted to every means
of cleaning, and subjected the man to incessant scrubbings.  The
servant caught a severe cold, but he never changed his color or
complexion.

What's bred in the bone will stick to the flesh.


The Fisherman and His Nets

A FISHERMAN, engaged in his calling, made a very successful cast
and captured a great haul of fish.  He managed by a skillful
handling of his net to retain all the large fish and to draw them
to the shore; but he could not prevent the smaller fish from
falling back through the meshes of the net into the sea.


The Huntsman and the Fisherman

A HUNTSMAN, returning with his dogs from the field, fell in by
chance with a Fisherman who was bringing home a basket well laden
with fish.  The Huntsman wished to have the fish, and their owner
experienced an equal longing for the contents of the game-bag.
They quickly agreed to exchange the produce of their day's sport.
Each was so well pleased with his bargain that they made for some
time the same exchange day after day.  Finally a neighbor said to
them, "If you go on in this way, you will soon destroy by
frequent use the pleasure of your exchange, and each will again
wish to retain the fruits of his own sport."

Abstain and enjoy.


The Old Woman and the Wine-Jar

AN OLD WOMAN found an empty jar which had lately been full of
prime old wine and which still retained the fragrant smell of its
former contents.  She greedily placed it several times to her
nose, and drawing it backwards and forwards said, "O most
delicious! How nice must the Wine itself have been, when it
leaves behind in the very vessel which contained it so sweet a
perfume!"

The memory of a good deed lives.


The Fox and the Crow

A CROW having stolen a bit of meat, perched in a tree and held it
in her beak.  A Fox, seeing this, longed to possess the meat
himself, and by a wily stratagem succeeded.  "How handsome is the
Crow," he exclaimed, in the beauty of her shape and in the
fairness of her complexion! Oh, if her voice were only equal to
her beauty, she would deservedly be considered the Queen of
Birds!"  This he said deceitfully; but the Crow, anxious to refute
the reflection cast upon her voice, set up a loud caw and dropped
the flesh.  The Fox quickly picked it up, and thus addressed the
Crow:  "My good Crow, your voice is right enough, but your wit is
wanting."


The Two Dogs

A MAN had two dogs:  a Hound, trained to assist him in his sports,
and a Housedog, taught to watch the house.  When he returned home
after a good day's sport, he always gave the Housedog a large
share of his spoil.  The Hound, feeling much aggrieved at this,
reproached his companion, saying, "It is very hard to have all
this labor, while you, who do not assist in the chase, luxuriate
on the fruits of my exertions."  The Housedog replied, "Do not
blame me, my friend, but find fault with the master, who has not
taught me to labor, but to depend for subsistence on the labor of
others."

Children are not to be blamed for the faults of their parents.


The Stag in the Ox-Stall

A STAG, roundly chased by the hounds and blinded by fear to the
danger he was running into, took shelter in a farmyard and hid
himself in a shed among the oxen.  An Ox gave him this kindly
warning:  "O unhappy creature! why should you thus, of your own
accord, incur destruction and trust yourself in the house of your
enemy?'  The Stag replied:  "Only allow me, friend, to stay where I
am, and I will undertake to find some favorable opportunity of
effecting my escape."  At the approach of the evening the herdsman
came to feed his cattle, but did not see the Stag; and even the
farm-bailiff with several laborers passed through the shed and
failed to notice him.  The Stag, congratulating himself on his
safety, began to express his sincere thanks to the Oxen who had
kindly helped him in the hour of need.  One of them again
answered him:  "We indeed wish you well, but the danger is not
over.  There is one other yet to pass through the shed, who has
as it were a hundred eyes, and until he has come and gone, your
life is still in peril."  At that moment the master himself
entered, and having had to complain that his oxen had not been
properly fed, he went up to their racks and cried out:  "Why is
there such a scarcity of fodder? There is not half enough straw
for them to lie on.  Those lazy fellows have not even swept the
cobwebs away."  While he thus examined everything in turn, he
spied the tips of the antlers of the Stag peeping out of the
straw.  Then summoning his laborers, he ordered that the Stag
should be seized and killed.


The Hawk, the Kite, and the Pigeons

THE PIGEONS, terrified by the appearance of a Kite, called upon
the Hawk to defend them.  He at once consented.  When they had
admitted him into the cote, they found that he made more havoc
and slew a larger number of them in one day than the Kite could
pounce upon in a whole year.

Avoid a remedy that is worse than the disease.


The Widow and the Sheep

A CERTAIN poor widow had one solitary Sheep.  At shearing time,
wishing to take his fleece and to avoid expense, she sheared him
herself, but used the shears so unskillfully that with the fleece
she sheared the flesh.  The Sheep, writhing with pain, said, "Why
do you hurt me so, Mistress? What weight can my blood add to the
wool? If you want my flesh, there is the butcher, who will kill
me in an instant; but if you want my fleece and wool, there is
the shearer, who will shear and not hurt me."

The least outlay is not always the greatest gain.


The Wild Ass and the Lion

A WILD ASS and a Lion entered into an alliance so that they might
capture the beasts of the forest with greater ease.  The Lion
agreed to assist the Wild Ass with his strength, while the Wild
Ass gave the Lion the benefit of his greater speed.  When they
had taken as many beasts as their necessities required, the Lion
undertook to distribute the prey, and for this purpose divided it
into three shares.  "I will take the first share," he said,
"because I am King:  and the second share, as a partner with you
in the chase:  and the third share (believe me) will be a source
of great evil to you, unless you willingly resign it to me, and
set off as fast as you can."

Might makes right.


The Eagle and the Arrow

AN EAGLE sat on a lofty rock, watching the movements of a Hare
whom he sought to make his prey.  An archer, who saw the Eagle
from a place of concealment, took an accurate aim and wounded him
mortally.  The Eagle gave one look at the arrow that had entered
his heart and saw in that single glance that its feathers had
been furnished by himself.  "It is a double grief to me," he
exclaimed, "that I should perish by an arrow feathered from my
own wings."


The Sick Kite

A KITE, sick unto death, said to his mother:  "O Mother! do not
mourn, but at once invoke the gods that my life may be
prolonged."  She replied, "Alas! my son, which of the gods do you
think will pity you? Is there one whom you have not outraged by
filching from their very altars a part of the sacrifice offered
up to them?'

We must make friends in prosperity if we would have their help in
adversity.


The Lion and the Dolphin

A LION roaming by the seashore saw a Dolphin lift up its head out
of the waves, and suggested that they contract an alliance,
saying that of all the animals they ought to be the best friends,
since the one was the king of beasts on the earth, and the other
was the sovereign ruler of all the inhabitants of the ocean.  The
Dolphin gladly consented to this request.  Not long afterwards
the Lion had a combat with a wild bull, and called on the Dolphin
to help him.  The Dolphin, though quite willing to give him
assistance, was unable to do so, as he could not by any means
reach the land.  The Lion abused him as a traitor.  The Dolphin
replied, "Nay, my friend, blame not me, but Nature, which, while
giving me the sovereignty of the sea, has quite denied me the
power of living upon the land."


The Lion and the Boar

ON A SUMMER DAY, when the great heat induced a general thirst
among the beasts, a Lion and a Boar came at the same moment to a
small well to drink.  They fiercely disputed which of them should
drink first, and were soon engaged in the agonies of a mortal
combat.  When they stopped suddenly to catch their breath for a
fiercer renewal of the fight, they saw some Vultures waiting in
the distance to feast on the one that should fall first.  They at
once made up their quarrel, saying, "It is better for us to make
friends, than to become the food of Crows or Vultures."


The One-Eyed Doe

A DOE blind in one eye was accustomed to graze as near to the
edge of the cliff as she possibly could, in the hope of securing
her greater safety.  She turned her sound eye towards the land
that she might get the earliest tidings of the approach of hunter
or hound, and her injured eye towards the sea, from whence she
entertained no anticipation of danger.  Some boatmen sailing by
saw her, and taking a successful aim, mortally wounded her.
Yielding up her last breath, she gasped forth this lament:  "O
wretched creature that I am! to take such precaution against the
land, and after all to find this seashore, to which I had come
for safety, so much more perilous."


The Shepherd and the Sea

A SHEPHERD, keeping watch over his sheep near the shore, saw the
Sea very calm and smooth, and longed to make a voyage with a view
to commerce.  He sold all his flock, invested it in a cargo of
dates, and set sail.  But a very great tempest came on, and the
ship being in danger of sinking, he threw all his merchandise
overboard, and barely escaped with his life in the empty ship.
Not long afterwards when someone passed by and observed the
unruffled calm of the Sea, he interrupted him and said, "It is
again in want of dates, and therefore looks quiet."


The Ass, the Cock, and the Lion

AN ASS and a Cock were in a straw-yard together when a Lion,
desperate from hunger, approached the spot.  He was about to
spring upon the Ass, when the Cock (to the sound of whose voice
the Lion, it is said, has a singular aversion) crowed loudly, and
the Lion fled away as fast as he could.  The Ass, observing his
trepidation at the mere crowing of a Cock summoned courage to
attack him, and galloped after him for that purpose.  He had run
no long distance, when the Lion, turning about, seized him and
tore him to pieces.

False confidence often leads into danger.


The Mice and the Weasels

THE WEASELS and the Mice waged a perpetual war with each other,
in which much blood was shed.  The Weasels were always the
victors.  The Mice thought that the cause of their frequent
defeats was that they had no leaders set apart from the general
army to command them, and that they were exposed to dangers from
lack of discipline.  They therefore chose as leaders Mice that
were most renowned for their family descent, strength, and
counsel, as well as those most noted for their courage in the
fight, so that they might be better marshaled in battle array and
formed into troops, regiments, and battalions.  When all this was
done, and the army disciplined, and the herald Mouse had duly
proclaimed war by challenging the Weasels, the newly chosen
generals bound their heads with straws, that they might be more
conspicuous to all their troops.  Scarcely had the battle begun,
when a great rout overwhelmed the Mice, who scampered off as fast
as they could to their holes.  The generals, not being able to
get in on account of the ornaments on their heads, were all
captured and eaten by the Weasels.

The more honor the more danger.


The Mice in Council

THE MICE summoned a council to decide how they might best devise
means of warning themselves of the approach of their great enemy
the Cat.  Among the many plans suggested, the one that found most
favor was the proposal to tie a bell to the neck of the Cat, so
that the Mice, being warned by the sound of the tinkling, might
run away and hide themselves in their holes at his approach.  But
when the Mice further debated who among them should thus "bell
the Cat," there was no one found to do it.


The Wolf and the Housedog

A WOLF, meeting a big well-fed Mastiff with a wooden collar about
his neck asked him who it was that fed him so well and yet
compelled him to drag that heavy log about wherever he went.
"The master," he replied.  Then said the Wolf:  "May no friend of
mine ever be in such a plight; for the weight of this chain is
enough to spoil the appetite."


The Rivers and the Sea

THE RIVERS joined together to complain to the Sea, saying, "Why
is it that when we flow into your tides so potable and sweet, you
work in us such a change, and make us salty and unfit to drink?"
The Sea, perceiving that they intended to throw the blame on him,
said, "Pray cease to flow into me, and then you will not be made
briny."


The Playful Ass

AN ASS climbed up to the roof of a building, and frisking about
there, broke in the tiling.  The owner went up after him and
quickly drove him down, beating him severely with a thick wooden
cudgel.  The Ass said, "Why, I saw the Monkey do this very thing
yesterday, and you all laughed heartily, as if it afforded you
very great amusement."


The Three Tradesmen

A GREAT CITY was besieged, and its inhabitants were called
together to consider the best means of protecting it from the
enemy.  A Bricklayer earnestly recommended bricks as affording
the best material for an effective resistance.  A Carpenter, with
equal enthusiasm, proposed timber as a preferable method of
defense.  Upon which a Currier stood up and said, "Sirs, I differ
from you altogether:  there is no material for resistance equal to
a covering of hides; and nothing so good as leather."

Every man for himself.


The Master and His Dogs

A CERTAIN MAN, detained by a storm in his country house, first of
all killed his sheep, and then his goats, for the maintenance of
his household.  The storm still continuing, he was obliged to
slaughter his yoke oxen for food.  On seeing this, his Dogs took
counsel together, and said, "It is time for us to be off, for if
the master spare not his oxen, who work for his gain, how can we
expect him to spare us?'

He is not to be trusted as a friend who mistreats his own family.


The Wolf and the Shepherds

A WOLF, passing by, saw some Shepherds in a hut eating a haunch
of mutton for their dinner.  Approaching them, he said, "What a
clamor you would raise if I were to do as you are doing!"


The Dolphins, the Whales, and the Sprat

THE DOLPHINS and Whales waged a fierce war with each other.  When
the battle was at its height, a Sprat lifted its head out of the
waves and said that he would reconcile their differences if they
would accept him as an umpire.  One of the Dolphins replied, "We
would far rather be destroyed in our battle with each other than
admit any interference from you in our affairs."


The Ass Carrying the Image

AN ASS once carried through the streets of a city a famous wooden
Image, to be placed in one of its Temples.  As he passed along,
the crowd made lowly prostration before the Image.  The Ass,
thinking that they bowed their heads in token of respect for
himself, bristled up with pride, gave himself airs, and refused
to move another step.  The driver, seeing him thus stop, laid his
whip lustily about his shoulders and said, "O you perverse
dull-head! it is not yet come to this, that men pay worship to an
Ass."

They are not wise who give to themselves the credit due to
others.


The Two Travelers and the Axe

TWO MEN were journeying together.  One of them picked up an axe
that lay upon the path, and said, "I have found an axe."  "Nay, my
friend," replied the other, "do not say 'I,' but 'We' have found
an axe."  They had not gone far before they saw the owner of the
axe pursuing them, and he who had picked up the axe said, "We are
undone."  "Nay," replied the other, "keep to your first mode of
speech, my friend; what you thought right then, think right now.
Say 'I,' not 'We' are undone."

He who shares the danger ought to share the prize.


The Old Lion

A LION, worn out with years and powerless from disease, lay on
the ground at the point of death.  A Boar rushed upon him, and
avenged with a stroke of his tusks a long-remembered injury.
Shortly afterwards the Bull with his horns gored him as if he
were an enemy.  When the Ass saw that the huge beast could be
assailed with impunity, he let drive at his forehead with his
heels.  The expiring Lion said, "I have reluctantly brooked the
insults of the brave, but to be compelled to endure such
treatment from thee, a disgrace to Nature, is indeed to die a
double death."


The Old Hound

A HOUND, who in the days of his youth and strength had never
yielded to any beast of the forest, encountered in his old age a
boar in the chase.  He seized him boldly by the ear, but could
not retain his hold because of the decay of his teeth, so that
the boar escaped.  His master, quickly coming up, was very much
disappointed, and fiercely abused the dog.  The Hound looked up
and said, "It was not my fault.  master:  my spirit was as good as
ever, but I could not help my infirmities.  I rather deserve to
be praised for what I have been, than to be blamed for what I
am."


The Bee and Jupiter

A BEE from Mount Hymettus, the queen of the hive, ascended to
Olympus to present Jupiter some honey fresh from her combs.
Jupiter, delighted with the offering of honey, promised to give
whatever she should ask.  She therefore besought him, saying,
"Give me, I pray thee, a sting, that if any mortal shall approach
to take my honey, I may kill him."  Jupiter was much displeased,
for he loved the race of man, but could not refuse the request
because of his promise.  He thus answered the Bee:  "You shall
have your request, but it will be at the peril of your own life.
For if you use your sting, it shall remain in the wound you make,
and then you will die from the loss of it."

Evil wishes, like chickens, come home to roost.


The Milk-Woman and Her Pail

A FARMER'S daughter was carrying her Pail of milk from the field
to the farmhouse, when she fell a-musing.  "The money for which
this milk will be sold, will buy at least three hundred eggs.
The eggs, allowing for all mishaps, will produce two hundred and
fifty chickens.  The chickens will become ready for the market
when poultry will fetch the highest price, so that by the end of
the year I shall have money enough from my share to buy a new
gown.  In this dress I will go to the Christmas parties, where
all the young fellows will propose to me, but I will toss my head
and refuse them every one."  At this moment she tossed her head in
unison with her thoughts, when down fell the milk pail to the
ground, and all her imaginary schemes perished in a moment.


The Seaside Travelers

SOME TRAVELERS, journeying along the seashore, climbed to the
summit of a tall cliff, and looking over the sea, saw in the
distance what they thought was a large ship.  They waited in the
hope of seeing it enter the harbor, but as the object on which
they looked was driven nearer to shore by the wind, they found
that it could at the most be a small boat, and not a ship.  When
however it reached the beach, they discovered that it was only a
large faggot of sticks, and one of them said to his companions,
"We have waited for no purpose, for after all there is nothing to
see but a load of wood."

Our mere anticipations of life outrun its realities.


The Brazier and His Dog

A BRAZIER had a little Dog, which was a great favorite with his
master, and his constant companion.  While he hammered away at
his metals the Dog slept; but when, on the other hand, he went to
dinner and began to eat, the Dog woke up and wagged his tail, as
if he would ask for a share of his meal.  His master one day,
pretending to be angry and shaking his stick at him, said, "You
wretched little sluggard! what shall I do to you? While I am
hammering on the anvil, you sleep on the mat; and when I begin to
eat after my toil, you wake up and wag your tail for food.  Do
you not know that labor is the source of every blessing, and that
none but those who work are entitled to eat?'


The Ass and His Shadow

A TRAVELER hired an Ass to convey him to a distant place.  The
day being intensely hot, and the sun shining in its strength, the
Traveler stopped to rest, and sought shelter from the heat under
the Shadow of the Ass.  As this afforded only protection for one,
and as the Traveler and the owner of the Ass both claimed it, a
violent dispute arose between them as to which of them had the
right to the Shadow.  The owner maintained that he had let the
Ass only, and not his Shadow.  The Traveler asserted that he had,
with the hire of the Ass, hired his Shadow also.  The quarrel
proceeded from words to blows, and while the men fought, the Ass
galloped off.

In quarreling about the shadow we often lose the substance.


The Ass and His Masters

AN ASS, belonging to an herb-seller who gave him too little food
and too much work made a petition to Jupiter to be released from
his present service and provided with another master.  Jupiter,
after warning him that he would repent his request, caused him to
be sold to a tile-maker.  Shortly afterwards, finding that he had
heavier loads to carry and harder work in the brick-field, he
petitioned for another change of master.  Jupiter, telling him
that it would be the last time that he could grant his request,
ordained that he be sold to a tanner.  The Ass found that he had
fallen into worse hands, and noting his master's occupation,
said, groaning:  "It would have been better for me to have been
either starved by the one, or to have been overworked by the
other of my former masters, than to have been bought by my
present owner, who will even after I am dead tan my hide, and
make me useful to him."


The Oak and the Reeds

A VERY LARGE OAK was uprooted by the wind and thrown across a
stream.  It fell among some Reeds, which it thus addressed:  "I
wonder how you, who are so light and weak, are not entirely
crushed by these strong winds."  They replied, "You fight and
contend with the wind, and consequently you are destroyed; while
we on the contrary bend before the least breath of air, and
therefore remain unbroken, and escape."

Stoop to conquer.


The Fisherman and the Little Fish

A FISHERMAN who lived on the produce of his nets, one day caught
a single small Fish as the result of his day's labor.  The Fish,
panting convulsively, thus entreated for his life:  "O Sir, what
good can I be to you, and how little am I worth? I am not yet
come to my full size.  Pray spare my life, and put me back into
the sea.  I shall soon become a large fish fit for the tables of
the rich, and then you can catch me again, and make a handsome
profit of me."  The Fisherman replied, "I should indeed be a very
simple fellow if, for the chance of a greater uncertain profit, I
were to forego my present certain gain."


The Hunter and the Woodman

A HUNTER, not very bold, was searching for the tracks of a Lion.
He asked a man felling oaks in the forest if he had seen any
marks of his footsteps or knew where his lair was.  "I will,"
said the man, "at once show you the Lion himself."  The Hunter,
turning very pale and chattering with his teeth from fear,
replied, "No, thank you.  I did not ask that; it is his track
only I am in search of, not the Lion himself."

The hero is brave in deeds as well as words.


The Wild Boar and the Fox

A WILD BOAR stood under a tree and rubbed his tusks against the
trunk.  A Fox passing by asked him why he thus sharpened his
teeth when there was no danger threatening from either huntsman
or hound.  He replied, "I do it advisedly; for it would never do
to have to sharpen my weapons just at the time I ought to be
using them."


The Lion in a Farmyard

A LION entered a farmyard.  The Farmer, wishing to catch him,
shut the gate.  When the Lion found that he could not escape, he
flew upon the sheep and killed them, and then attacked the oxen.
The Farmer, beginning to be alarmed for his own safety, opened
the gate and released the Lion.  On his departure the Farmer
grievously lamented the destruction of his sheep and oxen, but
his wife, who had been a spectator to all that took place, said,
"On my word, you are rightly served, for how could you for a
moment think of shutting up a Lion along with you in your
farmyard when you know that you shake in your shoes if you only
hear his roar at a distance?'


Mercury and the Sculptor

MERCURY ONCE DETERMINED to learn in what esteem he was held among
mortals.  For this purpose he assumed the character of a man and
visited in this disguise a Sculptor's studio having looked at
various statues, he demanded the price of two figures of Jupiter
and Juno.  When the sum at which they were valued was named, he
pointed to a figure of himself, saying to the Sculptor, "You will
certainly want much more for this, as it is the statue of the
Messenger of the Gods, and author of all your gain."  The
Sculptor replied, "Well, if you will buy these, I'll fling you
that into the bargain."


The Swan and the Goose

A CERTAIN rich man bought in the market a Goose and a Swan.  He
fed the one for his table and kept the other for the sake of its
song.  When the time came for killing the Goose, the cook went to
get him at night, when it was dark, and he was not able to
distinguish one bird from the other.  By mistake he caught the
Swan instead of the Goose.  The Swan, threatened with death,
burst forth into song and thus made himself known by his voice,
and preserved his life by his melody.


The Swollen Fox

A VERY HUNGRY FOX, seeing some bread and meat left by shepherds
in the hollow of an oak, crept into the hole and made a hearty
meal.  When he finished, he was so full that he was not able to
get out, and began to groan and lament his fate.  Another Fox
passing by heard his cries, and coming up, inquired the cause of
his complaining.  On learning what had happened, he said to him,
"Ah, you will have to remain there, my friend, until you become
such as you were when you crept in, and then you will easily get
out."


The Fox and the Woodcutter

A FOX, running before the hounds, came across a Woodcutter
felling an oak and begged him to show him a safe hiding-place.
The Woodcutter advised him to take shelter in his own hut, so the
Fox crept in and hid himself in a corner.  The huntsman soon came
up with his hounds and inquired of the Woodcutter if he had seen
the Fox.  He declared that he had not seen him, and yet pointed,
all the time he was speaking, to the hut where the Fox lay
hidden.  The huntsman took no notice of the signs, but believing
his word, hastened forward in the chase.  As soon as they were
well away, the Fox departed without taking any notice of the
Woodcutter:  whereon he called to him and reproached him, saying,
"You ungrateful fellow, you owe your life to me, and yet you
leave me without a word of thanks."  The Fox replied, "Indeed, I
should have thanked you fervently if your deeds had been as good
as your words, and if your hands had not been traitors to your
speech."


The Birdcatcher, the Partridge, and the Cock

A BIRDCATCHER was about to sit down to a dinner of herbs when a
friend unexpectedly came in.  The bird-trap was quite empty, as
he had caught nothing, and he had to kill a pied Partridge, which
he had tamed for a decoy.  The bird entreated earnestly for his
life:  "What would you do without me when next you spread your
nets? Who would chirp you to sleep, or call for you the covey of
answering birds?'  The Birdcatcher spared his life, and determined
to pick out a fine young Cock just attaining to his comb.  But
the Cock expostulated in piteous tones from his perch:  "If you
kill me, who will announce to you the appearance of the dawn?
Who will wake you to your daily tasks or tell you when it is time
to visit the bird-trap in the morning?'  He replied, "What you say
is true.  You are a capital bird at telling the time of day.  But
my friend and I must have our dinners."

Necessity knows no law.


The Monkey and the Fishermen

A MONKEY perched upon a lofty tree saw some Fishermen casting
their nets into a river, and narrowly watched their proceedings.
The Fishermen after a while gave up fishing, and on going home to
dinner left their nets upon the bank.  The Monkey, who is the
most imitative of animals, descended from the treetop and
endeavored to do as they had done.  Having handled the net, he
threw it into the river, but became tangled in the meshes and
drowned.  With his last breath he said to himself, "I am rightly
served; for what business had I who had never handled a net to
try and catch fish?'


The Flea and the Wrestler

A FLEA settled upon the bare foot of a Wrestler and bit him,
causing the man to call loudly upon Hercules for help.  When the
Flea a second time hopped upon his foot, he groaned and said, "O
Hercules! if you will not help me against a Flea, how can I hope
for your assistance against greater antagonists?'


The Two Frogs

TWO FROGS dwelt in the same pool.  When the pool dried up under
the summer's heat, they left it and set out together for another
home.  As they went along they chanced to pass a deep well, amply
supplied with water, and when they saw it, one of the Frogs said
to the other, "Let us descend and make our abode in this well:  it
will furnish us with shelter and food."  The other replied with
greater caution, "But suppose the water should fail us.  How can
we get out again from so great a depth?'

Do nothing without a regard to the consequences.


The Cat and the Mice

A CERTAIN HOUSE was overrun with Mice.  A Cat, discovering this,
made her way into it and began to catch and eat them one by one.
Fearing for their lives, the Mice kept themselves close in their
holes.  The Cat was no longer able to get at them and perceived
that she must tempt them forth by some device.  For this purpose
she jumped upon a peg, and suspending herself from it, pretended
to be dead.  One of the Mice, peeping stealthily out, saw her and
said, "Ah, my good madam, even though you should turn into a
meal-bag, we will not come near you."


The Lion, the Bear, and the Fox

A LION and a Bear seized a Kid at the same moment, and fought
fiercely for its possession.  When they had fearfully lacerated
each other and were faint from the long combat, they lay down
exhausted with fatigue.  A Fox, who had gone round them at a
distance several times, saw them both stretched on the ground
with the Kid lying untouched in the middle.  He ran in between
them, and seizing the Kid scampered off as fast as he could.  The
Lion and the Bear saw him, but not being able to get up, said,
"Woe be to us, that we should have fought and belabored ourselves
only to serve the turn of a Fox."

It sometimes happens that one man has all the toil, and another
all the profit.


The Doe and the Lion

A DOE hard pressed by hunters sought refuge in a cave belonging
to a Lion.  The Lion concealed himself on seeing her approach,
but when she was safe within the cave, sprang upon her and tore
her to pieces.  "Woe is me," exclaimed the Doe, "who have escaped
from man, only to throw myself into the mouth of a wild beast?'

In avoiding one evil, care must be taken not to fall into
another.


The Farmer and the Fox

A FARMER, who bore a grudge against a Fox for robbing his poultry
yard, caught him at last, and being determined to take an ample
revenge, tied some rope well soaked in oil to his tail, and set
it on fire.  The Fox by a strange fatality rushed to the fields
of the Farmer who had captured him.  It was the time of the wheat
harvest; but the Farmer reaped nothing that year and returned
home grieving sorely.


The Seagull and the Kite

A SEAGULL having bolted down too large a fish, burst its deep
gullet-bag and lay down on the shore to die.  A Kite saw him and
exclaimed:  "You richly deserve your fate; for a bird of the air
has no business to seek its food from the sea."

Every man should be content to mind his own business.


The Philosopher, the Ants, and Mercury

A PHILOSOPHER witnessed from the shore the shipwreck of a vessel,
of which the crew and passengers were all drowned.  He inveighed
against the injustice of Providence, which would for the sake of
one criminal perchance sailing in the ship allow so many innocent
persons to perish.  As he was indulging in these reflections, he
found himself surrounded by a whole army of Ants, near whose nest
he was standing.  One of them climbed up and stung him, and he
immediately trampled them all to death with his foot.  Mercury
presented himself, and striking the Philosopher with his wand,
said, "And are you indeed to make yourself a judge of the
dealings of Providence, who hast thyself in a similar manner
treated these poor Ants?'


The Mouse and the Bull

A BULL was bitten by a Mouse and, angered by the wound, tried to
capture him.  But the Mouse reached his hole in safety.  Though
the Bull dug into the walls with his horns, he tired before he
could rout out the Mouse, and crouching down, went to sleep
outside the hole.  The Mouse peeped out, crept furtively up his
flank, and again biting him, retreated to his hole.  The Bull
rising up, and not knowing what to do, was sadly perplexed.  At
which the Mouse said, "The great do not always prevail.  There
are times when the small and lowly are the strongest to do
mischief."


The Lion and the Hare

A LION came across a Hare, who was fast asleep.  He was just in
the act of seizing her, when a fine young Hart trotted by, and he
left the Hare to follow him.  The Hare, scared by the noise,
awoke and scudded away.  The Lion was unable after a long chase
to catch the Hart, and returned to feed upon the Hare.  On
finding that the Hare also had run off, he said, "I am rightly
served, for having let go of the food that I had in my hand for
the chance of obtaining more."


The Peasant and the Eagle

A PEASANT found an Eagle captured in a trap, and much admiring
the bird, set him free.  The Eagle did not prove ungrateful to
his deliverer, for seeing the Peasant sitting under a wall which
was not safe, he flew toward him and with his talons snatched a
bundle from his head.  When the Peasant rose in pursuit, the
Eagle let the bundle fall again.  Taking it up, the man returned
to the same place, to find that the wall under which he had been
sitting had fallen to pieces; and he marveled at the service
rendered him by the Eagle.


The Image of Mercury and the Carpenter

A VERY POOR MAN, a Carpenter by trade, had a wooden image of
Mercury, before which he made offerings day by day, and begged
the idol to make him rich, but in spite of his entreaties he
became poorer and poorer.  At last, being very angry, he took his
image down from its pedestal and dashed it against the wall.
When its head was knocked off, out came a stream of gold, which
the Carpenter quickly picked up and said, "Well, I think thou art
altogether contradictory and unreasonable; for when I paid you
honor, I reaped no benefits:  but now that I maltreat you I am
loaded with an abundance of riches."


The Bull and the Goat

A BULL, escaping from a Lion, hid in a cave which some shepherds
had recently occupied.  As soon as he entered, a He-Goat left in
the cave sharply attacked him with his horns.  The Bull quietly
addressed him:  "Butt away as much as you will.  I have no fear of
you, but of the Lion.  Let that monster go away and I will soon
let you know what is the respective strength of a Goat and a
Bull."

It shows an evil disposition to take advantage of a friend in
distress.


The Dancing Monkeys

A PRINCE had some Monkeys trained to dance.  Being naturally
great mimics of men's actions, they showed themselves most apt
pupils, and when arrayed in their rich clothes and masks, they
danced as well as any of the courtiers.  The spectacle was often
repeated with great applause, till on one occasion a courtier,
bent on mischief, took from his pocket a handful of nuts and
threw them upon the stage.  The Monkeys at the sight of the nuts
forgot their dancing and became (as indeed they were) Monkeys
instead of actors.  Pulling off their masks and tearing their
robes, they fought with one another for the nuts.  The dancing
spectacle thus came to an end amidst the laughter and ridicule of
the audience.

The Fox and the Leopard

THE FOX and the Leopard disputed which was the more beautiful of
the two.  The Leopard exhibited one by one the various spots
which decorated his skin.  But the Fox, interrupting him, said,
"And how much more beautiful than you am I, who am decorated, not
in body, but in mind."


The Monkeys and Their Mother

THE MONKEY, it is said, has two young ones at each birth.  The
Mother fondles one and nurtures it with the greatest affection
and care, but hates and neglects the other.  It happened once
that the young one which was caressed and loved was smothered by
the too great affection of the Mother, while the despised one was
nurtured and reared in spite of the neglect to which it was
exposed.

The best intentions will not always ensure success.


The Oaks and Jupiter

THE OAKS presented a complaint to Jupiter, saying, "We bear for
no purpose the burden of life, as of all the trees that grow we
are the most continually in peril of the axe."  Jupiter made
answer:  "You have only to thank yourselves for the misfortunes to
which you are exposed:  for if you did not make such excellent
pillars and posts, and prove yourselves so serviceable to the
carpenters and the farmers, the axe would not so frequently be
laid to your roots."


The Hare and the Hound

A HOUND started a Hare from his lair, but after a long run, gave
up the chase.  A goat-herd seeing him stop, mocked him, saying
"The little one is the best runner of the two."  The Hound
replied, "You do not see the difference between us:  I was only
running for a dinner, but he for his life."


The Traveler and Fortune

A TRAVELER wearied from a long journey lay down, overcome with
fatigue, on the very brink of a deep well.  Just as he was about
to fall into the water, Dame Fortune, it is said, appeared to him
and waking him from his slumber thus addressed him:  "Good Sir,
pray wake up:  for if you fall into the well, the blame will be
thrown on me, and I shall get an ill name among mortals; for I
find that men are sure to impute their calamities to me, however
much by their own folly they have really brought them on
themselves."

Everyone is more or less master of his own fate.


The Bald Knight

A BALD KNIGHT, who wore a wig, went out to hunt.  A sudden puff
of wind blew off his hat and wig, at which a loud laugh rang
forth from his companions.  He pulled up his horse, and with
great glee joined in the joke by saying, "What a marvel it is
that hairs which are not mine should fly from me, when they have
forsaken even the man on whose head they grew."


The Shepherd and the Dog

A SHEPHERD penning his sheep in the fold for the night was about
to shut up a wolf with them, when his Dog perceiving the wolf
said, "Master, how can you expect the sheep to be safe if you
admit a wolf into the fold?'


The Lamp

A LAMP, soaked with too much oil and flaring brightly, boasted
that it gave more light than the sun.  Then a sudden puff of wind
arose, and the Lamp was immediately extinguished.  Its owner lit
it again, and said:  "Boast no more, but henceforth be content to
give thy light in silence.  Know that not even the stars need to
be relit"


The Lion, the Fox, and the Ass

THE LION, the Fox and the Ass entered into an agreement to assist
each other in the chase.  Having secured a large booty, the Lion
on their return from the forest asked the Ass to allot his due
portion to each of the three partners in the treaty.  The Ass
carefully divided the spoil into three equal shares and modestly
requested the two others to make the first choice.  The Lion,
bursting out into a great rage, devoured the Ass.  Then he
requested the Fox to do him the favor to make a division.  The
Fox accumulated all that they had killed into one large heap and
left to himself the smallest possible morsel.  The Lion said,
"Who has taught you, my very excellent fellow, the art of
division? You are perfect to a fraction."  He replied, "I learned
it from the Ass, by witnessing his fate."

Happy is the man who learns from the misfortunes of others.


The Bull, the Lioness, and the Wild-Boar Hunter

A BULL finding a lion's cub asleep gored him to death with his
horns.  The Lioness came up, and bitterly lamented the death of
her whelp.  A wild-boar Hunter, seeing her distress, stood at a
distance and said to her, "Think how many men there are who have
reason to lament the loss of their children, whose deaths have
been caused by you."


The Oak and the Woodcutters

THE WOODCUTTER cut down a Mountain Oak and split it in pieces,
making wedges of its own branches for dividing the trunk.  The
Oak said with a sigh, "I do not care about the blows of the axe
aimed at my roots, but I do grieve at being torn in pieces by
these wedges made from my own branches."

Misfortunes springing from ourselves are the hardest to bear.


The Hen and the Golden Eggs

A COTTAGER and his wife had a Hen that laid a golden egg every
day.  They supposed that the Hen must contain a great lump of
gold in its inside, and in order to get the gold they killed it.
Having done so, they found to their surprise that the Hen
differed in no respect from their other hens.  The foolish pair,
thus hoping to become rich all at once, deprived themselves of
the gain of which they were assured day by day.


The Ass and the Frogs

AN ASS, carrying a load of wood, passed through a pond.  As he
was crossing through the water he lost his footing, stumbled and
fell, and not being able to rise on account of his load, groaned
heavily.  Some Frogs frequenting the pool heard his lamentation,
and said, "What would you do if you had to live here always as we
do, when you make such a fuss about a mere fall into the water?"


Men often bear little grievances with less courage than they do
large misfortunes.


The Crow and the Raven

A CROW was jealous of the Raven, because he was considered a bird
of good omen and always attracted the attention of men, who noted
by his flight the good or evil course of future events.  Seeing
some travelers approaching, the Crow flew up into a tree, and
perching herself on one of the branches, cawed as loudly as she
could.  The travelers turned towards the sound and wondered what
it foreboded, when one of them said to his companion, "Let us
proceed on our journey, my friend, for it is only the caw of a
crow, and her cry, you know, is no omen."

Those who assume a character which does not belong to them, only
make themselves ridiculous.


The Trees and the Axe

A MAN came into a forest and asked the Trees to provide him a
handle for his axe.  The Trees consented to his request and gave
him a young ash-tree.  No sooner had the man fitted a new handle
to his axe from it, than he began to use it and quickly felled
with his strokes the noblest giants of the forest.  An old oak,
lamenting when too late the destruction of his companions, said
to a neighboring cedar, "The first step has lost us all.  If we
had not given up the rights of the ash, we might yet have
retained our own privileges and have stood for ages."


The Crab and the Fox

A CRAB, forsaking the seashore, chose a neighboring green meadow
as its feeding ground.  A Fox came across him, and being very
hungry ate him up.  Just as he was on the point of being eaten,
the Crab said, "I well deserve my fate, for what business had I
on the land, when by my nature and habits I am only adapted for
the sea?'

Contentment with our lot is an element of happiness.


The Woman and Her Hen

A WOMAN possessed a Hen that gave her an egg every day.  She
often pondered how she might obtain two eggs daily instead of
one, and at last, to gain her purpose, determined to give the Hen
a double allowance of barley.  From that day the Hen became fat
and sleek, and never once laid another egg.


The Ass and the Old Shepherd

A SHEPHERD, watching his Ass feeding in a meadow, was alarmed all
of a sudden by the cries of the enemy.  He appealed to the Ass to
fly with him, lest they should both be captured, but the animal
lazily replied, "Why should I, pray? Do you think it likely the
conqueror will place on me two sets of panniers?'  "No," rejoined
the Shepherd.  "Then," said the Ass, "as long as I carry the
panniers, what matters it to me whom I serve?'

In a change of government the poor change nothing beyond the name
of their master.


The Kites and the Swans

TEE KITES of olden times, as well as the Swans, had the privilege
of song.  But having heard the neigh of the horse, they were so
enchanted with the sound, that they tried to imitate it; and, in
trying to neigh, they forgot how to sing.

The desire for imaginary benefits often involves the loss of
present blessings.


The Wolves and the Sheepdogs

THE WOLVES thus addressed the Sheepdogs:  "Why should you, who are
like us in so many things, not be entirely of one mind with us,
and live with us as brothers should? We differ from you in one
point only.  We live in freedom, but you bow down to and slave
for men, who in return for your services flog you with whips and
put collars on your necks.  They make you also guard their sheep,
and while they eat the mutton throw only the bones to you.  If
you will be persuaded by us, you will give us the sheep, and we
will enjoy them in common, till we all are surfeited."  The Dogs
listened favorably to these proposals, and, entering the den of
the Wolves, they were set upon and torn to pieces.


The Hares and the Foxes

THE HARES waged war with the Eagles, and called upon the Foxes to
help them.  They replied, "We would willingly have helped you, if
we had not known who you were, and with whom you were fighting."

Count the cost before you commit yourselves.


The Bowman and Lion

A VERY SKILLFUL BOWMAN went to the mountains in search of game,
but all the beasts of the forest fled at his approach.  The Lion
alone challenged him to combat.  The Bowman immediately shot out
an arrow and said to the Lion:  "I send thee my messenger, that
from him thou mayest learn what I myself shall be when I assail
thee."  The wounded Lion rushed away in great fear, and when a Fox
who had seen it all happen told him to be of good courage and not
to back off at the first attack he replied:  "You counsel me in
vain; for if he sends so fearful a messenger, how shall I abide
the attack of the man himself?'

Be on guard against men who can strike from a distance.


The Camel

WHEN MAN first saw the Camel, he was so frightened at his vast
size that he ran away.  After a time, perceiving the meekness and
gentleness of the beast's temper, he summoned courage enough to
approach him.  Soon afterwards, observing that he was an animal
altogether deficient in spirit, he assumed such boldness as to
put a bridle in his mouth, and to let a child drive him.

Use serves to overcome dread.


The Wasp and the Snake

A WASP seated himself upon the head of a Snake and, striking him
unceasingly with his stings, wounded him to death.  The Snake,
being in great torment and not knowing how to rid himself of his
enemy, saw a wagon heavily laden with wood, and went and
purposely placed his head under the wheels, saying, "At least my
enemy and I shall perish together."


The Dog and the Hare

A HOUND having started a Hare on the hillside pursued her for
some distance, at one time biting her with his teeth as if he
would take her life, and at another fawning upon her, as if in
play with another dog.  The Hare said to him, "I wish you would
act sincerely by me, and show yourself in your true colors.  If
you are a friend, why do you bite me so hard? If an enemy, why do
you fawn on me?'

No one can be a friend if you know not whether to trust or
distrust him.


The Bull and the Calf

A BULL was striving with all his might to squeeze himself through
a narrow passage which led to his stall.  A young Calf came up,
and offered to go before and show him the way by which he could
manage to pass.  "Save yourself the trouble," said the Bull; "I
knew that way long before you were born."


The Stag, the Wolf, and the Sheep

A STAG asked a Sheep to lend him a measure of wheat, and said
that the Wolf would be his surety.  The Sheep, fearing some fraud
was intended, excused herself, saying, "The Wolf is accustomed to
seize what he wants and to run off; and you, too, can quickly
outstrip me in your rapid flight.  How then shall I be able to
find you, when the day of payment comes?'

Two blacks do not make one white.


The Peacock and the Crane

A PEACOCK spreading its gorgeous tail mocked a Crane that passed
by, ridiculing the ashen hue of its plumage and saying, "I am
robed, like a king, in gold and purple and all the colors of the
rainbow; while you have not a bit of color on your wings."
"True," replied the Crane; "but I soar to the heights of heaven
and lift up my voice to the stars, while you walk below, like a
cock, among the birds of the dunghill."

Fine feathers don't make fine birds.


The Fox and the Hedgehog

A FOX swimming across a rapid river was carried by the force of
the current into a very deep ravine, where he lay for a long time
very much bruised, sick, and unable to move.  A swarm of hungry
blood-sucking flies settled upon him.  A Hedgehog, passing by,
saw his anguish and inquired if he should drive away the flies
that were tormenting him.  "By no means," replied the Fox; "pray
do not molest them."  "How is this?'  said the Hedgehog; "do you
not want to be rid of them?'  "No," returned the Fox, "for these
flies which you see are full of blood, and sting me but little,
and if you rid me of these which are already satiated, others
more hungry will come in their place, and will drink up all the
blood I have left."


The Eagle, the Cat, and the Wild Sow

AN EAGLE made her nest at the top of a lofty oak; a Cat, having
found a convenient hole, moved into the middle of the trunk; and
a Wild Sow, with her young, took shelter in a hollow at its foot.
The Cat cunningly resolved to destroy this chance-made colony.
To carry out her design, she climbed to the nest of the Eagle,
and said, "Destruction is preparing for you, and for me too,
unfortunately.  The Wild Sow, whom you see daily digging up the
earth, wishes to uproot the oak, so she may on its fall seize our
families as food for her young."  Having thus frightened the Eagle
out of her senses, she crept down to the cave of the Sow, and
said, "Your children are in great danger; for as soon as you go
out with your litter to find food, the Eagle is prepared to
pounce upon one of your little pigs."  Having instilled these
fears into the Sow, she went and pretended to hide herself in the
hollow of the tree.  When night came she went forth with silent
foot and obtained food for herself and her kittens, but feigning
to be afraid, she kept a lookout all through the day.  Meanwhile,
the Eagle, full of fear of the Sow, sat still on the branches,
and the Sow, terrified by the Eagle, did not dare to go out from
her cave.  And thus they both, along with their families,
perished from hunger, and afforded ample provision for the Cat
and her kittens.


The Thief and the Innkeeper

A THIEF hired a room in a tavern and stayed a while in the hope
of stealing something which should enable him to pay his
reckoning.  When he had waited some days in vain, he saw the
Innkeeper dressed in a new and handsome coat and sitting before
his door.  The Thief sat down beside him and talked with him.  As
the conversation began to flag, the Thief yawned terribly and at
the same time howled like a wolf.  The Innkeeper said, "Why do
you howl so fearfully?'  "I will tell you," said the Thief, "but
first let me ask you to hold my clothes, or I shall tear them to
pieces.  I know not, sir, when I got this habit of yawning, nor
whether these attacks of howling were inflicted on me as a
judgment for my crimes, or for any other cause; but this I do
know, that when I yawn for the third time, I actually turn into a
wolf and attack men."  With this speech he commenced a second fit
of yawning and again howled like a wolf, as he had at first.  The
Innkeeper.  hearing his tale and believing what he said, became
greatly alarmed and, rising from his seat, attempted to run away.
The Thief laid hold of his coat and entreated him to stop,
saying, "Pray wait, sir, and hold my clothes, or I shall tear
them to pieces in my fury, when I turn into a wolf."  At the same
moment he yawned the third time and set up a terrible howl.  The
Innkeeper, frightened lest he should be attacked, left his new
coat in the Thief's hand and ran as fast as he could into the inn
for safety.  The Thief made off with the coat and did not return
again to the inn.

Every tale is not to be believed.


The Mule

A MULE, frolicsome from lack of work and from too much corn,
galloped about in a very extravagant manner, and said to himself:
"My father surely was a high-mettled racer, and I am his own
child in speed and spirit."  On the next day, being driven a long
journey, and feeling very wearied, he exclaimed in a disconsolate
tone:  "I must have made a mistake; my father, after all, could
have been only an ass."


The Hart and the Vine

A HART, hard pressed in the chase, hid himself beneath the large
leaves of a Vine.  The huntsmen, in their haste, overshot the
place of his concealment.  Supposing all danger to have passed,
the Hart began to nibble the tendrils of the Vine.  One of the
huntsmen, attracted by the rustling of the leaves, looked back,
and seeing the Hart, shot an arrow from his bow and struck it.
The Hart, at the point of death, groaned:  "I am rightly served,
for I should not have maltreated the Vine that saved me."


The Serpent and the Eagle

A SERPENT and an Eagle were struggling with each other in deadly
conflict.  The Serpent had the advantage, and was about to
strangle the bird.  A countryman saw them, and running up, loosed
the coil of the Serpent and let the Eagle go free.  The Serpent,
irritated at the escape of his prey, injected his poison into the
drinking horn of the countryman.  The rustic, ignorant of his
danger, was about to drink, when the Eagle struck his hand with
his wing, and, seizing the drinking horn in his talons, carried
it aloft.


The Crow and the Pitcher

A CROW perishing with thirst saw a pitcher, and hoping to find
water, flew to it with delight.  When he reached it, he
discovered to his grief that it contained so little water that he
could not possibly get at it.  He tried everything he could think
of to reach the water, but all his efforts were in vain.  At last
he collected as many stones as he could carry and dropped them
one by one with his beak into the pitcher, until he brought the
water within his reach and thus saved his life.

Necessity is the mother of invention.


The Two Frogs

TWO FROGS were neighbors.  One inhabited a deep pond, far removed
from public view; the other lived in a gully containing little
water, and traversed by a country road.  The Frog that lived in
the pond warned his friend to change his residence and entreated
him to come and live with him, saying that he would enjoy greater
safety from danger and more abundant food.  The other refused,
saying that he felt it so very hard to leave a place to which he
had become accustomed.  A few days afterwards a heavy wagon
passed through the gully and crushed him to death under its
wheels.

A willful man will have his way to his own hurt.


The Wolf and the Fox

AT ONE TIME a very large and strong Wolf was born among the
wolves, who exceeded all his fellow-wolves in strength, size, and
swiftness, so that they unanimously decided to call him "Lion."
The Wolf, with a lack of sense proportioned to his enormous size,
thought that they gave him this name in earnest, and, leaving his
own race, consorted exclusively with the lions.  An old sly Fox,
seeing this, said, "May I never make myself so ridiculous as you
do in your pride and self-conceit; for even though you have the
size of a lion among wolves, in a herd of lions you are
definitely a wolf."


The Walnut-Tree

A WALNUT TREE standing by the roadside bore an abundant crop of
fruit.  For the sake of the nuts, the passers-by broke its
branches with stones and sticks.  The Walnut-Tree piteously
exclaimed, "O wretched me! that those whom I cheer with my fruit
should repay me with these painful requitals!"


The Gnat and the Lion

A GNAT came and said to a Lion, "I do not in the least fear you,
nor are you stronger than I am.  For in what does your strength
consist? You can scratch with your claws and bite with your teeth
an a woman in her quarrels.  I repeat that I am altogether more
powerful than you; and if you doubt it, let us fight and see who
will conquer."  The Gnat, having sounded his horn, fastened
himself upon the Lion and stung him on the nostrils and the parts
of the face devoid of hair.  While trying to crush him, the Lion
tore himself with his claws, until he punished himself severely.
The Gnat thus prevailed over the Lion, and, buzzing about in a
song of triumph, flew away.  But shortly afterwards he became
entangled in the meshes of a cobweb and was eaten by a spider.
He greatly lamented his fate, saying, "Woe is me! that I, who can
wage war successfully with the hugest beasts, should perish
myself from this spider, the most inconsiderable of insects!"


The Monkey and the Dolphin

A SAILOR, bound on a long voyage, took with him a Monkey to amuse
him while on shipboard.  As he sailed off the coast of Greece, a
violent tempest arose in which the ship was wrecked and he, his
Monkey, and all the crew were obliged to swim for their lives.  A
Dolphin saw the Monkey contending with the waves, and supposing
him to be a man (whom he is always said to befriend), came and
placed himself under him, to convey him on his back in safety to
the shore.  When the Dolphin arrived with his burden in sight of
land not far from Athens, he asked the Monkey if he were an
Athenian.  The latter replied that he was, and that he was
descended from one of the most noble families in that city.  The
Dolphin then inquired if he knew the Piraeus (the famous harbor
of Athens).  Supposing that a man was meant, the Monkey answered
that he knew him very well and that he was an intimate friend.
The Dolphin, indignant at these falsehoods, dipped the Monkey
under the water and drowned him.


The Jackdaw and the Doves

A JACKDAW, seeing some Doves in a cote abundantly provided with
food, painted himself white and joined them in order to share
their plentiful maintenance.  The Doves, as long as he was
silent, supposed him to be one of themselves and admitted him to
their cote.  But when one day he forgot himself and began to
chatter, they discovered his true character and drove him forth,
pecking him with their beaks.  Failing to obtain food among the
Doves, he returned to the Jackdaws.  They too, not recognizing
him on account of his color.  expelled him from living with them.
So desiring two ends, he obtained neither.


The Horse and the Stag

AT ONE TIME the Horse had the plain entirely to himself.  Then a
Stag intruded into his domain and shared his pasture.  The Horse,
desiring to revenge himself on the stranger, asked a man if he
were willing to help him in punishing the Stag.  The man replied
that if the Horse would receive a bit in his mouth and agree to
carry him, he would contrive effective weapons against the Stag.
The Horse consented and allowed the man to mount him.  From that
hour he found that instead of obtaining revenge on the Stag, he
had enslaved himself to the service of man.


The Kid and the Wolf

A KID, returning without protection from the pasture, was pursued
by a Wolf.  Seeing he could not escape, he turned round, and
said:  "I know, friend Wolf, that I must be your prey, but before
I die I would ask of you one favor you will play me a tune to
which I may dance."  The Wolf complied, and while he was piping
and the Kid was dancing, some hounds hearing the sound ran up and
began chasing the Wolf.  Turning to the Kid, he said, "It is just
what I deserve; for I, who am only a butcher, should not have
turned piper to please you."


The Prophet

A WIZARD, sitting in the marketplace, was telling the fortunes of
the passers-by when a person ran up in great haste, and
announced to him that the doors of his house had been broken open
and that all his goods were being stolen.  He sighed heavily and
hastened away as fast as he could run.  A neighbor saw him
running and said, "Oh! you fellow there! you say you can foretell
the fortunes of others; how is it you did not foresee your own?'


The Fox and the Monkey

A FOX and a Monkey were traveling together on the same road.  As
they journeyed, they passed through a cemetery full of monuments.
"All these monuments which you see," said the Monkey, "are
erected in honor of my ancestors, who were in their day freedmen
and citizens of great renown."  The Fox replied, "You have chosen
a most appropriate subject for your falsehoods, as I am sure none
of your ancestors will be able to contradict you."

A false tale often betrays itself.


The Thief and the Housedog

A THIEF came in the night to break into a house.  He brought with
him several slices of meat in order to pacify the Housedog, so
that he would not alarm his master by barking.  As the Thief
threw him the pieces of meat, the Dog said, "If you think to stop
my mouth, you will be greatly mistaken.  This sudden kindness at
your hands will only make me more watchful, lest under these
unexpected favors to myself, you have some private ends to
accomplish for your own benefit, and for my master's injury."


The Man, the Horse, the Ox, and the Dog

A HORSE, Ox, and Dog, driven to great straits by the cold, sought
shelter and protection from Man.  He received them kindly,
lighted a fire, and warmed them.  He let the Horse make free with
his oats, gave the Ox an abundance of hay, and fed the Dog with
meat from his own table.  Grateful for these favors, the animals
determined to repay him to the best of their ability.  For this
purpose, they divided the term of his life between them, and each
endowed one portion of it with the qualities which chiefly
characterized himself.  The Horse chose his earliest years and
gave them his own attributes:  hence every man is in his youth
impetuous, headstrong, and obstinate in maintaining his own
opinion.  The Ox took under his patronage the next term of life,
and therefore man in his middle age is fond of work, devoted to
labor, and resolute to amass wealth and to husband his resources.
The end of life was reserved for the Dog, wherefore the old man
is often snappish, irritable, hard to please, and selfish,
tolerant only of his own household, but averse to strangers and
to all who do not administer to his comfort or to his
necessities.


The Apes and the Two Travelers

TWO MEN, one who always spoke the truth and the other who told
nothing but lies, were traveling together and by chance came to
the land of Apes.  One of the Apes, who had raised himself to be
king, commanded them to be seized and brought before him, that he
might know what was said of him among men.  He ordered at the
same time that all the Apes be arranged in a long row on his
right hand and on his left, and that a throne be placed for him,
as was the custom among men.  After these preparations he
signified that the two men should be brought before him, and
greeted them with this salutation:  "What sort of a king do I seem
to you to be, O strangers?'  The Lying Traveler replied, "You seem
to me a most mighty king."  "And what is your estimate of those
you see around me?'  "These," he made answer, "are worthy
companions of yourself, fit at least to be ambassadors and
leaders of armies."  The Ape and all his court, gratified with the
lie, commanded that a handsome present be given to the flatterer.
On this the truthful Traveler thought to himself, "If so great a
reward be given for a lie, with what gift may not I be rewarded,
if, according to my custom, I tell the truth?'  The Ape quickly
turned to him.  "And pray how do I and these my friends around me
seem to you?'  "Thou art," he said, "a most excellent Ape, and all
these thy companions after thy example are excellent Apes too."
The King of the Apes, enraged at hearing these truths, gave him
over to the teeth and claws of his companions.


The Wolf and the Shepherd

A WOLF followed a flock of sheep for a long time and did not
attempt to injure one of them.  The Shepherd at first stood on
his guard against him, as against an enemy, and kept a strict
watch over his movements.  But when the Wolf, day after day, kept
in the company of the sheep and did not make the slightest effort
to seize them, the Shepherd began to look upon him as a guardian
of his flock rather than as a plotter of evil against it; and
when occasion called him one day into the city, he left the sheep
entirely in his charge.  The Wolf, now that he had the
opportunity, fell upon the sheep, and destroyed the greater part
of the flock.  When the Shepherd returned to find his flock
destroyed, he exclaimed:  "I have been rightly served; why did I
trust my sheep to a Wolf?'


The Hares and the Lions

THE HARES harangued the assembly, and argued that all should be
equal.  The Lions made this reply:  "Your words, O Hares! are
good; but they lack both claws and teeth such as we have."


The Lark and Her Young Ones

A LARK had made her nest in the early spring on the young green
wheat.  The brood had almost grown to their full strength and
attained the use of their wings and the full plumage of their
feathers, when the owner of the field, looking over his ripe
crop, said, "The time has come when I must ask all my neighbors
to help me with my harvest."  One of the young Larks heard his
speech and related it to his mother, inquiring of her to what
place they should move for safety.  "There is no occasion to move
yet, my son," she replied; "the man who only sends to his friends
to help him with his harvest is not really in earnest."  The owner
of the field came again a few days later and saw the wheat
shedding the grain from excess of ripeness.  He said, "I will
come myself tomorrow with my laborers, and with as many reapers
as I can hire, and will get in the harvest."  The Lark on hearing
these words said to her brood, "It is time now to be off, my
little ones, for the man is in earnest this time; he no longer
trusts his friends, but will reap the field himself."

Self-help is the best help.


The Fox and the Lion

WHEN A FOX who had never yet seen a Lion, fell in with him by
chance for the first time in the forest, he was so frightened
that he nearly died with fear.  On meeting him for the second
time, he was still much alarmed, but not to the same extent as at
first.  On seeing him the third time, he so increased in boldness
that he went up to him and commenced a familiar conversation with
him.

Acquaintance softens prejudices.


The Weasel and the Mice

A WEASEL, inactive from age and infirmities, was not able to
catch mice as he once did.  He therefore rolled himself in flour
and lay down in a dark corner.  A Mouse, supposing him to be
food, leaped upon him, and was instantly caught and squeezed to
death.  Another perished in a similar manner, and then a third,
and still others after them.  A very old Mouse, who had escaped
many a trap and snare, observed from a safe distance the trick of
his crafty foe and said, "Ah! you that lie there, may you prosper
just in the same proportion as you are what you pretend to be!"


The Boy Bathing

A BOY bathing in a river was in danger of being drowned.  He
called out to a passing traveler for help, but instead of holding
out a helping hand, the man stood by unconcernedly, and scolded
the boy for his imprudence.  "Oh, sir!"  cried the youth, "pray
help me now and scold me afterwards."

Counsel without help is useless.


The Ass and the Wolf

AN ASS feeding in a meadow saw a Wolf approaching to seize him,
and immediately pretended to be lame.  The Wolf, coming up,
inquired the cause of his lameness.  The Ass replied that passing
through a hedge he had trod with his foot upon a sharp thorn.  He
requested that the Wolf pull it out, lest when he ate him it
should injure his throat.  The Wolf consented and lifted up the
foot, and was giving his whole mind to the discovery of the
thorn, when the Ass, with his heels, kicked his teeth into his
mouth and galloped away.  The Wolf, being thus fearfully mauled,
said, "I am rightly served, for why did I attempt the art of
healing, when my father only taught me the trade of a butcher?'


The Seller of Images

A CERTAIN MAN made a wooden image of Mercury and offered it for
sale.  When no one appeared willing to buy it, in order to
attract purchasers, he cried out that he had the statue to sell
of a benefactor who bestowed wealth and helped to heap up riches.
One of the bystanders said to him, "My good fellow, why do you
sell him, being such a one as you describe, when you may yourself
enjoy the good things he has to give?'  "Why," he replied, "I am
in need of immediate help, and he is wont to give his good gifts
very slowly."


The Fox and the Grapes

A FAMISHED FOX saw some clusters of ripe black grapes hanging
from a trellised vine.  She resorted to all her tricks to get at
them, but wearied herself in vain, for she could not reach them.
At last she turned away, hiding her disappointment and saying:
"The Grapes are sour, and not ripe as I thought."


The Man and His Wife

A MAN had a Wife who made herself hated by all the members of his
household.  Wishing to find out if she had the same effect on the
persons in her father's house, he made some excuse to send her
home on a visit to her father.  After a short time she returned,
and when he inquired how she had got on and how the servants had
treated her, she replied, "The herdsmen and shepherds cast on me
looks of aversion."  He said, "O Wife, if you were disliked by
those who go out early in the morning with their flocks and
return late in the evening, what must have been felt towards you
by those with whom you passed the whole day!"

Straws show how the wind blows.


The Peacock and Juno

THE PEACOCK made complaint to Juno that, while the nightingale
pleased every ear with his song, he himself no sooner opened his
mouth than he became a laughingstock to all who heard him.  The
Goddess, to console him, said, "But you far excel in beauty and
in size.  The splendor of the emerald shines in your neck and you
unfold a tail gorgeous with painted plumage."  "But for what
purpose have I," said the bird, "this dumb beauty so long as I am
surpassed in song?'   "The lot of each," replied Juno, "has been
assigned by the will of the Fates--to thee, beauty; to the eagle,
strength; to the nightingale, song; to the raven, favorable,
and to the crow, unfavorable auguries.  These are all contented
with the endowments allotted to them."


The Hawk and the Nightingale

A NIGHTINGALE, sitting aloft upon an oak and singing according to
his wont, was seen by a Hawk who, being in need of food, swooped
down and seized him.  The Nightingale, about to lose his life,
earnestly begged the Hawk to let him go, saying that he was not
big enough to satisfy the hunger of a Hawk who, if he wanted
food, ought to pursue the larger birds.  The Hawk, interrupting
him, said:  "I should indeed have lost my senses if I should let
go food ready in my hand, for the sake of pursuing birds which
are not yet even within sight."


The Dog, the Cock, and the Fox

A DOG and a Cock being great friends, agreed to travel together.
At nightfall they took shelter in a thick wood.  The Cock flying
up, perched himself on the branches of a tree, while the Dog
found a bed beneath in the hollow trunk.  When the morning
dawned, the Cock, as usual, crowed very loudly several times.  A
Fox heard the sound, and wishing to make a breakfast on him, came
and stood under the branches, saying how earnestly he desired to
make the acquaintance of the owner of so magnificent a voice.
The Cock, suspecting his civilities, said:  "Sir, I wish you would
do me the favor of going around to the hollow trunk below me, and
waking my porter, so that he may open the door and let you in."
When the Fox approached the tree, the Dog sprang out and caught
him, and tore him to pieces.


The Wolf and the Goat

A WOLF saw a Goat feeding at the summit of a steep precipice,
where he had no chance of reaching her.  He called to her and
earnestly begged her to come lower down, lest she fall by some
mishap; and he added that the meadows lay where he was standing,
and that the herbage was most tender.  She replied, "No, my
friend, it is not for the pasture that you invite me, but for
yourself, who are in want of food."


The Lion and the Bull

A LION, greatly desiring to capture a Bull, and yet afraid to
attack him on account of his great size, resorted to a trick to
ensure his destruction.  He approached the Bull and said, "I have
slain a fine sheep, my friend; and if you will come home and
partake of him with me, I shall be delighted to have your
company."  The Lion said this in the hope that, as the Bull was in
the act of reclining to eat, he might attack him to advantage,
and make his meal on him.  The Bull, on approaching the Lion's
den, saw the huge spits and giant caldrons, and no sign whatever
of the sheep, and, without saying a word, quietly took his
departure.  The Lion inquired why he went off so abruptly without
a word of salutation to his host, who had not given him any cause
for offense.  "I have reasons enough," said the Bull.  "I see no
indication whatever of your having slaughtered a sheep, while I
do see very plainly every preparation for your dining on a bull."



The Goat and the Ass

A MAN once kept a Goat and an Ass.  The Goat, envying the Ass on
account of his greater abundance of food, said, "How shamefully
you are treated:  at one time grinding in the mill, and at another
carrying heavy burdens"; and he further advised him to pretend to
be epileptic and fall into a ditch and so obtain rest.  The Ass
listened to his words, and falling into a ditch, was very much
bruised.  His master, sending for a leech, asked his advice.  He
bade him pour upon the wounds the lungs of a Goat.  They at once
killed the Goat, and so healed the Ass.


The Town Mouse and the Country Mouse

A COUNTRY MOUSE invited a Town Mouse, an intimate friend, to pay
him a visit and partake of his country fare.  As they were on the
bare plowlands, eating there wheat-stocks and roots pulled up
from the hedgerow, the Town Mouse said to his friend, "You live
here the life of the ants, while in my house is the horn of
plenty.  I am surrounded by every luxury, and if you will come
with me, as I wish you would, you shall have an ample share of my
dainties."  The Country Mouse was easily persuaded, and returned
to town with his friend.  On his arrival, the Town Mouse placed
before him bread, barley, beans, dried figs, honey, raisins, and,
last of all, brought a dainty piece of cheese from a basket.  The
Country Mouse, being much delighted at the sight of such good
cheer, expressed his satisfaction in warm terms and lamented his
own hard fate.  Just as they were beginning to eat, someone
opened the door, and they both ran off squeaking, as fast as they
could, to a hole so narrow that two could only find room in it by
squeezing.  They had scarcely begun their repast again when
someone else entered to take something out of a cupboard,
whereupon the two Mice, more frightened than before, ran away and
hid themselves.  At last the Country Mouse, almost famished, said
to his friend:  "Although you have prepared for me so dainty a
feast, I must leave you to enjoy it by yourself.  It is
surrounded by too many dangers to please me.  I prefer my bare
plowlands and roots from the hedgerow, where I can live in
safety, and without fear."


The Wolf, the Fox, and the Ape

A WOLF accused a Fox of theft, but the Fox entirely denied the
charge.  An Ape undertook to adjudge the matter between them.
When each had fully stated his case the Ape announced this
sentence:  "I do not think you, Wolf, ever lost what you claim;
and I do believe you, Fox, to have stolen what you so stoutly
deny."

The dishonest, if they act honestly, get no credit.


The Fly and the Draught-Mule

A FLY sat on the axle-tree of a chariot, and addressing the
Draught-Mule said, "How slow you are! Why do you not go faster?
See if I do not prick your neck with my sting."  The Draught-Mule
replied, "I do not heed your threats; I only care for him who
sits above you, and who quickens my pace with his whip, or holds
me back with the reins.  Away, therefore, with your insolence,
for I know well when to go fast, and when to go slow."


The Fishermen

SOME FISHERMEN were out trawling their nets.  Perceiving them to
be very heavy, they danced about for joy and supposed that they
had taken a large catch.  When they had dragged the nets to the
shore they found but few fish:  the nets were full of sand and
stones, and the men were beyond measure cast downso much at the
disappointment which had befallen them, but because they had
formed such very different expectations.  One of their company,
an old man, said, "Let us cease lamenting, my mates, for, as it
seems to me, sorrow is always the twin sister of joy; and it was
only to be looked for that we, who just now were over-rejoiced,
should next have something to make us sad."


The Lion and the Three Bulls

THREE BULLS for a long time pastured together.  A Lion lay in
ambush in the hope of making them his prey, but was afraid to
attack them while they kept together.  Having at last by guileful
speeches succeeded in separating them, he attacked them without
fear as they fed alone, and feasted on them one by one at his own
leisure.

Union is strength.


The Fowler and the Viper

A FOWLER, taking his bird-lime and his twigs, went out to catch
birds.  Seeing a thrush sitting upon a tree, he wished to take
it, and fitting his twigs to a proper length, watched intently,
having his whole thoughts directed towards the sky.  While thus
looking upwards, he unknowingly trod upon a Viper asleep just
before his feet.  The Viper, turning about, stung him, and
falling into a swoon, the man said to himself, "Woe is me! that
while I purposed to hunt another, I am myself fallen unawares
into the snares of death."


The Horse and the Ass

A HORSE, proud of his fine trappings, met an Ass on the highway.
The Ass, being heavily laden, moved slowly out of the way.
"Hardly," said the Horse, "can I resist kicking you with my
heels."  The Ass held his peace, and made only a silent appeal to
the justice of the gods.  Not long afterwards the Horse, having
become broken-winded, was sent by his owner to the farm.  The
Ass, seeing him drawing a dungcart, thus derided him:  "Where, O
boaster, are now all thy gay trappings, thou who are thyself
reduced to the condition you so lately treated with contempt?'


The Fox and the Mask

A FOX entered the house of an actor and, rummaging through all
his properties, came upon a Mask, an admirable imitation of a
human head.  He placed his paws on it and said, "What a beautiful
head! Yet it is of no value, as it entirely lacks brains."


The Geese and the Cranes

THE GEESE and the Cranes were feeding in the same meadow, when a
birdcatcher came to ensnare them in his nets.  The Cranes, being
light of wing, fled away at his approach; while the Geese, being
slower of flight and heavier in their bodies, were captured.


The Blind Man and the Whelp

A BLIND MAN was accustomed to distinguishing different animals by
touching them with his hands.  The whelp of a Wolf was brought
him, with a request that he would feel it, and say what it was.
He felt it, and being in doubt, said:  "I do not quite know
whether it is the cub of a Fox, or the whelp of a Wolf, but this
I know full well.  It would not be safe to admit him to the
sheepfold."

Evil tendencies are shown in early life.


The Dogs and the Fox

SOME DOGS, finding the skin of a lion, began to tear it in pieces
with their teeth.  A Fox, seeing them, said, "If this lion were
alive, you would soon find out that his claws were stronger than
your teeth."

It is easy to kick a man that is down.


The Cobbler Turned Doctor

A COBBLER unable to make a living by his trade and made desperate
by poverty, began to practice medicine in a town in which he was
not known.  He sold a drug, pretending that it was an antidote to
all poisons, and obtained a great name for himself by long-winded
puffs and advertisements.  When the Cobbler happened to fall sick
himself of a serious illness, the Governor of the town determined
to test his skill.  For this purpose he called for a cup, and
while filling it with water, pretended to mix poison with the
Cobbler's antidote, commanding him to drink it on the promise of
a reward.  The Cobbler, under the fear of death, confessed that
he had no knowledge of medicine, and was only made famous by the
stupid clamors of the crowd.  The Governor then called a public
assembly and addressed the citizens:  "Of what folly have you been
guilty? You have not hesitated to entrust your heads to a man,
whom no one could employ to make even the shoes for their feet."


The Wolf and the Horse

A WOLF coming out of a field of oats met a Horse and thus
addressed him:  "I would advise you to go into that field.  It is
full of fine oats, which I have left untouched for you, as you
are a friend whom I would love to hear enjoying good eating."  The
Horse replied, "If oats had been the food of wolves, you would
never have indulged your ears at the cost of your belly."

Men of evil reputation, when they perform a good deed, fail to
get credit for it.


The Brother and the Sister

A FATHER had one son and one daughter, the former remarkable for
his good looks, the latter for her extraordinary ugliness.  While
they were playing one day as children, they happened by chance to
look together into a mirror that was placed on their mother's
chair.  The boy congratulated himself on his good looks; the girl
grew angry, and could not bear the self-praises of her Brother,
interpreting all he said (and how could she do otherwise?) into
reflection on herself.  She ran off to her father.  to be avenged
on her Brother, and spitefully accused him of having, as a boy,
made use of that which belonged only to girls.  The father
embraced them both, and bestowing his kisses and affection
impartially on each, said, "I wish you both would look into the
mirror every day:  you, my son, that you may not spoil your beauty
by evil conduct; and you, my daughter, that you may make up for
your lack of beauty by your virtues."


The Wasps, the Partridges, and the Farmer

THE WASPS and the Partridges, overcome with thirst, came to a
Farmer and besought him to give them some water to drink.  They
promised amply to repay him the favor which they asked.  The
Partridges declared that they would dig around his vines and make
them produce finer grapes.  The Wasps said that they would keep
guard and drive off thieves with their stings.  But the Farmer
interrupted them, saying:  "I have already two oxen, who, without
making any promises, do all these things.  It is surely better
for me to give the water to them than to you."


The Crow and Mercury

A CROW caught in a snare prayed to Apollo to release him, making
a vow to offer some frankincense at his shrine.  But when rescued
from his danger, he forgot his promise.  Shortly afterwards,
again caught in a snare, he passed by Apollo and made the same
promise to offer frankincense to Mercury.  Mercury soon appeared
and said to him, "O thou most base fellow? how can I believe
thee, who hast disowned and wronged thy former patron?'


The North Wind and the Sun

THE NORTH WIND and the Sun disputed as to which was the most
powerful, and agreed that he should be declared the victor who
could first strip a wayfaring man of his clothes.  The North Wind
first tried his power and blew with all his might, but the keener
his blasts, the closer the Traveler wrapped his cloak around him,
until at last, resigning all hope of victory, the Wind called
upon the Sun to see what he could do.  The Sun suddenly shone out
with all his warmth.  The Traveler no sooner felt his genial rays
than he took off one garment after another, and at last, fairly
overcome with heat, undressed and bathed in a stream that lay in
his path.

Persuasion is better than Force.


The Two Men Who Were Enemies

TWO MEN, deadly enemies to each other, were sailing in the same
vessel.  Determined to keep as far apart as possible, the one
seated himself in the stem, and the other in the prow of the
ship.  A violent storm arose, and with the vessel in great danger
of sinking, the one in the stern inquired of the pilot which of
the two ends of the ship would go down first.  On his replying
that he supposed it would be the prow, the Man said, "Death would
not be grievous to me, if I could only see my Enemy die before
me."


The Gamecocks and the Partridge

A MAN had two Gamecocks in his poultry-yard.  One day by chance
he found a tame Partridge for sale.  He purchased it and brought
it home to be reared with his Gamecocks.  When the Partridge was
put into the poultry-yard, they struck at it and followed it
about, so that the Partridge became grievously troubled and
supposed that he was thus evilly treated because he was a
stranger.  Not long afterwards he saw the Cocks fighting together
and not separating before one had well beaten the other.  He then
said to himself, "I shall no longer distress myself at being
struck at by these Gamecocks, when I see that they cannot even
refrain from quarreling with each other."


The Quack Frog

A FROG once upon a time came forth from his home in the marsh and
proclaimed to all the beasts that he was a learned physician,
skilled in the use of drugs and able to heal all diseases.  A Fox
asked him, "How can you pretend to prescribe for others, when you
are unable to heal your own lame gait and wrinkled skin?'


The Lion, the Wolf, and the Fox

A LION, growing old, lay sick in his cave.  All the beasts came
to visit their king, except the Fox.  The Wolf therefore,
thinking that he had a capital opportunity, accused the Fox to
the Lion of not paying any respect to him who had the rule over
them all and of not coming to visit him.  At that very moment the
Fox came in and heard these last words of the Wolf.  The Lion
roaring out in a rage against him, the Fox sought an opportunity
to defend himself and said, "And who of all those who have come
to you have benefited you so much as I, who have traveled from
place to place in every direction, and have sought and learnt
from the physicians the means of healing you?'  The Lion commanded
him immediately to tell him the cure, when he replied, "You must
flay a wolf alive and wrap his skin yet warm around you."  The
Wolf was at once taken and flayed; whereon the Fox, turning to
him, said with a smile, "You should have moved your master not to
ill, but to good, will."


The Dog's House

IN THE WINTERTIME, a Dog curled up in as small a space as
possible on account of the cold, determined to make himself a
house.  However when the summer returned again, he lay asleep
stretched at his full length and appeared to himself to be of a
great size.  Now he considered that it would be neither an easy
nor a necessary work to make himself such a house as would
accommodate him.


The Wolf and the Lion

ROAMING BY the mountainside at sundown, a Wolf saw his own shadow
become greatly extended and magnified, and he said to himself,
"Why should I, being of such an immense size and extending nearly
an acre in length, be afraid of the Lion? Ought I not to be
acknowledged as King of all the collected beasts?'  While he was
indulging in these proud thoughts, a Lion fell upon him and
killed him.  He exclaimed with a too late repentance, "Wretched
me! this overestimation of myself is the cause of my
destruction."


The Birds, the Beasts, and the Bat

THE BIRDS waged war with the Beasts, and each were by turns the
conquerors.  A Bat, fearing the uncertain issues of the fight,
always fought on the side which he felt was the strongest.  When
peace was proclaimed, his deceitful conduct was apparent to both
combatants.  Therefore being condemned by each for his treachery,
he was driven forth from the light of day, and henceforth
concealed himself in dark hiding-places, flying always alone and
at night.


The Spendthrift and the Swallow

A YOUNG MAN, a great spendthrift, had run through all his
patrimony and had but one good cloak left.  One day he happened
to see a Swallow, which had appeared before its season, skimming
along a pool and twittering gaily.  He supposed that summer had
come, and went and sold his cloak.  Not many days later, winter
set in again with renewed frost and cold.  When he found the
unfortunate Swallow lifeless on the ground, he said, "Unhappy
bird! what have you done? By thus appearing before the springtime
you have not only killed yourself, but you have wrought my
destruction also."


The Fox and the Lion

A FOX saw a Lion confined in a cage, and standing near him,
bitterly reviled him.  The Lion said to the Fox, "It is not thou
who revilest me; but this mischance which has befallen me."


The Owl and the Birds

AN OWL, in her wisdom, counseled the Birds that when the acorn
first began to sprout, to pull it all up out of the ground and
not allow it to grow.  She said acorns would produce mistletoe,
from which an irremediable poison, the bird-
lime, would be extracted and by which they would be captured.
The Owl next advised them to pluck up the seed of the flax, which
men had sown, as it was a plant which boded no good to them.
And, lastly, the Owl, seeing an archer approach, predicted that
this man, being on foot, would contrive darts armed with feathers
which would fly faster than the wings of the Birds themselves.
The Birds gave no credence to these warning words, but considered
the Owl to be beside herself and said that she was mad.  But
afterwards, finding her words were true, they wondered at her
knowledge and deemed her to be the wisest of birds.  Hence it is
that when she appears they look to her as knowing all things,
while she no longer gives them advice, but in solitude laments
their past folly.


The Trumpeter Taken Prisoner

A TRUMPETER, bravely leading on the soldiers, was captured by the
enemy.  He cried out to his captors, "Pray spare me, and do not
take my life without cause or without inquiry.  I have not slain
a single man of your troop.  I have no arms, and carry nothing
but this one brass trumpet."  "That is the very reason for which
you should be put to death," they said; "for, while you do not
fight yourself, your trumpet stirs all the others to battle."


The Ass in the Lion's Skin

AN ASS, having put on the Lion's skin, roamed about in the forest
and amused himself by frightening all the foolish animals he met
in his wanderings.  At last coming upon a Fox, he tried to
frighten him also, but the Fox no sooner heard the sound of his
voice than he exclaimed, "I might possibly have been frightened
myself, if I had not heard your bray."


The Sparrow and the Hare

A HARE pounced upon by an eagle sobbed very much and uttered
cries like a child.  A Sparrow upbraided her and said, "Where now
is thy remarkable swiftness of foot? Why were your feet so slow?"
While the Sparrow was thus speaking, a hawk suddenly seized him
and killed him.  The Hare was comforted in her death, and
expiring said, "Ah! you who so lately, when you supposed yourself
safe, exulted over my calamity, have now reason to deplore a
similar misfortune."


The Flea and the Ox

A FLEA thus questioned an Ox:  "What ails you, that being so huge
and strong, you submit to the wrongs you receive from men and
slave for them day by day, while I, being so small a creature,
mercilessly feed on their flesh and drink their blood without
stint?'  The Ox replied:  "I do not wish to be ungrateful, for I am
loved and well cared for by men, and they often pat my head and
shoulders."  "Woe's me!"  said the flea; "this very patting which
you like, whenever it happens to me, brings with it my inevitable
destruction."


The Goods and the Ills

ALL the Goods were once driven out by the Ills from that common
share which they each had in the affairs of mankind; for the Ills
by reason of their numbers had prevailed to possess the earth.
The Goods wafted themselves to heaven and asked for a righteous
vengeance on their persecutors.  They entreated Jupiter that they
might no longer be associated with the Ills, as they had nothing
in common and could not live together, but were engaged in
unceasing warfare; and that an indissoluble law might be laid
down for their future protection.  Jupiter granted their request
and decreed that henceforth the Ills should visit the earth in
company with each other, but that the Goods should one by one
enter the habitations of men.  Hence it arises that Ills abound,
for they come not one by one, but in troops, and by no means
singly:  while the Goods proceed from Jupiter, and are given, not
alike to all, but singly, and separately; and one by one to those
who are able to discern them.


The Dove and the Crow

A DOVE shut up in a cage was boasting of the large number of
young ones which she had hatched.  A Crow hearing her, said:  "My
good friend, cease from this unseasonable boasting.  The larger
the number of your family, the greater your cause of sorrow, in
seeing them shut up in this prison-house."


Mercury and the Workmen

A WORKMAN, felling wood by the side of a river, let his axe drop
- by accident into a deep pool.  Being thus deprived of the means
of his livelihood, he sat down on the bank and lamented his hard
fate.  Mercury appeared and demanded the cause of his tears.
After he told him his misfortune, Mercury plunged into the
stream, and, bringing up a golden axe, inquired if that were the
one he had lost.  On his saying that it was not his, Mercury
disappeared beneath the water a second time, returned with a
silver axe in his hand, and again asked the Workman if it were
his.  When the Workman said it was not, he dived into the pool
for the third time and brought up the axe that had been lost.
The Workman claimed it and expressed his joy at its recovery.
Mercury, pleased with his honesty, gave him the golden and silver
axes in addition to his own.    The Workman, on his return to his
house, related to his companions all that had happened.  One of
them at once resolved to try and secure the same good fortune for
himself.  He ran to the river and threw his axe on purpose into
the pool at the same place, and sat down on the bank to weep.
Mercury appeared to him just as he hoped he would; and having
learned the cause of his grief, plunged into the stream and
brought up a golden axe, inquiring if he had lost it.  The
Workman seized it greedily, and declared that truly it was the
very same axe that he had lost.  Mercury, displeased at his
knavery, not only took away the golden axe, but refused to
recover for him the axe he had thrown into the pool.


The Eagle and the Jackdaw

AN EAGLE, flying down from his perch on a lofty rock, seized upon
a lamb and carried him aloft in his talons.  A Jackdaw, who
witnessed the capture of the lamb, was stirred with envy and
determined to emulate the strength and flight of the Eagle.  He
flew around with a great whir of his wings and settled upon a
large ram, with the intention of carrying him off, but his claws
became entangled in the ram's fleece and he was not able to
release himself, although he fluttered with his feathers as much
as he could.  The shepherd, seeing what had happened, ran up and
caught him.  He at once clipped the Jackdaw's wings, and taking
him home at night, gave him to his children.  On their saying,
"Father, what kind of bird is it?'  he replied, "To my certain
knowledge he is a Daw; but he would like you to think an Eagle."



The Fox and the Crane

A FOX invited a Crane to supper and provided nothing for his
entertainment but some soup made of pulse, which was poured out
into a broad flat stone dish.  The soup fell out of the long bill
of the Crane at every mouthful, and his vexation at not being
able to eat afforded the Fox much amusement.  The Crane, in his
turn, asked the Fox to sup with him, and set before her a flagon
with a long narrow mouth, so that he could easily insert his neck
and enjoy its contents at his leisure.  The Fox, unable even to
taste it, met with a fitting requital, after the fashion of her
own hospitality.


Jupiter, Neptune, Minerva, and Momus

ACCORDING to an ancient legend, the first man was made by
Jupiter, the first bull by Neptune, and the first house by
Minerva.  On the completion of their labors, a dispute arose as
to which had made the most perfect work.  They agreed to appoint
Momus as judge, and to abide by his decision.  Momus, however,
being very envious of the handicraft of each, found fault with
all.  He first blamed the work of Neptune because he had not made
the horns of the bull below his eyes, so he might better see
where to strike.  He then condemned the work of Jupiter, because
he had not placed the heart of man on the outside, that everyone
might read the thoughts of the evil disposed and take precautions
against the intended mischief.  And, lastly, he inveighed against
Minerva because she had not contrived iron wheels in the
foundation of her house, so its inhabitants might more easily
remove if a neighbor proved unpleasant.  Jupiter, indignant at
such inveterate faultfinding, drove him from his office of judge,
and expelled him from the mansions of Olympus.


The Eagle and the Fox

AN EAGLE and a Fox formed an intimate friendship and decided to
live near each other.  The Eagle built her nest in the branches
of a tall tree, while the Fox crept into the underwood and there
produced her young.  Not long after they had agreed upon this
plan, the Eagle, being in want of provision for her young ones,
swooped down while the Fox was out, seized upon one of the little
cubs, and feasted herself and her brood.  The Fox on her return,
discovered what had happened, but was less grieved for the death
of her young than for her inability to avenge them.  A just
retribution, however, quickly fell upon the Eagle.  While
hovering near an altar, on which some villagers were sacrificing
a goat, she suddenly seized a piece of the flesh, and carried it,
along with a burning cinder, to her nest.  A strong breeze soon
fanned the spark into a flame, and the eaglets, as yet unfledged
and helpless, were roasted in their nest and dropped down dead at
the bottom of the tree.  There, in the sight of the Eagle, the
Fox gobbled them up.


The Man and the Satyr

A MAN and a Satyr once drank together in token of a bond of
alliance being formed between them.  One very cold wintry day, as
they talked, the Man put his fingers to his mouth and blew on
them.  When the Satyr asked the reason for this, he told him that
he did it to warm his hands because they were so cold.  Later on
in the day they sat down to eat, and the food prepared was quite
scalding.  The Man raised one of the dishes a little towards his
mouth and blew in it.  When the Satyr again inquired the reason,
he said that he did it to cool the meat, which was too hot.  "I
can no longer consider you as a friend," said the Satyr, "a
fellow who with the same breath blows hot and cold."


The Ass and His Purchaser

A MAN wished to purchase an Ass, and agreed with its owner that
he should try out the animal before he bought him.  He took the
Ass home and put him in the straw-yard with his other Asses, upon
which the new animal left all the others and at once joined the
one that was most idle and the greatest eater of them all.
Seeing this, the man put a halter on him and led him back to his
owner.  On being asked how, in so short a time, he could have
made a trial of him, he answered, "I do not need a trial; I know
that he will be just the same as the one he chose for his
companion."

A man is known by the company he keeps.


The Two Bags

EVERY MAN, according to an ancient legend, is born into the world
with two bags suspended from his neck   all bag in front full of
his neighbors' faults, and a large bag behind filled with his own
faults.  Hence it is that men are quick to see the faults of
others, and yet are often blind to their own failings.


The Stag at the Pool

A STAG overpowered by heat came to a spring to drink.  Seeing his
own shadow reflected in the water, he greatly admired the size
and variety of his horns, but felt angry with himself for having
such slender and weak feet.  While he was thus contemplating
himself, a Lion appeared at the pool and crouched to spring upon
him.  The Stag immediately took to flight, and exerting his
utmost speed, as long as the plain was smooth and open kept
himself easily at a safe distance from the Lion.  But entering a
wood he became entangled by his horns, and the Lion quickly came
up to him and caught him.  When too late, he thus reproached
himself:  "Woe is me! How I have deceived myself! These feet which
would have saved me I despised, and I gloried in these antlers
which have proved my destruction."

What is most truly valuable is often underrated.


The Jackdaw and the Fox

A HALF-FAMISHED JACKDAW seated himself on a fig-tree, which had
produced some fruit entirely out of season, and waited in the
hope that the figs would ripen.  A Fox seeing him sitting so long
and learning the reason of his doing so, said to him, "You are
indeed, sir, sadly deceiving yourself; you are indulging a hope
strong enough to cheat you, but which will never reward you with
enjoyment."


The Lark Burying Her Father

THE LARK (according to an ancient legend) was created before the
earth itself, and when her father died, as there was no earth,
she could find no place of burial for him.  She let him lie
uninterred for five days, and on the sixth day, not knowing what
else to do, she buried him in her own head.  Hence she obtained
her crest, which is popularly said to be her father's
grave-hillock.

Youth's first duty is reverence to parents.


The Gnat and the Bull

A GNAT settled on the horn of a Bull, and sat there a long time.
Just as he was about to fly off, he made a buzzing noise, and
inquired of the Bull if he would like him to go.  The Bull
replied, "I did not know you had come, and I shall not miss you
when you go away."

Some men are of more consequence in their own eyes than in the
eyes of their neighbors.


The Bitch and Her Whelps

A BITCH, ready to whelp, earnestly begged a shepherd for a place
where she might litter.  When her request was granted, she
besought permission to rear her puppies in the same spot.  The
shepherd again consented.  But at last the Bitch, protected by
the bodyguard of her Whelps, who had now grown up and were able
to defend themselves, asserted her exclusive right to the place
and would not permit the shepherd to approach.


The Dogs and the Hides

SOME DOGS famished with hunger saw a number of cowhides steeping
in a river.  Not being able to reach them, they agreed to drink
up the river, but it happened that they burst themselves with
drinking long before they reached the hides.

Attempt not impossibilities.


The Shepherd and the Sheep

A SHEPHERD driving his Sheep to a wood, saw an oak of unusual
size full of acorns, and spreading his cloak under the branches,
he climbed up into the tree and shook them down.  The Sheep
eating the acorns inadvertently frayed and tore the cloak.  When
the Shepherd came down and saw what was done, he said, "O you
most ungrateful creatures! You provide wool to make garments for
all other men, but you destroy the clothes of him who feeds you."



The Grasshopper and the Owl

AN OWL, accustomed to feed at night and to sleep during the day,
was greatly disturbed by the noise of a Grasshopper and earnestly
besought her to stop chirping.  The Grasshopper refused to
desist, and chirped louder and louder the more the Owl entreated.
When she saw that she could get no redress and that her words
were despised, the Owl attacked the chatterer by a stratagem.
"Since I cannot sleep," she said, "on account of your song which,
believe me, is sweet as the lyre of Apollo, I shall indulge
myself in drinking some nectar which Pallas lately gave me.  If
you do not dislike it, come to me and we will drink it together."
The Grasshopper, who was thirsty, and pleased with the praise of
her voice, eagerly flew up.  The Owl came forth from her hollow,
seized her, and put her to death.


The Monkey and the Camel

THE BEASTS of the forest gave a splendid entertainment at which
the Monkey stood up and danced.  Having vastly delighted the
assembly, he sat down amidst universal applause.  The Camel,
envious of the praises bestowed on the Monkey and desiring to
divert to himself the favor of the guests, proposed to stand up
in his turn and dance for their amusement.  He moved about in so
utterly ridiculous a manner that the Beasts, in a fit of
indignation, set upon him with clubs and drove him out of the
assembly.

It is absurd to ape our betters.


The Peasant and the Apple-Tree

A PEASANT had in his garden an Apple-Tree which bore no fruit but
only served as a harbor for the sparrows and grasshoppers.  He
resolved to cut it down, and taking his axe in his hand, made a
bold stroke at its roots.  The grasshoppers and sparrows
entreated him not to cut down the tree that sheltered them, but
to spare it, and they would sing to him and lighten his labors.
He paid no attention to their request, but gave the tree a second
and a third blow with his axe.  When he reached the hollow of the
tree, he found a hive full of honey.  Having tasted the
honeycomb, he threw down his axe, and looking on the tree as
sacred, took great care of it.

Self-interest alone moves some men.


The Two Soldiers and the Robber

TWO SOLDIERS traveling together were set upon by a Robber.  The
one fled away; the other stood his ground and defended himself
with his stout right hand.  The Robber being slain, the timid
companion ran up and drew his sword, and then, throwing back his
traveling cloak said, "I'll at him, and I'll take care he shall
learn whom he has attacked."  On this, he who had fought with the
Robber made answer, "I only wish that you had helped me just now,
even if it had been only with those words, for I should have been
the more encouraged, believing them to be true; but now put up
your sword in its sheath and hold your equally useless tongue,
till you can deceive others who do not know you.  I, indeed, who
have experienced with what speed you run away, know right well
that no dependence can be placed on your valor."


The Trees Under the Protection of the Gods

THE GODS, according to an ancient legend, made choice of certain
trees to be under their special protection.  Jupiter chose the
oak, Venus the myrtle, Apollo the laurel, Cybele the pine, and
Hercules the poplar.  Minerva, wondering why they had preferred
trees not yielding fruit, inquired the reason for their choice.
Jupiter replied, "It is lest we should seem to covet the honor
for the fruit."  But said Minerva, "Let anyone say what he will
the olive is more dear to me on account of its fruit."  Then said
Jupiter, "My daughter, you are rightly called wise; for unless
what we do is useful, the glory of it is vain."


The Mother and the Wolf

A FAMISHED WOLF was prowling about in the morning in search of
food.  As he passed the door of a cottage built in the forest, he
heard a Mother say to her child, "Be quiet, or I will throw you
out of the window, and the Wolf shall eat you."  The Wolf sat all
day waiting at the door.  In the evening he heard the same woman
fondling her child and saying:  "You are quiet now, and if the
Wolf should come, we will kill him."  The Wolf, hearing these
words, went home, gasping with cold and hunger.  When he reached
his den, Mistress Wolf inquired of him why he returned wearied
and supperless, so contrary to his wont.  He replied:  "Why,
forsooth!
use I gave credence to the words of a woman!"


The Ass and the Horse

AN ASS besought a Horse to spare him a small portion of his feed.
"Yes," said the Horse; "if any remains out of what I am now
eating I will give it you for the sake of my own superior
dignity, and if you will come when I reach my own stall in the
evening, I will give you a little sack full of barley."  The Ass
replied, "Thank you.  But I can't think that you, who refuse me a
little matter now.  will by and by confer on me a greater
benefit."


Truth and the Traveler

A WAYFARING MAN, traveling in the desert, met a woman standing
alone and terribly dejected.  He inquired of her, "Who art thou?"
"My name is Truth," she replied.  "And for what cause," he asked,
"have you left the city to dwell alone here in the wilderness?"
She made answer, "Because in former times, falsehood was with
few, but is now with all men."

The Manslayer

A MAN committed a murder, and was pursued by the relations of the
man whom he murdered.  On his reaching the river Nile he saw a
Lion on its bank and being fearfully afraid, climbed up a tree.
He found a serpent in the upper branches of the tree, and again
being greatly alarmed, he threw himself into the river, where a
crocodile caught him and ate him.  Thus the earth, the air, and
the water alike refused shelter to a murderer.

The Lion and the Fox

A FOX entered into partnership with a Lion on the pretense of
becoming his servant.  Each undertook his proper duty in
accordance with his own nature and powers.  The Fox discovered
and pointed out the prey; the Lion sprang on it and seized it.
The Fox soon became jealous of the Lion carrying off the Lion's
share, and said that he would no longer find out the prey, but
would capture it on his own account.  The next day he attempted
to snatch a lamb from the fold, but he himself fell prey to the
huntsmen and hounds.

The Lion and the Eagle

AN EAGLE stayed his flight and entreated a Lion to make an
alliance with him to their mutual advantage.  The Lion replied,
"I have no objection, but you must excuse me for requiring you to
find surety for your good faith, for how can I trust anyone as a
friend who is able to fly away from his bargain whenever he
pleases?'

Try before you trust.

The Hen and the Swallow

A HEN finding the eggs of a viper and carefully keeping them
warm, nourished them into life.  A Swallow, observing what she
had done, said, "You silly creature! why have you hatched these
vipers which, when they shall have grown, will inflict injury on
all, beginning with yourself?'

The Buffoon and the Countryman

A RICH NOBLEMAN once opened the theaters without charge to the
people, and gave a public notice that he would handsomely reward
any person who invented a new amusement for the occasion.
Various public performers contended for the prize.  Among them
came a Buffoon well known among the populace for his jokes, and
said that he had a kind of entertainment which had never been
brought out on any stage before.  This report being spread about
made a great stir, and the theater was crowded in every part.
The Buffoon appeared alone upon the platform, without any
apparatus or confederates, and the very sense of expectation
caused an intense silence.  He suddenly bent his head towards his
bosom and imitated the squeaking of a little pig so admirably
with his voice that the audience declared he had a porker under
his cloak, and demanded that it should be shaken out.  When that
was done and nothing was found, they cheered the actor, and
loaded him with the loudest applause.  A Countryman in the crowd,
observing all that has passed, said, "So help me, Hercules, he
shall not beat me at that trick!"  and at once proclaimed that he
would do the same thing on the next day, though in a much more
natural way.  On the morrow a still larger crowd assembled in the
theater, but now partiality for their favorite actor very
generally prevailed, and the audience came rather to ridicule the
Countryman than to see the spectacle.  Both of the performers
appeared on the stage.  The Buffoon grunted and squeaked away
first, and obtained, as on the preceding day, the applause and
cheers of the spectators.  Next the Countryman commenced, and
pretending that he concealed a little pig beneath his clothes
(which in truth he did, but not suspected by the audience )
contrived to take hold of and to pull his ear causing the pig to
squeak.  The Crowd, however, cried out with one consent that the
Buffoon had given a far more exact imitation, and clamored for
the Countryman to be kicked out of the theater.  On this the
rustic produced the little pig from his cloak and showed by the
most positive proof the greatness of their mistake.  "Look here,"
he said, "this shows what sort of judges you are."

The Crow and the Serpent

A CROW in great want of food saw a Serpent asleep in a sunny
nook, and flying down, greedily seized him.  The Serpent, turning
about, bit the Crow with a mortal wound.  In the agony of death,
the bird exclaimed:  "O unhappy me! who have found in that which I
deemed a happy windfall the source of my destruction."

The Hunter and the Horseman

A CERTAIN HUNTER, having snared a hare, placed it upon his
shoulders and set out homewards.  On his way he met a man on
horseback who begged the hare of him, under the pretense of
purchasing it.  However, when the Horseman got the hare, he rode
off as fast as he could.  The Hunter ran after him, as if he was
sure of overtaking him, but the Horseman increased more and more
the distance between them.  The Hunter, sorely against his will,
called out to him and said, "Get along with you! for I will now
make you a present of the hare."

The King's Son and the Painted Lion

A KING, whose only son was fond of martial exercises, had a dream
in which he was warned that his son would be killed by a lion.
Afraid the dream should prove true, he built for his son a
pleasant palace and adorned its walls for his amusement with all
kinds of life-sized animals, among which was the picture of a
lion.  When the young Prince saw this, his grief at being thus
confined burst out afresh, and, standing near the lion, he said:
"O you most detestable of animals! through a lying dream of my
father's, which he saw in his sleep, I am shut up on your account
in this palace as if I had been a girl:  what shall I now do to
you?'  With these words he stretched out his hands toward a
thorn-tree, meaning to cut a stick from its branches so that he
might beat the lion.  But one of the tree's prickles pierced his
finger and caused great pain and inflammation, so that the young
Prince fell down in a fainting fit.  A violent fever suddenly set
in, from which he died not many days later.

We had better bear our troubles bravely than try to escape them.


The Cat and Venus

A CAT fell in love with a handsome young man, and entreated Venus
to change her into the form of a woman.  Venus consented to her
request and transformed her into a beautiful damsel, so that the
youth saw her and loved her, and took her home as his bride.
While the two were reclining in their chamber, Venus wishing to
discover if the Cat in her change of shape had also altered her
habits of life, let down a mouse in the middle of the room.  The
Cat, quite forgetting her present condition, started up from the
couch and pursued the mouse, wishing to eat it.  Venus was much
disappointed and again caused her to return to her former shape.


Nature exceeds nurture.


The She-Goats and Their Beards

THE SHE-GOATS having obtained a beard by request to Jupiter, the
He-Goats were sorely displeased and made complaint that the
females equaled them in dignity.  "Allow them," said Jupiter, "to
enjoy an empty honor and to assume the badge of your nobler sex,
so long as they are not your equals in strength or courage."

It matters little if those who are inferior to us in merit should
be like us in outside appearances.

The Camel and the Arab

AN ARAB CAMEL-DRIVER, after completing the loading of his Camel,
asked him which he would like best, to go up hill or down.  The
poor beast replied, not without a touch of reason:  "Why do you
ask me? Is it that the level way through the desert is closed?"


The Miller, His Son, and Their Ass

A MILLER and his son were driving their Ass to a neighboring fair
to sell him.  They had not gone far when they met with a troop of
women collected round a well, talking and laughing.  "Look
there," cried one of them, "did you ever see such fellows, to be
trudging along the road on foot when they might ride?'  The old
man hearing this, quickly made his son mount the Ass, and
continued to walk along merrily by his side.  Presently they came
up to a group of old men in earnest debate.  "There," said one of
them, "it proves what I was a-saying.  What respect is shown to
old age in these days? Do you see that idle lad riding while his
old father has to walk? Get down, you young scapegrace, and let
the old man rest his weary limbs."  Upon this the old man made his
son dismount, and got up himself.  In this manner they had not
proceeded far when they met a company of women and children:
"Why, you lazy old fellow," cried several tongues at once, "how
can you ride upon the beast, while that poor little lad there can
hardly keep pace by the side of you?'  The good-natured Miller
immediately took up his son behind him.  They had now almost
reached the town.    "Pray, honest friend," said a citizen, "is
that Ass your own?'  "Yes," replied the old man.  "O, one would
not have thought so," said the other, "by the way you load him.
Why, you two fellows are better able to carry the poor beast than
he you."  "Anything to please you," said the old man; "we can but
try."  So, alighting with his son, they tied the legs of the Ass
together and with the help of a pole endeavored to carry him on
their shoulders over a bridge near the entrance to the town.
This entertaining sight brought the people in crowds to laugh at
it, till the Ass, not liking the noise nor the strange handling
that he was subject to, broke the cords that bound him and,
tumbling off the pole, fell into the river.  Upon this, the old
man, vexed and ashamed, made the best of his way home again,
convinced that by endeavoring to please everybody he had pleased
nobody, and lost his Ass in the bargain.

The Crow and the Sheep

A TROUBLESOME CROW seated herself on the back of a Sheep.  The
Sheep, much against his will, carried her backward and forward
for a long time, and at last said, "If you had treated a dog in
this way, you would have had your deserts from his sharp teeth."
To this the Crow replied, "I despise the weak and yield to the
strong.  I know whom I may bully and whom I must flatter; and I
thus prolong my life to a good old age."

The Fox and the Bramble

A FOX was mounting a hedge when he lost his footing and caught
hold of a Bramble to save himself.  Having pricked and grievously
tom the soles of his feet, he accused the Bramble because, when
he had fled to her for assistance, she had used him worse than
the hedge itself.  The Bramble, interrupting him, said, "But you
really must have been out of your senses to fasten yourself on
me, who am myself always accustomed to fasten upon others."

The Wolf and the Lion

A WOLF, having stolen a lamb from a fold, was carrying him off to
his lair.  A Lion met him in the path, and seizing the lamb, took
it from him.  Standing at a safe distance, the Wolf exclaimed,
"You have unrighteously taken that which was mine from me!"  To
which the Lion jeeringly replied, "It was righteously yours, eh?
The gift of a friend?'

The Dog and the Oyster

A DOG, used to eating eggs, saw an Oyster and, opening his mouth
to its widest extent, swallowed it down with the utmost relish,
supposing it to be an egg.  Soon afterwards suffering great pain
in his stomach, he said, "I deserve all this torment, for my
folly in thinking that everything round must be an egg."

They who act without sufficient thought, will often fall into
unsuspected danger.

The Ant and the Dove

AN ANT went to the bank of a river to quench its thirst, and
being carried away by the rush of the stream, was on the point of
drowning.  A Dove sitting on a tree overhanging the water plucked
a leaf and let it fall into the stream close to her.  The Ant
climbed onto it and floated in safety to the bank.  Shortly
afterwards a birdcatcher came and stood under the tree, and laid
his lime-twigs for the Dove, which sat in the branches.  The Ant,
perceiving his design, stung him in the foot.  In pain the
birdcatcher threw down the twigs, and the noise made the Dove
take wing.

The Partridge and the Fowler

A FOWLER caught a Partridge and was about to kill it.  The
Partridge earnestly begged him to spare his life, saying, "Pray,
master, permit me to live and I will entice many Partridges to
you in recompense for your mercy to me."  The Fowler replied, "I
shall now with less scruple take your life, because you are
willing to save it at the cost of betraying your friends and
relations."

The Flea and the Man

A MAN, very much annoyed with a Flea, caught him at last, and
said, "Who are you who dare to feed on my limbs, and to cost me
so much trouble in catching you?'  The Flea replied, "O my dear
sir, pray spare my life, and destroy me not, for I cannot
possibly do you much harm."  The Man, laughing, replied, "Now you
shall certainly die by mine own hands, for no evil, whether it be
small or large, ought to be tolerated."

The Thieves and the Cock

SOME THIEVES broke into a house and found nothing but a Cock,
whom they stole, and got off as fast as they could.  Upon
arriving at home they prepared to kill the Cock, who thus pleaded
for his life:  "Pray spare me; I am very serviceable to men.  I
wake them up in the night to their work."  "That is the very
reason why we must the more kill you," they replied; "for when
you wake your neighbors, you entirely put an end to our
business."

The safeguards of virtue are hateful to those with evil
intentions.

The Dog and the Cook

A RICH MAN gave a great feast, to which he invited many friends
and acquaintances.  His Dog availed himself of the occasion to
invite a stranger Dog, a friend of his, saying, "My master gives
a feast, and there is always much food remaining; come and sup
with me tonight."  The Dog thus invited went at the hour
appointed, and seeing the preparations for so grand an
entertainment, said in the joy of his heart, "How glad I am that
I came! I do not often get such a chance as this.  I will take
care and eat enough to last me both today and tomorrow."  While he
was congratulating himself and wagging his tail to convey his
pleasure to his friend, the Cook saw him moving about among his
dishes and, seizing him by his fore and hind paws, bundled him
without ceremony out of the window.  He fell with force upon the
ground and limped away, howling dreadfully.  His yelling soon
attracted other street dogs, who came up to him and inquired how
he had enjoyed his supper.  He replied, "Why, to tell you the
truth, I drank so much wine that I remember nothing.  I do not
know how I got out of the house."

The Travelers and the Plane-Tree

TWO TRAVELERS, worn out by the heat of the summer's sun, laid
themselves down at noon under the widespreading branches of a
Plane-Tree.  As they rested under its shade, one of the Travelers
said to the other, "What a singularly useless tree is the Plane!
It bears no fruit, and is not of the least service to man."  The
Plane-Tree, interrupting him, said, "You ungrateful fellows! Do
you, while receiving benefits from me and resting under my shade,
dare to describe me as useless, and unprofitable?'

Some men underrate their best blessings.


The Hares and the Frogs

THE HARES, oppressed by their own exceeding timidity and weary of
the perpetual alarm to which they were exposed, with one accord
determined to put an end to themselves and their troubles by
jumping from a lofty precipice into a deep lake below.  As they
scampered off in large numbers to carry out their resolve, the
Frogs lying on the banks of the lake heard the noise of their
feet and rushed helter-skelter to the deep water for safety.  On
seeing the rapid disappearance of the Frogs, one of the Hares
cried out to his companions:  "Stay, my friends, do not do as you
intended; for you now see that there are creatures who are still
more timid than ourselves."


The Lion, Jupiter, and the Elephant

THE LION wearied Jupiter with his frequent complaints.  "It is
true, O Jupiter!"  he said, "that I am gigantic in strength,
handsome in shape, and powerful in attack.  I have jaws well
provided with teeth, and feet furnished with claws, and I lord it
over all the beasts of the forest, and what a disgrace it is,
that being such as I am, I should be frightened by the crowing of
a cock."  Jupiter replied, "Why do you blame me without a cause? I
have given you all the attributes which I possess myself, and
your courage never fails you except in this one instance."  On
hearing this the Lion groaned and lamented very much and,
reproaching himself with his cowardice, wished that he might die.
As these thoughts passed through his mind, he met an Elephant and
came close to hold a conversation with him.  After a time he
observed that the Elephant shook his ears very often, and he
inquired what was the matter and why his ears moved with such a
tremor every now and then.  Just at that moment a Gnat settled on
the head of the Elephant, and he replied, "Do you see that little
buzzing insect? If it enters my ear, my fate is sealed.  I should
die presently."  The Lion said, "Well, since so huge a beast is
afraid of a tiny gnat, I will no more complain, nor wish myself
dead.  I find myself, even as I am, better off than the
Elephant."

The Lamb and the Wolf

A WOLF pursued a Lamb, which fled for refuge to a certain Temple.
The Wolf called out to him and said, "The Priest will slay you in
sacrifice, if he should catch you."  On which the Lamb replied,
"It would be better for me to be sacrificed in the Temple than to
be eaten by you."


The Rich Man and the Tanner

A RICH MAN lived near a Tanner, and not being able to bear the
unpleasant smell of the tan-yard, he pressed his neighbor to go
away.  The Tanner put off his departure from time to time, saying
that he would leave soon.  But as he still continued to stay, as
time went on, the rich man became accustomed to the smell, and
feeling no manner of inconvenience, made no further complaints.


The Shipwrecked Man and the Sea

A SHIPWRECKED MAN, having been cast upon a certain shore, slept
after his buffetings with the deep.  After a while he awoke, and
looking upon the Sea, loaded it with reproaches.  He argued that
it enticed men with the calmness of its looks, but when it had
induced them to plow its waters, it grew rough and destroyed
them.  The Sea, assuming the form of a woman, replied to him:
"Blame not me, my good sir, but the winds, for I am by my own
nature as calm and firm even as this earth; but the winds
suddenly falling on me create these waves, and lash me into
fury."


The Mules and the Robbers

TWO MULES well-laden with packs were trudging along.  One carried
panniers filled with money, the other sacks weighted with grain.
The Mule carrying the treasure walked with head erect, as if
conscious of the value of his burden, and tossed up and down the
clear-toned bells fastened to his neck.  His companion followed
with quiet and easy step.  All of a sudden Robbers rushed upon
them from their hiding-places, and in the scuffle with their
owners, wounded with a sword the Mule carrying the treasure,
which they greedily seized while taking no notice of the grain.
The Mule which had been robbed and wounded bewailed his
misfortunes.  The other replied, "I am indeed glad that I was
thought so little of, for I have lost nothing, nor am I hurt with
any wound."


The Viper and the File

A LION, entering the workshop of a smith, sought from the tools
the means of satisfying his hunger.  He more particularly
addressed himself to a File, and asked of him the favor of a
meal.  The File replied, "You must indeed be a simple-minded
fellow if you expect to get anything from me, who am accustomed
to take from everyone, and never to give anything in return."


The Lion and the Shepherd

A LION, roaming through a forest, trod upon a thorn.  Soon
afterward he came up to a Shepherd and fawned upon him, wagging
his tail as if to say, "I am a suppliant, and seek your aid."  The
Shepherd boldly examined the beast, discovered the thorn, and
placing his paw upon his lap, pulled it out; thus relieved of his
pain, the Lion returned into the forest.  Some time after, the
Shepherd, being imprisoned on a false accusation, was condemned
"to be cast to the Lions" as the punishment for his imputed
crime.  But when the Lion was released from his cage, he
recognized the Shepherd as the man who healed him, and instead of
attacking him, approached and placed his foot upon his lap.  The
King, as soon as he heard the tale, ordered the Lion to be set
free again in the forest, and the Shepherd to be pardoned and
restored to his friends.


The Camel and Jupiter

THE CAMEL, when he saw the Bull adorned with horns, envied him
and wished that he himself could obtain the same honors.  He went
to Jupiter, and besought him to give him horns.  Jupiter, vexed
at his request because he was not satisfied with his size and
strength of body, and desired yet more, not only refused to give
him horns, but even deprived him of a portion of his ears.


The Panther and the Shepherds

A PANTHER, by some mischance, fell into a pit.  The Shepherds
discovered him, and some threw sticks at him and pelted him with
stones, while others, moved with compassion towards one about to
die even though no one should hurt him, threw in some food to
prolong his life.  At night they returned home, not dreaming of
any danger, but supposing that on the morrow they would find him
dead.  The Panther, however, when he had recruited his feeble
strength, freed himself with a sudden bound from the pit, and
hastened to his den with rapid steps.  After a few days he came
forth and slaughtered the cattle, and, killing the Shepherds who
had attacked him, raged with angry fury.  Then they who had
spared his life, fearing for their safety, surrendered to him
their flocks and begged only for their lives.  To them the
Panther made this reply:  "I remember alike those who sought my
life with stones, and those who gave me food
aside, therefore, your fears.  I return as an enemy only to those
who injured me."


The Ass and the Charger

AN ASS congratulated a Horse on being so ungrudgingly and
carefully provided for, while he himself had scarcely enough to
eat and not even that without hard work.  But when war broke out,
a heavily armed soldier mounted the Horse, and riding him to the
charge, rushed into the very midst of the enemy.  The Horse was
wounded and fell dead on the battlefield.  Then the Ass, seeing
all these things, changed his mind, and commiserated the Horse.


The Eagle and His Captor

AN EAGLE was once captured by a man, who immediately clipped his
wings and put him into his poultry-yard with the other birds, at
which treatment the Eagle was weighed down with grief.  Later,
another neighbor purchased him and allowed his feathers to grow
again.  The Eagle took flight, and pouncing upon a hare, brought
it at once as an offering to his benefactor.  A Fox, seeing this,
exclaimed, "Do not cultivate the favor of this man, but of your
former owner, lest he should again hunt for you and deprive you a
second time of your wings."


The Bald Man and the Fly

A FLY bit the bare head of a Bald Man who, endeavoring to destroy
it, gave himself a heavy slap.  Escaping, the Fly said mockingly,
"You who have wished to revenge, even with death, the Prick of a
tiny insect, see what you have done to yourself to add insult to
injury?'  The Bald Man replied, "I can easily make peace with
myself, because I know there was no intention to hurt.  But you,
an ill-favored and contemptible insect who delights in sucking
human blood, I wish that I could have killed you even if I had
incurred a heavier penalty."


The Olive-Tree and the Fig-Tree

THE OLIVE-TREE ridiculed the Fig-Tree because, while she was
green all the year round, the Fig-Tree changed its leaves with
the seasons.  A shower of snow fell upon them, and, finding the
Olive full of foliage, it settled upon its branches and broke
them down with its weight, at once despoiling it of its beauty
and killing the tree.  But finding the Fig-Tree denuded of
leaves, the snow fell through to the ground, and did not injure
it at all.


The Eagle and the Kite

AN EAGLE, overwhelmed with sorrow, sat upon the branches of a
tree in company with a Kite.  "Why," said the Kite, "do I see you
with such a rueful look?'  "I seek," she replied, "a mate suitable
for me, and am not able to find one."  "Take me," returned the
Kite, "I am much stronger than you are."  "Why, are you able to
secure the means of living by your plunder?'  "Well, I have often
caught and carried away an ostrich in my talons."  The Eagle,
persuaded by these words, accepted him as her mate.  Shortly
after the nuptials, the Eagle said, "Fly off and bring me back
the ostrich you promised me."  The Kite, soaring aloft into the
air, brought back the shabbiest possible mouse, stinking from the
length of time it had lain about the fields.  "Is this," said the
Eagle, "the faithful fulfillment of your promise to me?'  The Kite
replied, "That I might attain your royal hand, there is nothing
that I would not have promised, however much I knew that I must
fail in the performance."


The Ass and His Driver

AN ASS, being driven along a high road, suddenly started off and
bolted to the brink of a deep precipice.  While he was in the act
of throwing himself over, his owner seized him by the tail,
endeavoring to pull him back.  When the Ass persisted in his
effort, the man let him go and said, "Conquer, but conquer to
your cost."


The Thrush and the Fowler

A THRUSH was feeding on a myrtle-tree and did not move from it
because its berries were so delicious.  A Fowler observed her
staying so long in one spot, and having well bird-limed his
reeds, caught her.  The Thrush, being at the point of death,
exclaimed, "O foolish creature that I am! For the sake of a
little pleasant food I have deprived myself of my life."


The Rose and the Amaranth

AN AMARANTH planted in a garden near a Rose-Tree, thus addressed
it:  "What a lovely flower is the Rose, a favorite alike with Gods
and with men.  I envy you your beauty and your perfume."  The Rose
replied, "I indeed, dear Amaranth, flourish but for a brief
season! If no cruel hand pluck me from my stem, yet I must perish
by an early doom.  But thou art immortal and dost never fade, but
bloomest for ever in renewed youth."


The Frogs' Complaint Against the Sun

ONCE UPON A TIME, when the Sun announced his intention to take a
wife, the Frogs lifted up their voices in clamor to the sky.
Jupiter, disturbed by the noise of their croaking, inquired the
cause of their complaint.  One of them said, "The Sun, now while
he is single, parches up the marsh, and compels us to die
miserably in our arid homes.  What will be our future condition
if he should beget other suns?'


LIFE OF AESOP

THE LIFE and History of Aesop is involved, like that of Homer,
the most famous of Greek poets, in much obscurity.  Sardis, the
capital of Lydia; Samos, a Greek island; Mesembria, an ancient
colony in Thrace; and Cotiaeum, the chief city of a province of
Phrygia, contend for the distinction of being the birthplace of
Aesop.  Although the honor thus claimed cannot be definitely
assigned to any one of these places, yet there are a few
incidents now generally accepted by scholars as established
facts, relating to the birth, life, and death of Aesop.  He is,
by an almost universal consent, allowed to have been born about
the year 620 B.C., and to have been by birth a slave.  He was
owned by two masters in succession, both inhabitants of Samos,
Xanthus and Jadmon, the latter of whom gave him his liberty as a
reward for his learning and wit.  One of the privileges of a
freedman in the ancient republics of Greece, was the permission
to take an active interest in public affairs; and Aesop, like the
philosophers Phaedo, Menippus, and Epictetus, in later times,
raised himself from the indignity of a servile condition to a
position of high renown.  In his desire alike to instruct and to
be instructed, he travelled through many countries, and among
others came to Sardis, the capital of the famous king of Lydia,
the great patron, in that day, of learning and of learned men.
He met at the court of Croesus with Solon, Thales, and other
sages, and is related so to have pleased his royal master, by the
part he took in the conversations held with these philosophers,
that he applied to him an expression which has since passed into
a proverb, "The Phrygian has spoken better than all."

On the invitation of Croesus he fixed his residence at Sardis,
and was employed by that monarch in various difficult and
delicate affairs of State.  In his discharge of these commissions
he visited the different petty republics of Greece.  At one time
he is found in Corinth, and at another in Athens, endeavouring,
by the narration of some of his wise fables, to reconcile the
inhabitants of those cities to the administration of their
respective rulers Periander and Pisistratus.  One of these
ambassadorial missions, undertaken at the command of Croesus, was
the occasion of his death.  Having been sent to Delphi with a
large sum of gold for distribution among the citizens, he was so
provoked at their covetousness that he refused to divide the
money, and sent it back to his master.  The Delphians, enraged at
this treatment, accused him of impiety, and, in spite of his
sacred character as ambassador, executed him as a public
criminal.  This cruel death of Aesop was not unavenged.  The
citizens of Delphi were visited with a series of calamities,
until they made a public reparation of their crime; and, "The
blood of Aesop" became a well-
known adage, bearing witness to the truth that deeds of wrong
would not pass unpunished.  Neither did the great fabulist lack
posthumous honors; for a statue was erected to his memory at
Athens, the work of Lysippus, one of the most famous of Greek
sculptors.  Phaedrus thus immortalizes the event:

Aesopo ingentem statuam posuere Attici,
Servumque collocarunt aeterna in basi:
Patere honoris scirent ut cuncti viam;
Nec generi tribui sed virtuti gloriam.

These few facts are all that can be relied on with any degree of
certainty, in reference to the birth, life, and death of Aesop.
They were first brought to light, after a patient search and
diligent perusal of ancient authors, by a Frenchman, M. Claude
Gaspard Bachet de Mezeriac, who declined the honor of being
tutor to Louis XIII of France, from his desire to devote himself
exclusively to literature.  He published his Life of Aesop, Anno
Domini 1632.  The later investigations of a host of English and
German scholars have added very little to the facts given by M.
Mezeriac.  The substantial truth of his statements has been
confirmed by later criticism and inquiry.  It remains to state,
that prior to this publication of M. Mezeriac, the life of Aesop
was from the pen of Maximus Planudes, a monk of Constantinople,
who was sent on an embassy to Venice by the Byzantine Emperor
Andronicus the elder, and who wrote in the early part of the
fourteenth century.  His life was prefixed to all the early
editions of these fables, and was republished as late as 1727 by
Archdeacon Croxall as the introduction to his edition of Aesop.
This life by Planudes contains, however, so small an amount of
truth, and is so full of absurd pictures of the grotesque
deformity of Aesop, of wondrous apocryphal stories, of lying
legends, and gross anachronisms, that it is now universally
condemned as false, puerile, and unauthentic.  l It is given up
in the present day, by general consent, as unworthy of the
slightest credit.
G.F.T.

1 M. Bayle thus characterises this Life of Aesop by Planudes,
"Tous les habiles gens conviennent que c'est un roman, et que les
absurdites grossieres qui l'on y trouve le rendent indigne de
toute."
Dictionnaire Historique.  Art.  Esope.
*********Preface********
PREFACE

THE TALE, the Parable, and the Fable are all common and popular
modes of conveying instruction.  Each is distinguished by its own
special characteristics.  The Tale consists simply in the
narration of a story either founded on facts, or created solely
by the imagination, and not necessarily associated with the
teaching of any moral lesson.  The Parable is the designed use of
language purposely intended to convey a hidden and secret
meaning other than that contained in the words themselves; and
which may or may not bear a special reference to the hearer, or
reader.  The Fable partly agrees with, and partly differs from
both of these.  It will contain, like the Tale, a short but real
narrative; it will seek, like the Parable, to convey a hidden
meaning, and that not so much by the use of language, as by the
skilful introduction of fictitious characters; and yet unlike to
either Tale or Parable, it will ever keep in view, as its high
prerogative, and inseparable attribute, the great purpose of
instruction, and will necessarily seek to inculcate some moral
maxim, social duty, or political truth.  The true Fable, if it
rise to its high requirements, ever aims at one great end and
purpose representation of human motive, and the improvement of
human conduct, and yet it so conceals its design under the
disguise of fictitious characters, by clothing with speech the
animals of the field, the birds of the air, the trees of the
wood, or the beasts of the forest, that the reader shall receive
advice without perceiving the presence of the adviser.  Thus the
superiority of the counsellor, which often renders counsel
unpalatable, is kept out of view, and the lesson comes with the
greater acceptance when the reader is led, unconsciously to
himself, to have his sympathies enlisted in behalf of what is
pure, honorable, and praiseworthy, and to have his indignation
excited against what is low, ignoble, and unworthy.  The true
fabulist, therefore, discharges a most important function.  He is
neither a narrator, nor an allegorist.  He is a great teacher, a
corrector of morals, a censor of vice, and a commender of virtue.
In this consists the superiority of the Fable over the Tale or
the Parable.  The fabulist is to create a laugh, but yet, under a
merry guise, to convey instruction.  Phaedrus, the great imitator
of Aesop, plainly indicates this double purpose to be the true
office of the writer of fables.

Duplex libelli dos est:  quod risum movet,
Et quod prudenti vitam consilio monet.

The continual observance of this twofold aim creates the charm,
and accounts for the universal favor, of the fables of Aesop.
"The fable," says Professor K. O. Mueller, "originated in Greece
in an intentional travestie of human affairs.  The 'ainos,' as
its name denotes, is an admonition, or rather a reproof veiled,
either from fear of an excess of frankness, or from a love of fun
and jest, beneath the fiction of an occurrence happening among
beasts; and wherever we have any ancient and authentic account of
the Aesopian fables, we find it to be the same."  l

The construction of a fable involves a minute attention to (1)
the narration itself; (2) the deduction of the moral; and (3) a
careful maintenance of the individual characteristics of the
fictitious personages introduced into it.  The narration should
relate to one simple action, consistent with itself, and neither
be overladen with a multiplicity of details, nor distracted by a
variety of circumstances.  The moral or lesson should be so
plain, and so intimately interwoven with, and so necessarily
dependent on, the narration, that every reader should be
compelled to give to it the same undeniable interpretation.  The
introduction of the animals or fictitious characters should be
marked with an unexceptionable care and attention to their
natural attributes, and to the qualities attributed to them by
universal popular consent.  The Fox should be always cunning, the
Hare timid, the Lion bold, the Wolf cruel, the Bull strong, the
Horse proud, and the Ass patient.  Many of these fables are
characterized by the strictest observance of these rules.  They
are occupied with one short narrative, from which the moral
naturally flows, and with which it is intimately associated.
"'Tis the simple manner," says Dodsley, 2 "in which the morals of
Aesop are interwoven with his fables that distinguishes him, and
gives him the preference over all other mythologists.  His
'Mountain delivered of a Mouse,' produces the moral of his fable
in ridicule of pompous pretenders; and his Crow, when she drops
her cheese, lets fall, as it were by accident, the strongest
admonition against the power of flattery.  There is no need of a
separate sentence to explain it; no possibility of impressing it
deeper, by that load we too often see of accumulated
reflections."  3 An equal amount of praise is due for the
consistency with which the characters of the animals,
fictitiously introduced, are marked.  While they are made to
depict the motives and passions of men, they retain, in an
eminent degree, their own special features of craft or counsel,
of cowardice or courage, of generosity or rapacity.

These terms of praise, it must be confessed, cannot be bestowed
on all the fables in this collection.  Many of them lack that
unity of design, that close connection of the moral with the
narrative, that wise choice in the introduction of the animals,
which constitute the charm and excellency of true Aesopian fable.
This inferiority of some to others is sufficiently accounted for
in the history of the origin and descent of these fables.  The
great bulk of them are not the immediate work of Aesop.  Many are
obtained from ancient authors prior to the time in which he
lived.  Thus, the fable of the "Hawk and the Nightingale" is
related by Hesiod; 4 the "Eagle wounded by an Arrow, winged with
its own Feathers," by Aeschylus; 5 the "Fox avenging his wrongs
on the Eagle," by Archilochus.  6 Many of them again are of later
origin, and are to be traced to the monks of the middle ages:  and
yet this collection, though thus made up of fables both earlier
and later than the era of Aesop, rightfully bears his name,
because he composed so large a number (all framed in the same
mould, and conformed to the same fashion, and stamped with the
same lineaments, image, and superscription) as to secure to
himself the right to be considered the father of Greek fables,
and the founder of this class of writing, which has ever since
borne his name, and has secured for him, through all succeeding
ages, the position of the first of moralists.7

The fables were in the first instance only narrated by Aesop, and
for a long time were handed down by the uncertain channel of oral
tradition.  Socrates is mentioned by Plato 8 as having employed
his time while in prison, awaiting the return of the sacred ship
from Delphos which was to be the signal of his death, in turning
some of these fables into verse, but he thus versified only such
as he remembered.  Demetrius Phalereus, a philosopher at Athens
about 300 B.C., is said to have made the first collection of
these fables.  Phaedrus, a slave by birth or by subsequent
misfortunes, and admitted by Augustus to the honors of a
freedman, imitated many of these fables in Latin iambics about
the commencement of the Christian era.  Aphthonius, a rhetorician
of Antioch, A.D. 315, wrote a treatise on, and converted into
Latin prose, some of these fables.  This translation is the more
worthy of notice, as it illustrates a custom of common use, both
in these and in later times.  The rhetoricians and philosophers
were accustomed to give the Fables of Aesop as an exercise to
their scholars, not only inviting them to discuss the moral of
the tale, but also to practice and to perfect themselves thereby
in style and rules of grammar, by making for themselves new and
various versions of the fables.  Ausonius, 9 the friend of the
Emperor Valentinian, and the latest poet of eminence in the
Western Empire, has handed down some of these fables in verse,
which Julianus Titianus, a contemporary writer of no great name,
translated into prose.  Avienus, also a contemporary of Ausonius,
put some of these fables into Latin elegiacs, which are given by
Nevelet (in a book we shall refer to hereafter), and are
occasionally incorporated with the editions of Phaedrus.

Seven centuries elapsed before the next notice is found of the
Fables of Aesop.  During this long period these fables seem to
have suffered an eclipse, to have disappeared and to have been
forgotten; and it is at the commencement of the fourteenth
century, when the Byzantine emperors were the great patrons of
learning, and amidst the splendors of an Asiatic court, that we
next find honors paid to the name and memory of Aesop.  Maximus
Planudes, a learned monk of Constantinople, made a collection of
about a hundred and fifty of these fables.  Little is known of
his history.  Planudes, however, was no mere recluse, shut up in
his monastery.  He took an active part in public affairs.  In
1327 A.D.  he was sent on a diplomatic mission to Venice by the
Emperor Andronicus the Elder.  This brought him into immediate
contact with the Western Patriarch, whose interests he henceforth
advocated with so much zeal as to bring on him suspicion and
persecution from the rulers of the Eastern Church.  Planudes has
been exposed to a two-fold accusation.  He is charged on the one
hand with having had before him a copy of Babrias (to whom we
shall have occasion to refer at greater length in the end of this
Preface), and to have had the bad taste "to transpose," or to
turn his poetical version into prose:  and he is asserted, on the
other hand, never to have seen the Fables of Aesop at all, but to
have himself invented and made the fables which he palmed off
under the name of the famous Greek fabulist.  The truth lies
between these two extremes.  Planudes may have invented some few
fables, or have inserted some that were current in his day; but
there is an abundance of unanswerable internal evidence to prove
that he had an acquaintance with the veritable fables of Aesop,
although the versions he had access to were probably corrupt, as
contained in the various translations and disquisitional
exercises of the rhetoricians and philosophers.  His collection
is interesting and important, not only as the parent source or
foundation of the earlier printed versions of Aesop, but as the
direct channel of attracting to these fables the attention of the
learned.

The eventual re-introduction, however, of these Fables of Aesop
to their high place in the general literature of Christendom, is
to be looked for in the West rather than in the East.  The
calamities gradually thickening round the Eastern Empire, and the
fall of Constantinople, 1453 A.D.  combined with other events to
promote the rapid restoration of learning in Italy; and with that
recovery of learning the revival of an interest in the Fables of
Aesop is closely identified.  These fables, indeed, were among
the first writings of an earlier antiquity that attracted
attention.  They took their place beside the Holy Scriptures and
the ancient classic authors, in the minds of the great students
of that day.  Lorenzo Valla, one of the most famous promoters of
Italian learning, not only translated into Latin the Iliad of
Homer and the Histories of Herodotus and Thucydides, but also the
Fables of Aesop.

These fables, again, were among the books brought into an
extended circulation by the agency of the printing press.  Bonus
Accursius, as early as 1475-1480, printed the collection of these
fables, made by Planudes, which, within five years afterwards,
Caxton translated into English, and printed at his press in West-
minster Abbey, 1485.  10 It must be mentioned also that the
learning of this age has left permanent traces of its influence
on these fables, ll by causing the interpolation with them of
some of those amusing stories which were so frequently introduced
into the public discourses of the great preachers of those days,
and of which specimens are yet to be found in the extant sermons
of Jean Raulin, Meffreth, and Gabriel Barlette.   12 The
publication of this era which most probably has influenced these
fables, is the "Liber Facetiarum," l3 a book consisting of a
hundred jests and stories, by the celebrated Poggio Bracciolini,
published A.D.  1471, from which the two fables of the "Miller,
his Son, and the Ass," and the "Fox and the Woodcutter," are
undoubtedly selected.

The knowledge of these fables rapidly spread from Italy into
Germany, and their popularity was increased by the favor and
sanction given to them by the great fathers of the Reformation,
who frequently used them as vehicles for satire and protest
against the tricks and abuses of the Romish ecclesiastics.  The
zealous and renowned Camerarius, who took an active part in the
preparation of the Confession of Augsburgh, found time, amidst
his numerous avocations, to prepare a version for the students in
the university of Tubingen, in which he was a professor.  Martin
Luther translated twenty of these fables, and was urged by
Melancthon to complete the whole; while Gottfried Arnold, the
celebrated Lutheran theologian, and librarian to Frederick I,
king of Prussia, mentions that the great Reformer valued the
Fables of Aesop next after the Holy Scriptures.  In 1546 A.D.
the second printed edition of the collection of the Fables made
by Planudes, was issued from the printing-press of Robert
Stephens, in which were inserted some additional fables from a
MS. in the Bibliotheque du Roy at Paris.

The greatest advance, however, towards a re-introduction of the
Fables of Aesop to a place in the literature of the world, was
made in the early part of the seventeenth century.  In the year
1610, a learned Swiss, Isaac Nicholas Nevelet, sent forth the
third printed edition of these fables, in a work entitled
"Mythologia Aesopica."  This was a noble effort to do honor to
the great fabulist, and was the most perfect collection of
Aesopian fables ever yet published.  It consisted, in addition to
the collection of fables given by Planudes and reprinted in the
various earlier editions, of one hundred and thirty-six new
fables (never before published) from MSS.  in the Library of the
Vatican, of forty fables attributed to Aphthonius, and of
forty-three from Babrias.  It also contained the Latin versions
of the same fables by Phaedrus, Avienus, and other authors.  This
volume of Nevelet forms a complete "Corpus Fabularum
Aesopicarum;" and to his labors Aesop owes his restoration to
universal favor as one of the wise moralists and great teachers
of mankind.  During the interval of three centuries which has
elapsed since the publication of this volume of Nevelet's, no
book, with the exception of the Holy Scriptures, has had a wider
circulation than Aesop's Fables.  They have been translated into
the greater number of the languages both of Europe and of the
East, and have been read, and will be read, for generations,
alike by Jew, Heathen, Mohammedan, and Christian.  They are, at
the present time, not only engrafted into the literature of the
civilized world, but are familiar as household words in the
common intercourse and daily conversation of the inhabitants of
all countries.

This collection of Nevelet's is the great culminating point in
the history of the revival of the fame and reputation of Aesopian
Fables.  It is remarkable, also, as containing in its preface the
germ of an idea, which has been since proved to have been correct
by a strange chain of circumstances.  Nevelet intimates an
opinion, that a writer named Babrias would be found to be the
veritable author of the existing form of Aesopian Fables.  This
intimation has since given rise to a series of inquiries, the
knowledge of which is necessary, in the present day, to a full
understanding of the true position of Aesop in connection with
the writings that bear his name.

The history of Babrias is so strange and interesting, that it
might not unfitly be enumerated among the curiosities of
literature.  He is generally supposed to have been a Greek of
Asia Minor, of one of the Ionic Colonies, but the exact period in
which he lived and wrote is yet unsettled.  He is placed, by one
critic, l4 as far back as the institution of the Achaian League,
B.C.  250; by another as late as the Emperor Severus, who died
A.D.  235; while others make him a contemporary with Phaedrus in
the time of Augustus.  At whatever time he wrote his version of
Aesop, by some strange accident it seems to have entirely
disappeared, and to have been lost sight of.  His name is
mentioned by Avienus; by Suidas, a celebrated critic, at the
close of the eleventh century, who gives in his lexicon several
isolated verses of his version of the fables; and by John
Tzetzes, a grammarian and poet of Constantinople, who lived
during the latter half of the twelfth century.  Nevelet, in the
preface to the volume which we have described, points out that
the Fables of Planudes could not be the work of Aesop, as they
contain a reference in two places to "Holy monks," and give a
verse from the Epistle of St.  James as an "Epimith" to one of
the fables, and suggests Babrias as their author.  Francis
Vavassor, 15 a learned French jesuit, entered at greater length
on this subject, and produced further proofs from internal
evidence, from the use of the word Piraeus in describing the
harbour of Athens, a name which was not given till two hundred
years after Aesop, and from the introduction of other modern
words, that many of these fables must have been at least
committed to writing posterior to the time of Aesop, and more
boldly suggests Babrias as their author or collector.  16 These
various references to Babrias induced Dr. Plichard Bentley, at
the close of the seventeenth century, to examine more minutely
the existing versions of Aesop's Fables, and he maintained that
many of them could, with a slight change of words, be resolved
into the Scazonic l7 iambics, in which Babrias is known to have
written:  and, with a greater freedom than the evidence then
justified, he put forth, in behalf of Babrias, a claim to the
exclusive authorship of these fables.  Such a seemingly
extravagant theory, thus roundly asserted, excited much
opposition.  Dr. Bentley l8 met with an able antagonist in a
member of the University of Oxford, the Hon.  Mr.  Charles Boyle,
19 afterwards Earl of Orrery.  Their letters and disputations on
this subject, enlivened on both sides with much wit and learning,
will ever bear a conspicuous place in the literary history of the
seventeenth century.  The arguments of Dr. Bentley were yet
further defended a few years later by Mr.  Thomas Tyrwhitt, a
well-read scholar, who gave up high civil distinctions that he
might devote himself the more unreservedly to literary pursuits.
Mr.  Tyrwhitt published, A.D.  1776, a Dissertation on Babrias,
and a collection of his fables in choliambic meter found in a MS.
in the Bodleian Library at Oxford.  Francesco de Furia, a learned
Italian, contributed further testimony to the correctness of the
supposition that Babrias had made a veritable collection of
fables by printing from a MS.  contained in the Vatican library
several fables never before published.  In the year 1844,
however, new and unexpected light was thrown upon this subject.
A veritable copy of Babrias was found in a manner as singular as
were the MSS.  of Quinctilian's Institutes, and of Cicero's
Orations by Poggio in the monastery of St.  Gall A.D.  1416.  M.
Menoides, at the suggestion of M. Villemain, Minister of Public
Instruction to King Louis Philippe, had been entrusted with a
commission to search for ancient MSS., and in carrying out his
instructions he found a MS.  at the convent of St.  Laura, on
Mount Athos, which proved to be a copy of the long suspected and
wished-for choliambic version of Babrias.  This MS.  was found to
be divided into two books, the one containing a hundred and
twenty-five, and the other ninety-five fables.  This discovery
attracted very general attention, not only as confirming, in a
singular manner, the conjectures so boldly made by a long chain
of critics, but as bringing to light valuable literary treasures
tending to establish the reputation, and to confirm the antiquity
and authenticity of the great mass of Aesopian Fable.  The Fables
thus recovered were soon published.  They found a most worthy
editor in the late distinguished Sir George Cornewall Lewis, and
a translator equally qualified for his task, in the Reverend
James Davies, M.A., sometime a scholar of Lincoln College,
Oxford, and himself a relation of their English editor.  Thus,
after an eclipse of many centuries, Babrias shines out as the
earliest, and most reliable collector of veritable Aesopian
Fables.

The following are the sources from which the present translation
has been prepared:     Babrii Fabulae Aesopeae.  George Cornewall
Lewis.  Oxford, 1846.
Babrii Fabulae Aesopeae.  E codice manuscripto partem secundam
edidit.  George Cornewall Lewis.  London:  Parker, 1857.
Mythologica Aesopica.  Opera et studia Isaaci Nicholai Neveleti.
Frankfort, 1610.
Fabulae Aesopiacae, quales ante Planudem ferebantur cura et
studio Francisci de Furia.  Lipsiae, 1810.
??????????????.  Ex recognitione Caroli Halmii.  Lipsiae, Phaedri
Fabulae Esopiae.  Delphin Classics.  1822.

GEORGE FYLER TOWNSEND

FOOTNOTES

1 A History of the Literature of Ancient Greece, by K.  O.
Mueller.  Vol.  i, p.  l9l.  London, Parker, 1858.
2 Select Fables of Aesop, and other Fabulists.  In three books,
translated by Robert Dodsley, accompanied with a selection of
notes, and an Essay on Fable. Birmingham, 1864.  P.  60.
3 Some of these fables had, no doubt, in the first instance, a
primary and private interpretation.  On the first occasion of
their being composed they were intended to refer to some passing
event, or to some individual acts of wrong-doing.  Thus, the
fables of the "Eagle and the Fox" and of the "Fox and Monkey' are
supposed to have been written by Archilochus, to avenge the
injuries done him by Lycambes.  So also the fables of the
"Swollen Fox" and of the "Frogs asking a King" were spoken by
Aesop for the immediate purpose of reconciling the inhabitants of
Samos and Athens to their respective rulers, Periander and
Pisistratus; while the fable of the "Horse and Stag" was composed
to caution the inhabitants of Himera against granting a bodyguard
to Phalaris.  In a similar manner, the fable from Phaedrus, the
"Marriage of the Sun," is supposed to have reference to the
contemplated union of Livia, the daughter of Drusus, with Sejanus
the favourite, and minister of Trajan.  These fables, however,
though thus originating in special events, and designed at first
to meet special circumstances, are so admirably constructed as to
be fraught with lessons of general utility, and of universal
application.
4 Hesiod.  Opera et Dies, verse 202.
5 Aeschylus.  Fragment of the Myrmidons.  Aeschylus speaks of
this fable as existing before his day.  See Scholiast on the Aves
of Aristophanes, line 808.
6 Fragment.  38, ed.  Gaisford.  See also Mueller's History of
the Literature of Ancient Greece, vol.  i.  pp.  190-193.
7 M. Bayle has well put this in his account of Aesop.  "Il n'y a
point d'apparence que les fables qui portent aujourd'hui son nom
soient les memes qu'il avait faites; elles viennent bien de lui
pour la plupart, quant a la matiere et la pensee; mais les
paroles sont d'un autre."  And again, "C'est donc a Hesiode, que
j'aimerais mieux attribuer la gloire de l'invention; mais sans
doute il laissa la chose tres imparfaite.  Esope la perfectionne
si heureusement, qu'on l'a regarde comme le vrai pere de cette
sorte de production."   M. Bayle.  Dictionnaire Historique.
8 Plato in Ph2done.
9 Apologos en! misit tibi
  Ab usque Rheni limite
  Ausonius nomen Italum
  Praeceptor Augusti tui
  Aesopiam trimetriam;
  Quam vertit exili stylo
  Pedestre concinnans opus
  Fandi Titianus artifex.
        Ausonii Epistola, xvi.  75-80.
10 Both these publications are in the British Museum, and are
placed in the library in cases under glass, for the inspection of
the curious.
ll Fables may possibly have been not entirely unknown to the
mediaeval scholars.  There are two celebrated works which might
by some be classed amongst works of this description.  The one is
the "Speculum Sapientiae," attributed to St.  Cyril, Archbishop
of Jerusalem, but of a considerably later origin, and existing
only in Latin.  It is divided into four books, and consists of
long conversations conducted by fictitious characters under the
figures  the beasts of the field and forest, and aimed at the
rebuke of particular classes of men, the boastful, the proud, the
luxurious, the wrathful, &c.  None of the stories are precisely
those of Aesop, and none have the concinnity, terseness, and
unmistakable deduction of the lesson intended to be taught by
the fable, so conspicuous in the great Greek fabulist.  The exact
title of the book is this:  "Speculum Sapientiae, B.  Cyrilli
Episcopi:  alias quadripartitus apologeticus vocatus, in cujus
quidem proverbiis omnis et totius sapientiae speculum claret et
feliciter incipit."  The other is a larger work in two volumes,
published in the fourteenth century by Caesar Heisterbach, a
Cistercian monk, under the title of "Dialogus Miraculorum,"
reprinted in 1851.  This work consists of conversations in which
many stories are interwoven on all kinds of subjects.  It has no
correspondence with the pure Aesopian fable.
12 Post-medieval Preachers, by S. Baring-Gould.  Rivingtons,
1865.
13 For an account of this work see the Life of Poggio
Bracciolini, by the Rev.  William Shepherd.  Liverpool.  1801.
14 Professor Theodore Bergh.  See Classical Museum, No.  viii.
July, 1849.
15 Vavassor's treatise, entitled "De Ludicra Dictione" was
written A.D.  1658, at the request of the celebrated M. Balzac
(though published after his death), for the purpose of showing
that the burlesque style of writing adopted by Scarron and
D'Assouci, and at that time so popular in France, had no sanction
from the ancient classic writers.  Francisci Vavassoris opera
omnia. Amsterdam. 1709.
16 The claims of Babrias also found a warm advocate in the
learned Frenchman, M. Bayle, who, in his admirable dictionary,
(Dictionnaire Historique et Critique de Pierre Bayle.  Paris,
1820,) gives additional arguments in confirmation of the opinions
of his learned predecessors, Nevelet and Vavassor.
17 Scazonic, or halting, iambics; a choliambic (a lame, halting
iambic) differs from the iambic Senarius in always having a
spondee or trichee for its last foot; the fifth foot, to avoid
shortness of meter, being generally an iambic.  See Fables of
Babrias, translated by Rev.  James Davies.  Lockwood, 1860.
Preface, p.  27.
18 See Dr. Bentley's Dissertations upon the Epistles of
Phalaris.
19 Dr. Bentley's Dissertations on the Epistles of Phalaris, and
Fables of Aesop examined.  By the Honorable Charles Boyle.
 own from nearly every point.  Any one of
those stalactites could have been a very short and fat piercer,
except for the fact that piercers didn't particularly care for
bright light.  A yellowish-white sphere hung from the tremendous
ceiling, shining like an artificial sun.
     It was then she noticed that the walls weren't plain; there
was a gigantic wooden panel set into the flank side of the wall
to the left of her, with a gold-colored cylinder jutting out of
one side.  It looked rather remotely like a mammoth door.  Oh,
and there was one more detail in the room.  Perhaps she had not
wished to acknowledge its presence, but there was something else
there.  Or some_one_ else there.  Someone whom she could no longer
ignore.  Someone who, judging from the scale of the blue lines on
the ground, must have been 600 feet -- or yards -- tall.
     The giant looked away from the papers in his hands and
stared at Ridiculous Sword through his thick glasses.  His
eyebrows lowered as he pointed at her.  "YOU!  What are you doing
here?!"
     Ridiculous Sword couldn't move her mouth to speak, but she
could still use telepathy.  'You must be the Dungeon Master.'
     "Darned right I'm the Dungeon Master!" he insisted, setting
some of his papers down and inadvertently dropping a 20-sided
die.  "Brilliant deduction!  You don't have a 19 intelligence for
nothing!"
     Ridiculous Sword glanced at her reflection in his
spectacles.  She looked nothing like herself.  She was metallic-
gray, adorned in a lifeless mockery of a magician's robe.  She
looked like a metal statue of some girl wearing long robes and
holding her hands in a spell-casting position.  Her feet rested
on a circular metal base half a foot high and three feet wide.
In short, she looked just as stiff and motionless as she felt.
     'You undoubtedly know why I'm here, O great and powerful
Dungeon Master.'
     "Of course I know why you're here!  Duuuuuuuuuuuuuh!"  He
whacked his right hand limply against the chest of his
horizontally-striped T-shirt.  "You wanna find out more about
Gross Sword!  Well, you little twit, I know _everything_ there is
to know about him!!"
     He thumbed rapidly through the pages in his hand and whipped
out a yellow-orange piece of parchment adorned with beautiful ink
illumination and ugly pencil scratches.  "Do you recognize
_this_?!" he thrust it in her face.
     Ridiculous Sword's eyes tried to widen (but couldn't, of
course).  'My character sheet!'
     "Exactly," his mouth grew into a sinister grin.  "I control
your character sheet.  I control . . ." he began the teensiest of
rips along the top edge, ". . . your destiny!"
     Ridiculous Sword felt a terrible pain run across the rift on
the top of her head.  She was having a splitting headache.
     "Feels terrible, doesn't it?" the Dungeon Master chortled.
"You see, I know about all the ways you've been stretching the
rules.  I --"
     "Honey," a distant feminine voice interrupted from beyond
the door, "Your dinner's ready!"
     "Aw, mom!" the D.M. yelled toward the door, putting the
character sheet down, "I'm talkin' with Ridiculous Sword!"
     "Well, hurry it up," the phantom voice replied.
     The Dungeon Master turned back to his hapless audience of
one.  "As I was saying, I know about how you wear five, ten, or
even fifteen magic rings on a single hand.  I know about your
percentile dice that are marked with zeroes on all the faces.  I
know about how you can buy magic items on the black magic market
at cost.  I know how you change character classes not once, but
ten times.  I know," his voice tried to grow more impressive,
"How you kill centaurs and take their four one-million-gold-piece
gems!"
     'So you want us to stop doing all that, is that it?'  She
would have shivered nervously if she could move.
     "Stop it?  Are you kidding?  _I_ was the one who _let_ you do
all that in the first place!"  He thrust a finger right
underneath her dull metal nose.  "So that means you _owe me,
doesn't it!  I let you types get away with _plenty_!  And you know
what?  It was getting _boring_!  That's right, boring as Hell!  Or
as the Abyss, or as Tarterus, or as whatever other plane you want
to use in a sentence!  Why do you think I let Gross Sword get 80
million experience points and be a chaotic-evil killing machine,
huh?!  For _play_ balance!!"
     'So _that's_ why we couldn't hit each other when we were
fighting, even though all our weapons had the final word power.'
     "They do?"  He picked up one of the sheets just beneath her
character sheet.  "Wait a minute, they do, don't they?  So that
would mean that each of you should have hit each other after the
other person attacked.  I played that wr-- er, uh, I mean, of
_course_ that's why I did it!  I'm the Dungeon Master!  I couldn't
have let you kill each other then because, because . . . uh . . .
because I still wanted Tiamat to die!"
     'But Tiamat's still --'
     "Er, Bahamut, I mean!  Yeah, that's it, I had to have Gross
Sword kill Bahamut!"  He picked her up off the white landscape
and brought her to his eye level.  Ridiculous Sword's robe of
eyes told her that the white landscape she'd been standing on was
actually a tremendous sheet of parchment atop a huge folding
table.  "And _you_ can't do anything about it!"  He turned her to
face the circular receptacle standing in the corner.  She'd
already scanned it with her x-ray vision and knew it was full of
crumpled documents.  "There's where Sick Sword is now!  See?  I
tore her in half!  Nyaaah!  Your mom is _DEAD_!  Dead dead dead
dead dead!  And I burnt her character sheet, so that not even
Scotch tape could bring her back!"
     'Er, Scotch what?'
     "_SHUT UP, YOU STUPID PUKE_!"  And with that curse, he hurled
her back down at the white landscape.
     She hit the ground so hard, in fact, that her spirit got
jarred loose from the metal statue and she continued to fall
through the table and into the darkness beyond.
                                #
     What she emerged into looked like the Astral Plane.  It
wasn't the Astral Plane, though, as anyone who had really been
there could tell you.  It was, in fact, the Prime Material plane;
yet she was not on Central Earth.  She was on her _way_ to Central
Earth, though.  She found that out right quick, yessirree.  Just
as soon as she saw the big blue-with-white-cloud-specks disk rush
toward her at a relativistic speed.
     Instantly, she kicked in her permanent double-strength
potions of flying and levitation as her ring of earth elemental
command automatically engaged its feather falling power.  That
barely made a dent in her speed.  The next instant she hit
Central Earth's atmosphere and would have burnt to a cinder (or a
plasma) if not for Artifact Prime Power DD.  That slowed her down
somewhat, but not enough, she calculated, to smack her into the
ground subsonic.  She thought about teleporting upward to give
her more time to slow down, until she remembered that the $#@!ing
rules didn't allow her to teleport anyplace where there wasn't a
solid surface.  She watched helplessly as Central Earth rushed up
to greet her.
     The cloud layer zoomed toward and past her in the space of a
heartbeat.  A normal heartbeat, that is, not the heartbeat of a
disgusting character under the influence of a permanent potion of
speed at twice normal strength.  She could see the gridlike
division of landplots beneath her now -- they reminded her,
ironically, of the blue lines on the Dungeon Master's map.  The
continental outline and the land patterns made her destination
clear: she was hurling down just outside of town, aimed straight
for her mother's small keep from whence she'd gone to visit the
D.M. in the first place.  She wished she had time to scan the
castle with her x-ray vision, just to see whether or not her
physical body was still in there.  Just to see if this wasn't
some terrible falling nightmare she was going to wake up from in
a cold sweat.  But the wind and the pressure and the heat all
felt far too real to her for it to be a dream anyway.  And there
wasn't a damned thing she could do to save herself from the fall.
     The next instants flew by all too quickly.  She saw the keep
explode into her visual field, saw the east parapet heading
straight toward her, heard the loudest stony screech as her sight
blacked out, and felt an impact akin to someone hitting her with
a pillow the size of the astral plane.  She opened her eyes some
six million microseconds later, and glimpsed clear blue sky
pierced by a dark gray castle tower.  A bird's cheerful midday
song accompanied the hurried approach of human -- or at least
half-human -- footsteps.
     "Ridiculous Sword!" Ringman's voice neared from around a
corner.  "Are you still alive?!"
     She craned her stiff neck forward and managed to look at
Jimmy's astonished face.  She smiled weakly at him.
     "You musta been going supersonic when ya hit the ground!"
Jimmy relayed.  "How come you didn't get splattered into a
zillion pieces?!"
     She glanced to her left at the outer stone wall of the
castle seven-odd feet away from her, and understood.  She smiled
at Jimmy again and pointed at the masonry.
     "Huh?" Jimmy huhed.
     "Oh, I get it," Disgusting Sword said, appearing virtually
from out of nowhere.  "You didn't take any damage because you
fell within eight feet of a wall."
     Ridiculous Sword made the O.K. sign, as if to say "perfect,"
and slumped back flat onto the ground.  This whole experience had
just about taken everything out of her.
     Ringman arrived and knelt beside his second daughter.  The
next moment, when he realized that she'd come through totally
unscathed (as usual), he asked, "What did you find out?"
     "Yeah!" Jimmy enthused.  "What'd the Dungeon Master look
like?!"
     Ridiculous Sword exhaled deeply.  "He is the most nasty,
ruthless, egotistical, self-righteous, manipulative being it has
ever been my displeasure to meet.  It makes me sick just to think
that I'm living in _his_ multiverse."
     Disgusting Sword blinked uncomfortably.  "So did you find
out anything about our dear, beloved brother?"
     Ridiculous Sword nodded solemnly.  "Uh huh.  I know why the
D.M. wanted him to get away with being a chaotic-evil brat for so
long.  And I know what I have to do. . . ."








                             PART FOUR

     Sick Sword's memory still haunted Ringman like Isolde's did
Tristan.  Like Juliet's did Romeo.  Like Thisby's did Pyramus.
Like Rock Hudson's did Jim Nabors.  Like --
     "Enough, already!" Ringman sneered.  "We get the picture!"
     Homer the brownie rode in back of Ringman on his warhorse,
as usual.  Disgusting Sword and Ridiculous Sword floated through
the air next to them.  Peter Perfect rode his own warhorse aside
Ringman's, holding the reins stiff-armed.  The horse seemed a
little uneasy about this whole setup, as did Prometheus.  Jimmy
lagged a little behind everyone else (staying clear of the
horse's trail, of course), swishing the Sick Sword menacingly
through the air.
     "So what's this big plan of yours, R.S.?" Jimmy asked.
     "Yes, Ridiculous," Ringman inquired, "I'd also like to know
what we're about to get ourselves into, so I can decide whether
or not I should be afraid of it."
     "Well," Ridiculous Sword began, "The first thing we've got
to do is lure Gross Sword back out into the open.  That's why
we're heading for The Great Big Clearing That Happens To Be Even
A Little Bigger Than The Clearing Sick Sword Built Her Keep In."
     "Ah," Ringman ahed, "So there won't be any innocent
bystanders for him to hack up."
     "No, just to give us some maneuvering room.  Oh, by the way,
I just remembered: Ringman, you've gotta upgrade your ballista.
Plus 1 won't hit anyone protected by a double-strength potion of
invulnerability."
     Ringman buried his face in his right gauntlet.
     "Aw, don't bother him about it," Disgusting Sword told her,
"Peter Perfect doesn't have a spoon of stirring anyway.  So, tell
us more about your plan."
     "Why don't _you_ tell 'em, sis?"
     "_I_ don't know your plan."
     "But you can read my mind."
     "Not when you always have a mind blank spell up."
     "Oh, all right," Ridiculous Sword acquiesced.  "Anyway, we
get Gross Sword to come to us.  Disgusting Sword and I will keep
him occupied by meleeing him and not hitting.  Meanwhile, he'll
keep _us_ occupied by meleeing us and not hitting.  And then," she
pointed to Jimmy, "You hit him with Secret Weapon XJ-46."
     "Right," Jimmy grinned, instinctively moving his left arm
behind his back.
     Quizzically, Ringman looked behind Jimmy's back.  All he saw
was a left hand clutching air.  Then the paladin fingered his own
torso and decided, 'I think I'd better keep this Invulnerable
Coat of Arnd on for the duration.'
     "And that's the whole plan?!" Homer complained.  "Hit him
with Secret Weapon XJ-46?!  No escape routes, no back-ups, no
ideas of what to do if Gross Sword's still alive _after_ your big
lollapaloozer hits him?!"
     "Oh, he probably _will_ be still alive after he's hit.  I've
already thought of that."
     They reached the geometric center of the clearing and
stopped.  Ridiculous Sword solemnly declared, "The time is
right."
     "Uh," Ringman interrupted, "Don't we have to wait for the
three suns to align or something?"
     Ridiculous Sword grimaced at him.  "Central Earth only _has_
one sun!  Sheish, for a paladin you sure have a weak stomach!"
     "You ready?" Disgusting Sword asked of everyone (but of
Ridiculous Sword in particular).
     Ridiculous Sword nodded matter of factly.  "I'm ready."
     Jimmy smiled like a little boy hiding a secret.  "I'm
ready."
     Ringman and Homer blinked at each other.  "We're not ready."
     "Good, we're all in agreement then," Ridiculous Sword
declared.  She raised her horn of blasting into the wind, and
yelled through it: "GROOOOOOOOOOOSS Sword!  Come out come out
wherever you are!"
     The clear-blue sky seemed to rumble a reply as Ridiculous
Sword put her horn away and both she and her sister began to cast
the same spell.  What spell it was they were casting, no one but
they had any idea.  Homer the brownie, suddenly aware of his
vulnerability in only having four hit points and a _positive_
armor class, ran around behind Ringman's warhorse and blended in
with the surroundings.  Peter Perfect, of course, just sat there
stiff-armed on top of his horse.  Ringman drew his (merely +5)
holy longsword and raised his shield.
     The air felt tense.  Very tense.  Ringman probably could
have drawn a spark by touching metal if he wasn't grounded to his
armor.  He wished to his deity that his daughters would hurry up
and finish whatever spell it was they were casting.
     Then, he saw it.  So did everyone else, for that matter; it
was rather hard to miss.  Six seconds ago the sky had been pure
azure, but now it was dominated by a single gigantic, swirling,
black cloud reaching all the way to the ground.  And into the
center of the Great Big Field, out of the cone of this cyclone --
no, hurricane was a better word -- dropped the single most
powerful force of chaotic-evil in the multiverse.
     And flanking him at ten yards intervals dropped four twelve-
foot-high humanoid machines.
     "Golems!" Ringman gasped.  Ridiculous Sword or Disgusting
Sword could have told him that, of course, but they were still
busy saying magic words and waving their arms around.  This
scared Homer even more, and even Jimmy and Ringman's warhorse
began to get lumps in their stomachs.  (Though Peter Perfect, of
course, just sat there in the saddle with his arms out stiff.)
These golems were big, and broad, and dark-colored, and noisy.
Very noisy.  One solid, clanking step from any of them could set
off a fault line.  Ringman had a slight feeling that he was
outclassed.  "Uh . . . Ridiculous Sword . . . Disgusting Sword
. . . could you hurry it --"
     "Ha haaaaaah!" the boy in the middle gloated, drawing
attention back to himself (as well as the Gross Broadsword and
the Gross Hand Axe).  His sandy brown hair framed a dark, hidden
fury within his eyes, but the whole of his expression drowned in
his sinister, sickening smile.
     It was then that it dawned on Ringman: _this_ was his son.
This was the first time he'd ever so much as _seen_ his own boy.
It was also the first time Gross Sword had seen _him_ for real,
even though he had probably spied on Ringman countless times with
a crystal ball or a mirror of mental prowess or whatnot.
     "So, father," the sinister smile mused as Gross Sword pulled
out card number ten from the Villain's Collection of Commonly
Used Sayings and held it up to display: "At last we meet."
     He tromped with painstaking slowness toward Ringman, Gross
Broadsword in right hand and Gross Hand Axe in left, relishing
the ever-increasing look of horror on his father's face.
Perhaps, some dim flicker of conscience told him, he should be
paying more attention to his goody-two-shoes sisters; but they
were no threat and this paladin was far more entertaining.
     The holy sword quavered in Ringman's hands.
     And at that moment, Ridiculous Sword and Disgusting Sword
finished their spells by casting their hands toward the sky and
crying the activating phrase, "TEMPUUUUUUUUUUUUUS FUGIT!"
     If you thought the Sick Girls could move fast before, you
would have been flabberghasted to see them now.  Their normal
running speeds, which were already only slightly under mach five,
now increased SIXFOLD to a monstrous 30 720 feet per second.
They could move six times as fast, attack six times as fast, cast
spells six times as fast, and even think six times as fast.  This
was the awesome might that Tempus Fugit had bestowed upon them.
     Gross Sword looked through his robe of eyes' rear eyes at
the two human cyclones now approaching him.  "God IV!" he gasped.
"How could I have overlooked such a powerful spell!"
     Ringman wiped his brow, grateful that his murderous son's
attention had been drawn from him.  He stopped relaxing, though,
when he realized that the four golems hadn't been so distracted.
     Gross Sword assessed things as quickly as he could manage.
Ridiculous Blur and Disgusting Blur would probably use their
speed to try and feint past his defenses.  He would have to keep
his guard up more now than ever before in his life.  The only way
he could hope for better-than-average odds of survival would be
to . . . <cringe> . . . PARRY -- without attacking!  He swallowed
his pride and went on the defensive.
     Ridiculous Sword reached him first.  She had been nearer to
him when she'd finished her spell.  Gross Sword crossed his
broadsword and hand-axe and readied to kick in his helm of
teleportation if it came to that.  And then, when Ridiculous
Sword closed to within ten feet of him, she . . . she _slowed
down_!  She slowed to her usual ridiculously-fast pace, instead of
the unbelievably-fast pace she'd just had.  Puzzled but
delighted, Gross Sword looked at Disgusting Sword, and found that
she had slowed down to below hypersonic as well.  And his father
behind him, and the four golems -- they looked to be moving six
times more lethargically than they had any right to.
     _Now_ he remembered.  Tempus fugit affected everything within
ten feet of its caster, friend or foe.
     Ringman hardly noticed his son's and daughters' little
skirmish; twelve feet of mindless metal was about to pound him
into the ground like a tent peg.  He would have to hit it first.
He charged up the few remaining yards to the behemoth, shouting
to drown out his fear, and rammed his holy sword toward its metal
belly.
     He was in mid-swing, too late to stop the momentum of his
blow or the momentum of his thoughts, when he realized exactly
what _kind_ of metal this golem was made of.
     The sword's tip impacted into an impenetrable wall.  It
arched under the weight of Ringman's thrust, protested, and
finally snapped in two.  The upper half of the blade clattered
down soundlessly against the grassy earth.  Ringman stared in
horror at the half of a sword remaining in his right hand, then
slowly turned to the golem and exclaimed, "You have broken what
could not _be_ broken!"
     "I am pure adamantite," the golem replied.  "That is a +6
substance.  Your holy sword was only +5.  That was why it broke."
     Ringman nested his face in one hand and shook his head.
     "This has been a recorded announcement," the golem finished,
and smashed down on Ringman so hard it knocked him to the ground.
     Ringman rolled out of the creature's way and stood up.  Just
being stepped on by that thing would probably squish him,
mithral-alloyed armor and all.  The adamantite golem stumbled
harmlessly by, leaving six-inch-deep footprints.  Ringman figured
he might be able to keep its attention for a few minutes, but
then it might lose interest and turn instead on Homer or Jimmy or
his warhorse.  He needed to down this thing, and he needed a +6
weapon to do it.
     He looked over at Jimmy.  _He_ had a +6 broadsword.  He was
also using that +6 broadsword to fend off one of the other three
adamantite golems.  Ringman certainly couldn't take that sword
from Jimmy, even if he _could_ stomach taking the Sick Sword into
his hand again.  Ridiculous Sword and Disgusting Sword also had
+6 broadswords -- and +6 daggers, and +6 longswords, and +6 hand
axes.  And all eight of them were either in their hands or
dancing in the air to keep Gross Sword's attention.  And Gross
Sword probably wouldn't be willing to forfeit any of his +6
weapons to Ringman just yet.
     Where on Central Earth could he find a +6 wea--
     The green glow from Peter Perfect's hip almost seemed to
respond to his thoughts.  That poor-excuse-for-a-holy-sword _had
told him that Peter Perfect had paid the extra 20 000 gold pieces
to upgrade it to +6. . . .
     "No," Ringman convinced himself aloud.  "No.  No way.
Un-uh.  No.  Absolutely not."
     The golem clanked toward him again.
     "Oh hell," he said, reached over, and drew the +6 sentient
holy avenger longsword from Peter Perfect's sheath.
     The sword was as perky as a +6 holy puppy dog.  "Ringman,
old buddy old pal old pal old pal!  So ya finally changed your
mind!"
     Ringman pointed a threatening finger at the sword.  "One
snide remark, Prometheus, and I'll find a way to break _you_,
too!"
     Prometheus shrugged in that way only holy swords can.  "My
personality score's higher than yours."
     The golem was nearly upon them.
     "Fine," barked Ringman, "For now just do what you do best!"
     "I thought you'd never ask," Prometheus replied and, in
concert with Ringman's strong right arm, rammed its tip right
through the adamantite golem's belly.
     "Ouch!" the golem commented.
     Ringman yanked the sword out of his opponent and swung
again, making a deep gash in the metal giant's side.  It was hurt
pretty badly now.  "Two attacks per minute," Prometheus
commented.  "I'm impressed."
     "New paladin rules," Ringman replied as he deflected another
swing of that adamantite arm with his +4 shield.  "Longsword
happens to be my weapon of choice."
     Ringman hacked twice at the behemoth again.  This mountain
of adamantite was doomed to fall, Ringman could be sure of that.
     Nearby, Jimmy was disposing of his adamantite golem in
classic fashion.  He couldn't attack as often as Ringman could,
since he was only first-level, but with the Sick Sword in his
hands he could hit just as hard, if not 10 damage points harder.
     The third and fourth golems, surprisingly, were already
mangled heaps of metal filings lying on the ground.  Disgusting
Sword figured maybe she didn't need both her Disgusting Dagger
AND her Disgusting Broadsword hacking futilely at Gross Sword at
the same time, so she sent the dagger off to tackle the golems
during one of its four-minute "dancing" episodes.
     All this time, Gross Sword and the Sick Girls had been
hacking at each other and at each others' dancing weapons with
absolutely no result.  Gross Sword could have sworn that
Disgusting Sword had only been armor class -27 last time he saw
her, which was certainly a weak enough A.C. for him to penetrate.
     "I could have sworn you were only armor class -27 last time
I saw you, Disgusting Sword," Gross Sword said, breaking their
silence.
     "I was," Disgusting Sword told him as she parried and
riposted.  (Her riposte missed, of course.)  "Look at my stones."
     Gross Sword quickly counted and assimilated the tiny baubles
whirling around Disgusting Sword's head.  Sure enough, there were
eighteen dusty rose stones in orbit about her that hadn't been
there before.  "Oh," he said, "I see.  Eighteen +1-protection
ioun stones to bring your armor class down to -45.  You're almost
as cheap as I am."
     Jimmy chopped down on his golem for the final time.  The
humanoid lump of adamantite gave a non-descript grunt and keeled
over.  "All right!" Jimmy cheered.  "I got one!  I . . . uh . . .
I . . . IIIIiiiiIIIIIII -- AAAAAGH!"
     Jimmy too keeled over, holding his stomach.  He looked like
he was about to explode.  Ringman saw this and rushed to his
side, taking off his gauntlets in case he needed to lay on his
hands.  "What's wrong, son?!"
     Gross Sword glanced over at him when he heard that.  But it
wasn't he who his father was asking, merely Ridiculous Sword's
new playmate whom Ringman had fleetingly called "son."
     Ridiculous Sword looked over at Jimmy and smiled.  She knew
what was going on.
     Jimmy, unfortunately, did not.  He felt like the time his
strength had suddenly climbed from 18 to 18/00, only about a
hundred times worse and in all the wrong places.  He shook, he
held his throbbing temples, he bubbled over; he imagined himself
turning inside out.
     When at last the feeling ebbed and his stomach returned to
his belly, he noticed the last fading traces of a bluish aura
around him.  He would have noticed it while he was changing,
except he had more important things to worry about then.
     "That adamantite golem got you 26 700 experience points,
Jimmy!" Ridiculous Sword called out.  "Welcome to level five!"
     "Oh no," Jimmy shook his head.  This was just too much.  He
was grateful that he had a migraine headache so that he could
hold his head and feel something familiar.
     Gross Sword's Gross Swords clanged and clashed against
Disgusting Sword's and Ridiculous Sword's invincible defenses.
His airborne dancing weapons parried theirs like bats out of the
Abyss.  There must be some way to end this stalemate, Gross Sword
figured.  There must be some power, say, that his weapons could
drum up.  His broadsword, his hand axe, his long sword, and his
dagger were all +6 unholy dancing defender flame-tongue frost-
brand anti-sun blades of wounding, sharpness, throwing,
thunderbolts, life stealing, venom, contradisruption, all dragon
slaying, speed, final w--
     "Hey, WAIT A MILLISECOND!" Gross Sword barked.  "How come my
weapons' Final Word power never kicked in?!?"
     "I was waiting for you to mention that," Ridiculous Sword
said with a wide grin.  She cocked her right arm back, put every
ounce of Atlas Strength she had into the swing, and hacked a
mighty blow at her nemesis with the Ridiculous Broadsword.  Gross
Sword threw everything he had into the sword's way -- even his
weapons' full defender abilities -- but it couldn't stop the
blade.  Razor-sharp adamantite tore across his abdomen like
thunder, boosted by the limitless strength in Ridiculous Sword's
arm and the Bracer of Irresistible Damage around her left wrist.
When the smoke cleared, Gross Sword was down 330 hit points.
     "AAAAAAAAARRRRRRRRRRRGGGGHHHHHHHHHHHHHHHHHHHHHH!!!!!!!!!!!!"
Gross Sword wailed.  He backed up, blinded by a searing pain like
he had never felt before in his life.  His eyes were full of
reflexive tears when he looked back up.  "How in the name of
Demogorgon's ghost did you _do_ that?!!"
     "Easy," Ridiculous Sword explained.  "I had a feeling the
Dungeon Master would forget about our weapons' Final Word powers,
just like he did the last time we fought.  I was just waiting for
you to remind him."
     "The Dungeon Master . . ." Gross Sword's words flowed out as
slowly as pitch.  "The Dungeon Master . . . forGOT?!?"
     Ridiculous Sword merely half-smiled back.
     "Then . . ." Gross Sword figured, "Then . . . my swords'
Final Word powers should work on YOU, too!"  He started to swing
his broadsword.
     "Maybe," Ridiculous Sword replied, turned around, and ran.
"But you have to catch me first!"
     Gross Sword gave chase.  He ran after her for nearly a tenth
of a second before he realized that she was outdistancing him
six-to-one.  Damn it, her "tempus fugit" field moved _with_ her;
when she ran away, she left Gross Sword out in the cold.  And
Disgusting Sword had already put a fair distance between herself
and her dear little brother.
     Gross Sword sheathed his broadsword and his hand axe.  "I
can fix _that_," he muttered.  He inhaled deeply, wiggled his
fingers, and began to chant.  The chant was an illusionist spell;
a fifth-level illusionist spell.  He had memorized tempus fugit
just like his sisters had.  He just hadn't been sure of what the
spell could do, that was all.
     A sword and a dagger buzzed through the air toward him at
blinding speeds.  They were Ridiculous Sword's.  Damn her dancing
weapons.  One hit from one of those things, backed up by her
Bracer of Irresistible Damage, would be enough to finish him off
in his current state of health -- he only had 279 hit points
left.  There was nothing he could do except abort his spell and
run backwards until he was out of the dancing weapons' 30 yard
range.
     So reasoning, he aborted his spell and ran backwards until
he was out of the dancing weapons' 30 yard range.
     Disgusting Sword wasn't about to let him out of her clutches
so easily.  After all, the old Grosser might still have another
tempus fugit spell memorized.  She ran around behind him and
charged with her dancing +6 holy longsword of wounding and her
dancing +6 holy hand axe of wounding.  Gross Sword saw the
disembodied weapons coming (he _was_ wearing a rode of eyes, after
all) and parried them with the Gross Broadsword and the Gross
Dagger.  The weapons didn't stand a chance of hitting -- poor old
Disgusting Sword was born too soon to put the Final Word ability
on her toys -- but still they hacked and thrusted and slashed six
times faster than they had any right to.
     "What gives?" Gross Sword said, fending off her dancing
weapons.  They had certainly been confusing the hell out of him
all this time.  "Your dancing weapons aren't inside of a tempus
fugit field!"
     "They don't have to be," Disgusting Sword called back.
"Dancing weapons fight with exactly the same expertise and power
as their wielder.   And since _I'm_ in a tempus fugit field . . ."
     Gross Sword slapped a palm over his face (while still
parrying with the other hand, of course).  "That has to be the
most ridiculous distortion of the rules I've ever heard of!" he
exclaimed.
     Ridiculous or not, it was there, and being implemented; and
any second now Ridiculous Sword's weapons could catch up with him
and deliver the Final Word.  He was at a dangerous disadvantage.
There was only one option open to him.  He grit his teeth,
swallowed his pride (which was a very large gulp), and declared,
"Tactical advance to the rear!"
     Then he teleported.
                                #
     Or at least he tried to teleport.  Neither the Ether nor the
Astral Plane would accept him.  He bounced off of the fabric of
the multiverse in a purplish haze, and snapped right back to his
point of origin.
     "WHAT?!?" Gross Sword winced.
     Ridiculous Sword grinned.  "You don't think we chose this
particular clearing by accident, do you?  Certain areas of
Central Earth, such as this place and the Cracks of Doom, are
inherently teleport-proof.  You've just walked right into our
trap."
     Gross Sword grimaced, then pulled out his last ace.  "Oh
yeah?" he breathed, "Well, there's one other trick I have left."
He grinned.  "Which you didn't count on."  He moved his hands to
the sky, and his sisters recognized the gesture.
     "OH NO!" the Sword sisters gasped in unison.
     Gross Sword snickered evilly, finished his somatic
components with a groin thrust, and chanted the mystic words,
"ANTI-MAGIC SHELL!"
     Ringman stared on in awe as an invisible sphere 49 feet
across englobed his son.  Even _he_ knew what that spell could do.
No magic item would function within its confines -- not a single
one.  Nor would any of the Sick Kids' permanent spells.  However,
Ringman _did_ recall his dearly departed Sick Sword once saying
something about --
     "Artifacts!" he yelped, pointing at Gross Sword.  "Your
artifacts can still work inside the shell!"
     Ridiculous Sword, Disgusting Sword, and yes, even Gross
Sword all turned to their father and grudgingly told him, in
chorus, "Not any more they can't."
     Ridiculous Sword beamed him a telepathic picture of Dragon
and Dragrace's latest issue, page 23, paragraph 3.  The paragraph
read:  "I, the Dungeon Master, the most lordly and highest
creator of all the multiverse, and the most incredibly omnipotent
of any of you jerk-offs out there, hereby declare that anti-magic
shells will now stop the effects of artifacts and relics, as well
as the effects of non-artifact magic items, like they were
supposed to do in the first place.  Furthermore, magic potions
imbibed before the anti-magic shell touches the imbiber will
function normally.  IN NO WAY IS THIS STATEMENT TO BE ASSUMED AN
ADMISSION OF DUNGEON MASTER ERROR!"
     "Oh," Ringman shrugged.
     The scene fell silent.  Gross Sword had summoned in the
ultimate defense.  "Ha HA," he chortled chaotic-evilly, "My
defensive powers still work, but your offensive powers do _not_!
Your little trick hasn't availed you at all, my _dear_ sisters!
And now that I know about this spot and about tempus fugit,
you'll never be able to trick me again!  BWA ha ha ha haaaa!!"
     Jimmy shook his head and looked at Ringman, who was standing
less than ten yards away.  "I dunno . . . it's that evil laugh
that gets me."
     That evil laugh . . . that old bwa-ha-ha.  That was
something Peter Perfect had _always_ wanted to do.  If evil
laughter wasn't prohibited by that darned code of paladinhood,
he'd . . . he'd . . .
     Something snapped.  Something that only Peter Perfect could
hear.  It was no louder than a blade of grass dying of thirst, or
a bottle of fresh milk evaporating, but it was like thunder
compared with the boundless silence that had been numbing Peter
Perfect's consciousness.  That evil laugh had brought him to the
surface, and allowed him to make another saving throw against the
charm he was under.  And this time, with the help of the magic
items the Sick Sisters had given back to him, he made it.
     He felt his warhorse's familiar adamantite saddle underneath
him; the saddle sores felt welcome indeed.  He surveyed his
situation.  Gross Sword was chortling up a storm inside of an
anti-magic shell the way Peter had always wanted to do.
Ridiculous Sword and Disgusting Sword were standing there,
pondering their next move.  Jimmy was holding the Sick Sword in
his right hand and concealing his left behind his back, and
pretending to be something more than he was.  Homer the brownie
was hiding behind Ringman's warhorse.  And Ringman, staring in
awe at the fray (or lack thereof), was wielding his own dear
Prometheus!
     He was about to charge over and snatch the holy sword from
his rival's hands, but his combat sense stopped him.  The Sick
Kids would mash him to bits if they knew he was up and around.
He couldn't let them know.  He put his arms out stiffly in front
of him, as they had been when he was charmed, and hoped that
Ridiculous Sword and Disgusting Sword were too busy to tune in to
his wavelength.
     'Prometheus!' his thoughts cried.
     Startled, the holy sword twitched in Ringman's hand.
Fortunately for Prometheus, Ringman was too preoccupied to
notice.  'I hear you,' the longsword transmitted telepathically.
     'When I tell you too,' Peter Perfect continued without
flinching, 'Leap into my hand.  _When I tell you to_.'
     'Gotcha,' the sword replied.  'It's nice to hear from you
again.'
     'Yeah, yeah, whatever.'  Neither of the Sick Girls turned
their attention to him.  Good.  He watched, and waited.
     Gross Sword raised his voice.  "I demand one billion gold
pieces, in small coins, and safe passage out of this land!"
     "Gold pieces?" Ridiculous Sword asked.  "What would _you_
want with money?"
     "Oh yeah," Gross Sword corrected himself, "That was just
something I heard on one of those old late-night precognitions.
But I _still_ demand safe passage out of this land!  Or I'll kill
each and every living thing within thirty miles, and you won't be
able to stop me!"
     "Oh, we won't, will we?"  Ridiculous Sword's grin grew as
wide today as it ever would.  "Jimmy, it's time!"
     Jimmy almost lost control with excitement.  He pulled his
long-concealed left hand out from behind his back to reveal:
"Secret Weapon XJ-46!" he yelled, glinting the secret weapon in
the sunlight.  "A BALLISTA OF AUTOMATIC MISSILE FIRE!!!"
     Disgusting Sword and Ridiculous Sword whipped out their
Ollamh Harps and strummed an incredibly triumphantly dramatic
chord.  Jimmy continued, "And ballista targets --"
     And now everyone joined in, except for Peter Perfect who was
still pretending to be charmed, "-- ARE ARMOR CLASS TEN IF
EXPOSED TO SIGHT!"
     Gross Sword cringed at the oversized crossbow sitting on
Jimmy's shoulder, at the chain feeding into it.  Each link of
that chain held a missile the size of a javelin with the punch of
a small house.  He wanted to fireball that kid as fast as he
could.  Or iceball him, or lightningball him, or sonicball him,
or whatever he wasn't immune to through the Sick Sword he carried
in his other hand.  But to launch any such attack on him, Gross
Sword would first have to lower his anti-magic shell -- and that
would leave Ridiculous Sword's final-word weapons open to reduce
him to chowder.  There had to be some other way for him to remain
invulnerab--
     "Ha HAAAH!" Gross Sword suddenly recalled, "My permanent
double-strength potion of invulnerability isn't affected by the
anti-magic shell!  You still need a +2 or better weapon to hit me
with, but since every weapon that comes near me gets rendered
non-magical, you won't be able to hit me at all!!"
     "Not so!" Jimmy replied in the most majestic tone of voice
he had ever used.  Ridiculous Sword had planned for just such a
come-uppance, and had given him one final contingency.  "Your
invulnerability requires your opponents to have a weapon of at
least +2 _OR_ hit dice of 6+2 or greater!"
     Gross Sword shook a finger at him.  "No no no no!  I've read
page 75 of the Book of Infinite Wisdom myself, and the footnote
specifically states that 'This does not apply to characters of
any sort'!"
     Jimmy grinned.  "But it _does_ apply to monsters."  He flexed
his neurons in concentration, and kicked in his permanent potion
of polymorph (self).  A startling transformation occurred.  Two
seconds later, he stood before his gross foe as . . . a hill
giant.
     A hill giant with a ballista of automatic missile fire.
     A hill giant with eight hit dice (plus one to two additional
hit points).
     "A character with lots of hit dice might not be able to hit
someone who's invulnerable, even if he's shooting at him with a
ballista," Jimmy explained in a hill-giantish voice, "But a
_monster_ with lots of hit dice firing a ballista at him can!"
     He pulled the trigger, and tore the sky apart.  The weapon's
catapult-string twanged back and forth, accepting and releasing
its javelin-sized loads, with an unearthly speed all its own.
Shot after shot filled each deadly second with over a dozen
missiles, none of which failed to strike home.  Gross Sword
cringed under the onslaught as the shafts riddled his body,
ignoring his permanent double-strength invulnerability and all
common sense.
     And he couldn't heal himself.  None of his clerical healing
spells or magical wish spells or vampiric rings of regeneration
would work unless he dropped the protection of his magic-proof
sphere -- and lowering his only last-ditch defense would leave
him wide open to Ridiculous Sword's weapons' Final Word attacks.
Slaughtered or shish-kabobbed; one was hardly different from the
other.  His psionic cell adjustment ability would only heal a
couple hundred hit points of damage before he exhausted his
psionic power point reserve.  His monk ability of missile
deflection was useless against siege missiles like the ones that
were puncturing his body at that instant.  And he couldn't
teleport.
     Gross Sword was down to four hundred hit points, and
dropping fast. . . .
     Three hundred hit points.  He still couldn't teleport. . . .
     Two hundred hit points.  The supply of missiles going into
that ballista still seemed endless. . . .
     One hundred hit points.  Instinctively, he cowered behind
his own arms . . . which were also impaled.
     Weak flesh.  Weak weak weak.  All his special training, all
those experience points, all those artifacts he'd collected to
make him indestructible came to nothing now.  He was as naked as
when he was first born.  As naked as in the womb before his
birth.  As naked as when Tiamat's seed of evil had first infected
him.
     Fifty-three hit points.  He looked up, looked around for
salvation.  Jimmy's hill-giantish eyes were merciless.  His
sisters played their Ollamh lutes with mounting tension.  Only
Ringman, among the onlookers, seemed deeply concerned.  Gross
Sword's paladin father bit the knuckle of one of his gauntlets
and shook his head with impending sorrow.
     Father . . .
     Forty-five hit points. . . . Twenty-eight. . . .
     Twelve. . . .
     "_STOOOOOOOOOOOOOOOOOOOOOOOOOOOOP_!!!!!!!"
     Jimmy released the trigger on impulse.  Everyone froze.  The
music ceased.  Gross Sword's scream left a wake, a gulf of
deafening silence.
     And the mightiest force of chaos and evil in the multiverse
collapsed onto his knees and cried.
     "Mphg," he sobbed into his hands.  "Ahuc ahuc ahuc.  Wh-wh-
wh-what -- what've I done?!  WHAT HAVE I DONE?!"
     Ringman started to stride toward him, feeling urgent.
     "No no, Ringman," Jimmy warned him, "He's still dangerous!"
     "Nononononononononono!" Homer the brownie called out to the
ninth-level by-the-book paladin, shaking his head wildly with
each syllable.
     Ringman ignored their warnings and sauntered toward his son.
He took his gauntlets off within the first ten yards; then his
helmet, then his greaves, then the Invulnerable Coat of Arnd.
Armorless.  Completely defenseless.  He knelt down by his only
male child.
     Gross Sword looked up at him out of his hands, then buried
his reddened eyes right back into his hands again.  (Of course,
that didn't keep him from seeing anything, because he still had
on his robe of eyes.)  He shook his head and nearly flung off his
tears.  Then, slowly, he looked back into the eyes of his father
once more.
     He lowered his right hand.  Ringman grasped it.
     Gross Sword shook his head more slowly, with a furrowed
brow.  "Mom," he winced.  "Bahamut.  All of the people and non-
people.  They didn't deserve it.  They didn't do anything --
_anything_ -- to deserve what I did to them."  He inhaled sharply.
"WHY DID I POLLUTE ALL THEIR LIVES?!  Why . . . why in Hell's
name didn't I listen to the last generation of Disgusting
Characters when they told me about Tiamat's seed of evil?!"
     'Tiamat's evil seed,' Peter Perfect thought.  'That was my
doing.  Hah, revenge never felt so good as that time.'  All the
other onlookers were thoroughly distracted.  It was not yet time
to leap into action, but it wouldn't hurt to get into a better
position.  He nudged his warhorse ever so subtly with an
invisible squeeze from his legs, and the mount trotted, slowly
and non-chalantly, toward Gross Sword and Ringman.
     Oblivious to Peter -- and still presuming him to be charmed
-- Ridiculous Sword and Disgusting Sword also made way toward
their brother.  He saw them coming and lowered his anti-magic
shield.  More barriers were the last things he needed right now.
     "This," Gross Sword went on, pouring out more than nine
years' worth of misery, "This was all wrong.  Damn it, I only
felt satisfied whenever I did something sadistic!  And every
victory was as hollow as the ones before it!  All those people I
hurt or killed, all with lives . . . and loves . . . of their
own."
     He looked into his father's eyes.  They were nearly as red
as his own.  "Oh, dad!" he sobbed, clutching him, "Why'd I do
that to you and mom?!"
     Ringman embraced him back.  He could barely breathe
straight, his feelings so choked him.  In all senses of the
words, he had finally met his son.
     Gross Sword broke the hug and looked into Ringman's eyes
again.  Ringman nodded, weeping with joy.  "Gross Sword, I think
I can be really proud of you now."
     Gross Sword shook his head, unable to accept it.  "Proud of
a mass murderer?  A tyrant?  Proud of Bahamut's and his mother's
-- your love's -- killer?  Proud of the being . . . who could
have set the whole multiverse back five thousand years?"
     And Ringman couldn't accept that, either.  "I was proud of
you," he admitted, "From the time I first heard you were born."
     They hugged each other again, and sat that way for a long,
long time.  Of all the spectators present, Prometheus was the
only one who was the slightest bit agitated.
     'Now?' the holy sword begged, telepathically.
     'No,' Peter Perfect returned, 'Not yet.'
     'Then when?!'
     'Soon, all right?!' Peter's thoughts barked.  'Geez, you're
more impatient than I am!'
     'But I wanna kill something!' the sword pouted.
     Peter was tempted to bury his eyes in his hand and shake his
head, but that would have given him away.  He stood firm as
always, arms still out stiff, and waited.  The moment would come.
     Gross Sword loosened his tearful embrace and looked down at
his own waist.  Four adamantite belt loops jutted out from his
Bluejeans of Free Action.  These loops housed the hafts and
blades of the four grossest chaotic-evil weapons in all the
multiverse.  The Gross Hand Axe, the Gross Longsword, the Gross
Dagger and, most powerful of all, the Gross Broadsword; four
weapons devoted solely to spreading limitless evil and chaos
through whoever chose to wield them.  Their overwhelming power
had been his idea, and his alone.  Nothing, he had figured, could
withstand the might of an anti-ranger and anti-paladin who used
those . . . those . . .
     "NO!" he blurted, startling everyone there because he still
had his mind blank spell up and they couldn't read his mind.  He
stood up.  "I don't care what powers those two classes give me!
I don't . . . want . . . to be an anti-paladin or an anti-ranger
any more!"
     The heavens rebuked -- well, actually it was the Abysses
that rebuked, but you get the idea -- and Gross Sword, the only
son of Sick Sword and Ringman, gave up the powers of the anti-
paladin and the anti-ranger.
     Even Ridiculous Sword was impressed.  "Wow," she uttered,
finding it difficult to pick the right words.  "Now . . . now
you're only . . . a plain, average, run-of-the-mill psionic
druid/monk/assassin/thief/bard/illusionist/cleric/magic-user/
weapons master!"
     Gross Sword nodded solemnly, his eyes still wet.  "I know.
A terrible loss -- but no price is too high now."
     "What a guy," Disgusting Sword whispered with utmost
sincerity into her sister's ear.
     "I _don't_ want to be some unholy force anymore!" Gross Sword
continued.  "I _don't_ want to be evil!  AND I _DON'T_ WANT THESE
DAMNED SENTIENT WEAPONS POLLUTING THE MULTIVERSE ANYMORE!!"
     He snapped the Gross Longsword and the Gross Dagger out of
their loop-scabbards and hurled them to the grassy ground, where
they impaled themselves point-first in the earth.  Without
another though, he followed up with the Gross Broadsword and the
Gross Hand Axe, thwunking the broadsword into the ground just as
he had the other two weapons but hurling the axe edge-first into
the soil beside them.  He flung the Gross Pair of Gloves off of
his hands and down next to the blades, then drew the Other Gross
Pair of Gloves from their holsters and cast them away.  That was
twice he'd hurled down the gauntlet in as many instants.  He
inhaled vehemently.  "I'm gonna have you six DESTROYED!"
     The six weapons erupted in light and shone directly on their
owner.  His robe of eyes was blinded, but he wasn't, of course.
"YOU CANNOT DESTROY US," the Gross Weapons boomed together as
one.  "WE ARE ARTIFACTS.  YOU YOURSELF CREATED US AS MORE THAN
MERE SENTIENT MAGIC WEAPONS.  WE CANNOT _BE_ DESTROYED!"
     Ridiculous Sword chuckled for a few seconds, then broke into
roaring laughter.  "HA HA HA HA HA!!" she addressed the Gross
Artifacts.  "You don't think so, do you?!"  She reached into her
last portable hole, and rummaged for a tiny object.  She'd been
awaiting this day ever since her brother created those weapons in
the first place.  At last, she pulled out the one thing she'd had
prepared specifically for this event.
     It looked like one of those snap-lidded velvet cases that
diamond rings come in.  Disgusting Sword clasped her chest and
beheld the box in splendid wonder.  Ringman and Jimmy scratched
their heads and beheld the box in utter confusion.  Homer the
brownie didn't know _what_ in Sick Sword's name was going on, but
he was enjoying this whole show more and more.  The front of the
box was engraved, in block lettering, with simply, "The Ant Box."
     Ridiculous Sword flipped the box open.  "All right, you
Gross toasties!" she exclaimed.  "It's time for you to meet . . .
THE HUMBLE ANT!"
     "AAAAAAAAAAAAAAAAAAAHHHHHHH!!!!" the Gross weapons screamed.
     The centimeter-long black ant in the box lethargically
lifted its eyes up to Ridiculous Sword, and said, in that
language spoken only by ant-kind, "I think you ought to know I'm
feeling very depressed."
     She picked the ant up on her right index finger.  "Never
mind that," she replied in Antspeak, "I have a task for you!"
     "I won't enjoy it," the ant informed her.
     "I'm not _asking_ you to enjoy it," Ridiculous Sword told it.
"I just want you to step on those chaotic-evil artifact weapons."
     "<GASP>!" the Gross weapons gasped.
     "You want me to go step on some artifacts," the ant groaned.
"Here I am, brain the size of a pinhead and you want me to go
step on some artifacts.  Probably be the biggest load on my
intellectual capacities today."
     "For a humble ant," Jimmy sidetalked to Homer the Brownie,
"He sure has one pompous ego."
     Ridiculous Sword lowered the ant toward the weapons.
Disdaining his task, the ant grudgingly crawled down from her
left index finger and trudged toward its quarry.  It reached the
Other Gross Pair of Gloves first.
     "ARRRRRRRRRGH!" the gloves screamed.  "NOOOOO!  DON'T SEND
ME BACK TO THE VOID!!"
     The ant stepped.  There was a <CRACK> where its foot came
down, and in a flash of blue-white light the gloves crumbled to
dust.
     The ant looked down at his work and moaned, "I'm not getting
you down at all am I?"
     And since the Gross Pair of Gloves was nearest to where the
Other Gross Pair of Gloves had been, that was the humble ant's
next target.  He walked toward it in that way that only humble
ants can.
     "NONONONONONO!" the Gross Pair of Gloves Wailed.  "Wh-What
have I ever done to you?!"
     "I have this terrible pain down all the formic acid ducts on
my left-hand side," he said with disdain, and destroyed the
second of the Gross Weapons.
     'How does that ant manage to destroy BOTH gloves at once by
stepping on ONE of them?' Disgusting Sword wondered.
     Gross Sword smiled and nodded in revelation-like gratitude
as the ant approached the Gross Hand Axe.  The axe wasn't quite
as receptive: "Uh . . . er . . . ah, that is . . . uh . . ."
     "Call this job satisfaction?" the ant asked rhetorically,
and stepped on the axe head.  The head broke in half and released
its essence back into the etheric ocean.  "'Cause I don't."
     It approached the Gross Longsword.  The weapon shivered with
fright.  "It wasn't enjoyable at all, what with being locked up
in that box all the time," the ant told it.  "The first ten
million years were the worst.  And the second million years, they
were the worst too.  The third ten million years I didn't enjoy
at all.  After that I went into a bit of a decline."
     "B-b-b-b-b-b-b-b-b-b-b-b-ut now you're OUT of the box!" the
sword argued.  "You can get away from all this and live your own
life!"
     "_LIFE_!!!" the ant bellowed.  No one present had any idea
that an ant's voice could get that loud.  He crunched down
solidly on the blade, and broke it forever in twain.  "Don't talk
to me about life."
     Two Gross weapons remained.  The Gross Broadsword and the
Gross Dagger were all that remained of Gross Sword's old evil.
The ant approached the dagger, and the blade bargained for its
life: "Hey, ant!  Maybe we can make a deal!  Just claim me for
your own and I can give you . . . well, power beyond your wildest
imaginings!"
     "Sounds awful," the ant replied, and snapped the life out of
this blade to boot.
     'Whoo,' Peter Perfect thought.  'Some ant.  Glad Prometheus
isn't an artifact weapon.'
     And now, it came down to the Gross Broadsword.  Gross
Sword's number one weapon throughout his entire Disgusting
career.  The ant treaded his way toward its quarry as before, but
the Gross Sword didn't flinch.  It didn't cry out on fear, it
didn't beg for its life -- _it just sat there_.
     In an act of greatest contempt, the ant said nothing either
and just stepped on the blade.
     And nothing happened.
     It stepped again.  Again, nothing.  It stepped harder.
Still nothing.  The ant looked solemnly up at Ridiculous Sword
and complained, "Hmmmph.  You seem to have miscalculated."
     "Ha HAAAAAH!!" the broadsword cheered.  "I knew it!  I _knew_
it!  I was Gross Sword's favorite, you see!  I was _much_ too
valuable to have the foot of a humble ant be the means of _my_
destruction!"
     Ridiculous Sword smirked.  "You're right.  Being stepped on
by an ant isn't the way _you_ were designed to be destroyed.
_You_, Gross Broadsword, can only be destroyed --" She cast a gate
spell.  "-- by _HIM_!!"
     Through the purple glow of the gate stepped the most
monstrous humanoid being any of them had ever seen.  It towered
48 feet in the air and had skin of solid iron.  The very air
shook in his vicinity.  The being of iron stared down balefully
at the bunch gathered before him and bellowed, "WHO SUMMONS ME?!"
     Ridiculous Sword stepped forward and non-chalantly pointed
at the Gross Sword that was still on the ground.  "Step on that
artifact," she instructed him.
     The being's eyes grew wide with anger.  "YOU, A CHILD?!  You
_DARE_ SUMMON TALOS FOR SUCH A MIDDLING . . . er, such a middling,
uh . . . er . . ."  He recognized her.  "Er . . . uh . . . duh,
um . . . ooh . . . eeh . . . ah, ah, _OH, PLEASE DON'T KILL ME,
RIDICULOUS SWORD_!!  I have a wife and seventy-two hundred
children!  I'm only three thousand years old, I'M TOO YOUNG TO
DIiIiIiIiIE!!!"
     Ridiculous Sword shrugged her shoulders.  "Then step on that
artifact."
     Talos nodded meekly.  The Gross Broadsword knew what was
coming next, and it wasn't going to take it lying down.  Using
its telekinetic ability, along with its flight power and some of
its unused minutes of being a dancing weapon, the broadsword
leapt up and out of stomping range of the Triple Iron Golem.  "OH
no ya don't!" the sword barked.  "You're not getting rid of _me_
this easily!"
     Without a word, Ridiculous Sword rushed up to the Gross
Broadsword and plucked it from the air.  The sword vibrated in
her hand as it tried to escape.  "Let . . . go . . . of . . .
me."  The sword was trying to dominate her ego.  A futile
attempt, but it tried anyway.  She forced it down onto the
ground.  "Step, Talos," she said with infinite calm.
     The iron giant put its foot down on the sword.  That is, it
_tried_ to put its foot down on the sword, but the sword jerked
itself out of the way it the last instant.  Even in Ridiculous
Sword's Atlas-strength grasp it wasn't totally immobile.  Talos
stepped again, but again the sword evaded the giant iron foot.
     Everyone's attention was on Talos and the Gross Broadsword.
The time was perfect.  Peter Perfect vaulted off his warhorse's
adamantite saddle, tumbled across the ground to an upright
position, and in all the confusion made it to Gross Sword's side
before even his robe-of-eyes-assisted vision could warn him.  He
had his hand around the artifact bracelet on his left wrist and
had yanked it off before Gross Sword even reacted.
     "Now, Prometheus!" he shouted.  Ringman looked down at his
hilt just as Prometheus pulled itself free.  The sword landed
grip-first in Peter Perfect's right hand.  "HAHAHAHAHAHAHAHAHA!"
Peter guffawed.  "Now _I_ have the power!!"  And with that, he
engaged the helm of teleportation which Disgusting Sword and
Ridiculous Sword had seen no harm in leaving on his head, glowed
purple for a moment, and vanished.
     The Gross Broadsword was so stunned, in fact, it didn't even
see Talos's foot coming down, and it died in a fit of breakage.
     "M-may I go now?" the Triple Iron Golem asked.
     "Yeah, sure, sure," Ridiculous Sword waved him away, not
even bothering to look straight at him.  Talos went back through
the gate and both disappeared.
     "Peter Perfect wasn't even charmed!" Disgusting Sword said
with disgust.  "He fooled us!"
     "Yeah . . ." Gross Sword noticed.  "And how the HELL did he
manage to do what he just did in a Teleport-Free Zone?"
     "Hell," Ridiculous Sword cast a thumb over her shoulder,
"That gate I made shouldn't even have worked.  Teleportation of
ANY kind is supposed to be prohibited in this region."  She cast
her eyes skyward.  "_But I guess the DUNGEON MASTER forgot about
that little detail_!!!"
     The skies rumbled once more, and a searing blue bolt of pure
damage hurled down from the heavens and struck Ridiculous Sword
squarely.  None of her magic items of protection could defend her
from that murderous bolt, as it was thrown directly from the
Dungeon Master's hand.  Ridiculous Sword's body lay there in a
fried heap.
     "Ridiculous Sword!" Ringman screamed, and knelt down beside
her.  "OH, MY DEITY!"
     And then, ten seconds after her death occurred, Ridiculous
Sword stirred and shook herself back to consciousness.  "Mmmm, hi
dad," she said.
     Ringman scratched his head in utter confusion.  "But . . .
but how did --"
     "Easy," his younger daughter told him, propping herself up
on her elbows, "I was dead, right?  Sent to Heaven, right?  Well,
all I had to do was cast a raise dead spell on myself and POOF,
here I am!"
     "This is one Hell of a crazy multiverse," Ringman mumbled.
"Hey," he noted, "I thought raise dead was a minute spell."
     "It is," Ridiculous Sword came back, regaining more and more
of her composure with each second.  "Tempus fugit's still up.
And we can still catch Peter Perfect."
     "But how?" Jimmy asked, joining them.  "Where did he go?"
     "Yeah," Gross Sword commented.  "I tried to pick him up on
clairvoyance just now, but all I got was snow.  He's still
mindblanked."
     "All right, then," Ridiculous Sword figured.  "If you were a
megalomaniacal paladin, what would you most want to do?"
     "Take over the world," Jimmy said.
     Ridiculous Sword winked at him.  "Right.  And if you
couldn't take over the world, then what?"
     Ringman rubbed his chin, then said, "You'd want to destroy
it."
     "Uh huh.  And that's most likely what he's set out to do."
     "Destroy the world?" Disgusting Sword puzzled.  "Before _we_
can find out about it?"
     "Right."
     Disgusting Sword had a revelation.  "Ohhhhhhhh."
     "All right," Ridiculous Sword drew a breath, "Hang on to my
coat tails, Jimmy.  You, Homer, ride with Disgusting Sword, and
Gross Sword, you take dad, okay?"
     Ringman did _not_ catch this at all.  "Wait, wait a minute.
Where are we going?"
     By the time he said "we," Gross Sword already had him on his
back and Homer and Jimmy had already mounted up.  Ridiculous
Sword leapt into the air and told him, "To the basement of the
world!"
     The clearing whooshed by beneath them.  Soon, they were
passing over forests and towns, and then lakes and finally a wide
ocean.  Ringman was still confused.  "And where is this 'basement
of the world'?"
     "Where else?" Ridiculous Sword chuckled.  "On the bottom
side of Central Earth.
     Ringman mouthed the words "bottom side," then asked, "You
mean it's _flat_?"
     "Sure!  What did you think it was anyway, round?  Hah, we'd
all fall off then!"
     "Well, that makes sense," Homer the brownie concurred.
     The ocean passed serenely beneath them.  Soon, the blue of
the sky faded to a black, velvet backdrop against which the stars
shone more brightly than they ever did at night.  They were
reaching The Edge.  Ringman pointed helplessly as the boundary of
Central Earth -- circular, but so vast that up close it looked
straight -- rushed by beneath them, and they were in free space.
     "Whoa," Ringman moaned, feeling uneasily giddy.  "Whoa, this
feels weird!"
     "We're weightless now," Disgusting Sword informed him.
"That's what happens whenever you leave the plate."
     Ringman nodded.  "I'll remember that next time I happen to
come here."
     Ridiculous Sword dipped down -- not that down had any real
meaning anymore -- and swung past The Edge.  Ringman looked
forward and saw the stars in their sphere of perfectly hard ether
swoop past; over his shoulder, the dirt and rock of The Edge
obscured more and more of the blue-capped top of that beautiful
world.  And at last, The Bottom reached his view.
     The Bottom was nothing like the blue-lit majesty of The Top.
It was in deep night now, and would be until the sun set and
passed its light from the world above to the world below.  Yet
even by the dim light of the stars alone, Ringman could make out
the contours.  It was rough and craggy, dripping with stalactites
of rock and dirt.  There was no living sound, not even the breath
of life; only a hollow echo of their swift passage through this
Other World.  The hanging peaks passed above him, and he realized
that they were, indeed, _above_ him.  Back under the plate,
gravity had returned.
     Homer, of course, merely hung on for dear life through all
of this.
     Their course hugged the mountainbottoms and aimed straight
for the other side of the world.  In this space without blue air,
the other side could clearly be seen, even though its true size
was impossible to grasp.  But it was not the opposite side of the
plate that was their goal; it was the center.  Ringman peered
with as keen an un-disgusting eye as he could manage, and saw it.
He was the first non-disgusting character in the history of
Central Earth to see it.  A tiny, tiny thread stretched down from
the center of the world and lost itself in the unfathomable
depths below.  The North Pole of Central Earth.  That was the
axis along which the plate rested, the reference point that
indicated which direction "down" was.
     "That thread," Ridiculous Sword told him, "Is called the
Thread of Gravity.  It's what generates our weight on Central
Earth.  Without that, everything would float off into free
space."
     Jimmy scratched his head.  He had only been disgusting for a
few weeks, and hadn't learned everything yet.  "So then . . .
that means that the plate itself should weigh something also."
     Ridiculous Sword nodded.  "That's right.  It does."
     "So then," Ringman interjected, "What's holding it up?"
     "Atlas," the Sick Kids said in chorus.
     Finally, it all started to dawn to Ringman.  Atlas had the
job of holding up Central Earth.  If Peter Perfect wanted to
destroy the whole world, his best bet would be to get rid of the
pillar that was holding it up.  That would be Atlas.  That was
why he took the Other Bracer of Irresistible Damage from Gross
Sword to begin with.
     The Center of Central Earth came closer and closer into
view.  Ringman could make out a tiny silhouette on the end of the
thread pushed right up against the plate.  It was a humanoid
silhouette -- no, _two_ humanoid silhouettes.  At last, Ridiculous
Sword cast a continual light spell on the nearest stalactite and
illuminated the situation in both senses of the words.
     Atlas, who was no larger than your average Greek athlete,
was still holding up Central Earth -- but just barely.  Terrible
wounds more than justified the exhaustion in his eyes and face.
His feet could barely keep their grip on the thread.  Next to the
teetering titan stood a grinning Peter Perfect, waving Prometheus
to exalt the blood that now stained it.  He had wanted them to
catch up with him, to see his moment of triumph.  Ridiculous
Sword levitated herself up to the bottom of Central Earth and
used the inverted surface to run toward him at her full running
speed.
     Peter Perfect put up a restraining hand and stepped to
Atlas's side.  Ridiculous Sword stopped herself.  Prometheus went
down so that it just covered the world-holder's throat, and the
Other Bracer of Irresistible Damage around Peter's wrist pulsed
in blue-white readiness.  "One more step, Sick Kids," the
disgusting paladin announced, "And Atlas here gets it!"
     'Hoo boy,' Ringman thought.  Jimmy's thoughts ran along the
same lines.  Homer was too frightened to think.
     Gross Sword looked him levelly in the eye.  He never did
like this poor excuse for a paladin, but now his dislike for him
was for different reasons.  "You don't really want to do this,"
Gross Sword said to him.
     Peter Perfect did a take.  "What do you _mean_ I don't want
to do this?!  Of _course_ I want to do this!!"
     "You want to destroy everything on Central Earth just
because _you_ can't have it all?" Gross Sword put to him.
     "Darned right!" Peter exclaimed.  "Stupid old world.  What
did it ever do for _me_, anyways?  And besides, you people seem so
attached to this miserable little planet, full of so much vile
filth and sin and nasty other things that we paladins are out to
destroy, that if you don't agree to give me total control over
all beings on this planet, I'll snuff out Atlas right here and
now!"
     "And what would you do with total control?" Gross Sword
pressed on.
     "What would I _do_ with it?  Why, rule over it, of course!"
     "You mean play with it as you pleased."
     "Exactly!"
     "Like a toy, whose only purpose was to amuse you."
     "Yeah!"
     "And you call yourself a lawful-good paladin?" Gross Sword
and Ringman asked at the same time.
     Peter Perfect's eyes darted worriedly to either side.  He
still _felt_ like he had his paladin powers.  Sort of.  Didn't he?
He shook his head, and with utter contempt, slashed the last
slash across Atlas's neck.  After the Other Bracer of
Irresistible Damage, his Titan Strength, the Axe of the Dwarvish
Lords' +2 weapon damage bonus, the cause-serious-wounds-by-touch
power of the Talisman of Al'Akbar, and Prometheus's own +6
magical bonus, he ended up doing 242 damage points, killing the
Titan-Who-Holds-Up-the-World instantly and inflicting temporary
paralysis on him to boot.
     And amid gaping horrors, Central Earth fell.
     No earthquake could match what happened on the plate's Upper
Surface.  No words can describe the sudden and inexplicable loss
of weight that everything thereon experienced.  On a world that
had grown up with and evolved everything it had into the concept
of _gravity_ -- for over four billion years -- freefall was simply
not within the realm of understanding.  Nor would it be for long,
as it was gravity's task also to hold the blue air to the surface
of the world.
     And as it fell, it landed on something.  Something that was
already in freefall.  Peter Perfect.  The blow was nothing more
than the force of, say, walking across a room and not stopping
before you ran into the wall.  Not enough to hurt anyone.  Not
normally.
     But the Book of Infinite Wisdom, or perhaps it was a
necessary reality-building article in Dragon & Dragrace, made a
stipulation about that.  It said that whenever a solid object
lands on somebody else, that object does a certain number of d6
worth of damage for every hundred pounds it weighs.  Central
Earth weighed six billion trillion tons.  And since there was at
least a _little_ mithral that hadn't yet been mined out of its
crust, it was considered a +4 or better weapon with regard to
what kinds of creatures it could affect.  Peter Perfect's
permanent potion of invulnerability thus rendered useless, he and
even his adamantite full plate armor were squished into an
unrecognizable bloody wet-spot a mile across.
     "Gee," Jimmy commented, "He didn't even say goodbye."
     "Yeah," Ringman noted, now in freefall himself, "But that
didn't keep Central Earth from falling!"
     "Somebody's got to catch it," Disgusting Sword commented.
     "Who'd be strong enough?" Ringman asked.
     "Somebody as strong as Atlas," Ridiculous Sword replied,
non-chalantly.  "Don't forget who you're in the company of."
     Ridiculous Sword flexed her 25*-strength muscles and
prepared to halt the falling slab . . . but Gross Sword slid in
ahead of her.  He braced his Atlas-strength legs against the
thread that was the North Pole, held up his Atlas-strength hands,
and with a calming breath and about three inches off leeway, he
brought the world to a stop.
     Having weight return to the people up top so abruptly was
almost as big a shock as having it leave in the first place.
Massive property damage ensued, and most everyone was severely
shaken up -- but fortunately, no one was hurt.
     Ridiculous Sword caught her falling father with ease, not
taking her eyes from her brother.  Gross Sword stood there,
holding up the world between his shoulders, and heaved a mighty
sigh of relief.  Central Earth and all its inhabitants were safe
-- safe from losing their atmosphere to free space, and safe from
the Old Gross Sword's petty wrath.
     "Now," said Ridiculous Sword, "How are we going to brace
it?"
     "Uh, brace it?" Gross Sword asked.
     "Sure.  You can't just keep holding it up forever.  We've
gotta brace it with something."
     Gross Sword thought for an instant, then shook his head in
dismay.  "It would take a column of adamantite bigger than all
the adamantite in existence to support this much weight.  The
only force strong enough to hold up Central Earth, and keep it
held up, is somebody with twenty-five star strength.  Like me."
     Ringman's brow furrowed.  "But . . . but you can't just stay
here forever!"
     "Sure I can," Gross Sword surmised.  "Every twelve years or
so I can set Central Earth down on my shoulder blades and buy a
potion of longevity from the Black Magic Market for Black Market
Magic.  Uh, make that several potions of longevity, so that if
the first one backfires I can cancel it real quick.  And then I
can pick Central Earth up again and go back to work."
     Ringman shook his head.  "And what kind of a life is THAT?!"
     Gross Sword sighed.  "A sacrificial one.  Hell, I got us
into this scrape in the first place.  If I hadn't been suckered
over to the evil side of things, we could have all gone out
together and ridded ourselves of Peter Perfect once and for all.
have to repay this world for the damage I've done.  This is the
only way I know how."
     "No," Ridiculous Sword replied.  "There's another way.  We
can train huge numbers of people to have 25-star strength, and
have them take turns holding up the plate.  For which they'll get
paid five silver pieces an hour, or some such."
     Gross Sword brightened up for a fleeting instant, then sank
back.  "No, it's better this way.  I don't deserve --"
     Ridiculous Sword cut him off.  "Damn it, Gross Sword, YOU'RE
WORTH MORE THAN THIS!!"
     Gross Sword blinked his eyes, realizing something but saying
nothing.
     Ridiculous Sword wrinkled her mouth shut and nodded.  "Let's
go.  Gross Sword, we're going to get you out of this predicament
even if you won't."
     She took Ringman's hand and gestured to Disgusting Sword,
Jimmy, and Homer.  Prometheus slid itself into Ringman's sheath,

grudgingly coming back to its first master for the third time.
The war was over.  It was time for the healing to begin.








                             EPILOG

     Fordinchuarlikomfterrablaxxuuuuuchh'chh'chh-pt did not fit
Ringman's concept of an ideal vacation spot.  Ridiculous Sword
took him to that plane with _nothing_, since no material
possessions other than those created there could make the voyage.
Ringman and his younger daughter materialized stark-naked in the
middle of a fuzzy, cold green place.  It took nearly a minute for
the paladin's vision to clear, for the green to resolve itself
into grass, and for him to cringe as a _not_-so-naked woman rushed
out to greet them.  He instinctively crossed his hands over his
groin.
     Ringman expected this woman to shout insults at them for
mucking about on _her_ lawn with all this interplanar travel
nonsense, but instead she smiled and waved to them.  She pulled
the front of her skirt away from her legs and bounded toward
them, unable to conceal her more-than-well-fed bulk.  "Fire
Eater!" she cried out, "Fire Eater!  You've come back!  Y--"
     She stopped about twenty feet away, finally able to make out
their features.  "Oh, excuse me," she apologized, one hand on her
heaving chest.  "I thought . . . say, are you two any relation to
the Fire Eater?"
     Ridiculous Sword extended a psionic probe and gleaned a
picture of the "Fire Eater" from the woman's mind.  The memory
was more than eleven years old, but it was clearly of Sick Sword.
Ridiculous Sword nodded her head solemnly.  "The Fire Eater's
dead."
     "Oh."  The woman felt concerned for a few instants, then it
passed.  Especially when she took a good look at Ringman.  Her
lips slowly broke into a smile.  "Hey, what's _your_ name?"
     "Ringman," he replied, now shivering from the morning cold.
He felt somewhat imposed upon, as well, until he looked into her
bright little eyes.  "What's yours?"
     She put her hands on his shoulders.  "My name's Izabella."
She looked down a little lower.  "Mmm, you have quite a
physique."  She looked still lower.  "Yes, quite. . . ."
     "Thanks," Ringman replied, his teeth now chattering.
Whoever invented the morning chill should be skewered.  "B-b-but
c-c-could you g-get me some c-c-clothes to wear?"
     Izabella puzzled momentarily, then leapt back to reality.
"Oh, oh sure.  Sorry.  Follow me."
     She led them both into her farm house, gave them each one of
her old tattered terrycloth robes, and sat them down around a
small circular kitchen table.  She also poured them each a hot
drink.  As far as Ringman was concerned, hot dirty water never
tasted so good as now.
     "We're here," Ridiculous Sword broke in, "Because my mother
-- the Fire Eater -- promised to come back here one day to check
up on things.  She never got around to it.  So I decided to bring
my father here and myself."
     Izabella's bright little eyes narrowed to scrutiny as she
came closer to Ringman.  "You were the Fire Eater's wife?"
     "Well," Ringman shrugged, "For all intents and purposes,
yes."
     She stared at him out of the corner of her eye.  "You mean
you two weren't legally married?"
     "No, as a matter of fact, the Other Book of Infinite Wisdom
hadn't come out by then.  And that was the first place which
listed a marriage spell."
     Izabella shrugged.  "Oh, all right then," she complied, and
sat down next to him.  A little too close next to him, by most
counts, but Ringman smiled and put his right arm around her
anyway.
     "So," Ridiculous Sword continued, "How well have things been
working out here in North . . . uh, North . . ."
     "North Fliedershire," Izabella filled in the name of the
town.  "By the way, Ringman, how old are you?"
     "Thirty-two years young," he replied with a chuckle.  "And
Ridiculous Sword here is ten, and my other daughter and my son
are eleven and nine, respectively."
     "Her name's Ridiculous Sword?"
     He shrugged.  "Sick Sword picked it out."
     "Ah.  And, um, why didn't you bring your whole family here,
Ringman?"
     "Well," Ridiculous Sword told her, "Gross Sword -- that's my
brother -- is out holding up the entire planet of Central Earth;
and Disgusting Sword has already recruited over two thousand
Atlas-strength people to take turns taking Gross Sword's place
and is looking for more."
     _Holding up the planet_? Izabella mouthed in astonishment.
     "Oh, and Dad didn't bring me here," Ridiculous Sword
finished; "I brought him."
     "Mmm hmm," Izabella nodded slowly.  "So I see that the Fire
Eater's power runs in the family."
     "And more," Ridiculous Sword stated matter-of-factly.
     Izabella raised her eyebrows, then realized she hadn't been
paying attention to Ringman for nearly thirty seconds and put her
left arm around his shoulders.  "And, uh, what happened that your
brother has to hold up the planet?"
     Ridiculous Sword sighed.  "Some jerk who called himself
'Peter Perfect' killed Atlas, so _somebody_ had to stay and keep
the world from falling."
     "Yeah," Ringman agreed.  "Good thing the fall killed _him_,
too, or you kids might have had to get your hands dirty.  His
body got so splattered there's no _way_ anybody could resurrect
him now; so he'll stay in Heaven, completely out of harm's way
until some dummy decides to reincarnate him."
     "He killed Atlas and he _still_ got to go to Heaven?"
     "You betcha," Ringman said; "He was lawful-good.  Hmmm . . .
I wonder how he's making out in Heaven right now. . . ."
     Ridiculous Sword whacked herself on her 19-intelligence
forehead.  "Thanks for reminding me."  She cupped her hands in
front of Ringman and projected some blue-white mental energy
there.  "Peter Perfect sent me a telepagram from Heaven just this
morning.  Here, take a look."
     Ringman and Izabella drew closer as an image formed out of
the blue void.  A blond-haired man wearing a gold ring over his
head and a winged white choir robe resolved himself against a
backdrop of clouds and others dressed like him.  He was holding
his ears vehemently and screaming: "I CAN'T STAND THIS ANYMORE!!
All I ever meet are a bunch of peace-minded angels strumming
their stupid harps!  BLEACCH!  Not even a lousy stinking little
piece of EVIL to stomp on!  THIS IS NO FUN AT ALL!!!"
     Ringman snorted a chuckle.  "Looks like he's gone to hell
after all."
     Ridiculous Sword folded her hands and the image vanished.
"Getting back to why I came here in the first place: how has
North Fliedershire been holding out since the Fire Eater was last
here?"
     "Oh, _wonderfully_," Izabella said with a lilt.  "That nasty
old Smaugzilla made an excellent set of luggage.  And it was nice
not having a dragon burn down all your crops all the time, too.
Funny thing, though -- I always thought dragons had huge treasure
hordes inside their caves.  When the townsfolk excavated this
one, all they found was an egg five feet across."
     "An egg?" Ridiculous Sword sat up.  "A dragon's egg?"
     "Well, we think so.  If it is we'll give the dragon baby
everything we've got to make it turn out good instead of evil
like its mother."
     "Make a red dragon turn out good?" Ridiculous Sword's voice
got more urgent.  "And this egg's been there for over eleven
years.  My God II, its incubation period's almost up!  We have to
get there, and I mean _now_!"
     Izabella shook her head nervously.  "Um, there are some
horses in the garage, if --"
     "No, I mean _right now_!"  She reached across the table and
grasped Ringman's and Izabella's free hands.  "Have you been to
this place where the egg is?"
     "Oh, countless times," Izabella told her.
     "Good.  I want you to close your eyes, and visualize this
place in your mind."
     She closed her eyes.  Ridiculous Sword picked up on her
thoughts; they were a bit foggy.
     "Really see this place in your head," Ridiculous Sword
pushed her onward.  "Visualize every detail you ever saw when you
were last there.  Every shade, every sound, every scent -- even
the air temperature, if you can remember it."
     Izabella did.  The image of the cave's mouth and the wooden
fence came in as sharply as the stars in space.
     "Good.  Now --"  Boink.  "-- is this it?"
     Izabella opened her eyes and gasped.  She was actually
there!  It was a lot cooler than the time she'd just visualized,
since the last time she'd been there was in early afternoon, but
this was the place!
     "Teleportation," Ridiculous Sword told her.  "I do it all
the time.  And that," she crossed the two-foot-high wooden picket
and stared at the red, speckled bulb in its center, "Must be
Smaugzilla's egg."
     "Uh huh," Izabella nodded.
     Ringman furrowed his brow.  Despite being an obscure ninth-
level by-the-book paladin, he did have certain powers of his own
which he could exercise.  "That's funny," he commented after a
few seconds, "It's supposed to be a red dragon egg, but I don't
detect any evil coming from it."
     "Me neither," Ridiculous Sword concurred.  "This is damned
strange."  She looked a bit more intently at the egg.  "My God
II!" she exclaimed.  "Look at this X-ray picture!"
     "How?" Ringman and Izabella asked simultaneously.
     "Oh, sorry," Ridiculous Sword caught herself.  "That isn't a
baby red dragon in there at all!"
     "No?" Ringman asked.
     "No!  The neck's the wrong length, the head resembles a
horse more than it does a lizard, and the skin has a metallic
sheen -- and there's not the slightest sign of deformity!  It's
just a plain, straight different species of _draco_!"
     Izabella's eyes grew suddenly distant.  "The legend!"
     "Huh?" Ringman asked.  "What legend?"
     "Not another one of _these_ again," Ridiculous Sword
muttered.
     "The legend of the Fire Eater's leftovers!" Izabella
exclaimed.
     "Ah, well that clarifies EVERYthing," Ringman muttered.
Life in the multiverse could get _so_ confusing.  At times like
these he wished it was all just castles and damsels and dragons
and things once again -- those he could understand.
     "'After the Fire Eater's triumph,'" Izabella recited,
"'Eleven cycles of Hyperion's bronze chariot will go, and then
the fruits of the dragon's demise will ripen and a force that had
been lost will be replaced in the universe.'  The legend must
have been talking about this baby dragon!"
     "Or it could have been talking about baked potatoes,"
Ridiculous Sword sneered.  "That's the thing about these legends,
they're all so vague.  But I tell you what, there's only one way
we're going to find out.  Stand back."
     Izabella stepped back a few feet.  Ringman grabbed her and
pulled her behind a rock.  "When she says stand back," he told
her, "She means it."
     "Normally a baby dragon can hatch from its egg within six
months," Ridiculous Sword explained, "IF it has the warm body of
its mother to incubate it.  If not, the embryo won't die, but
it'll mature about as slowly as glass runs downhill.  It can take
upwards of eleven years.  This dragonette here is on the verge of
hatching; it just needs a little warmth to encourage it to come
out of its shell."
     "Uh, how much warmth?" Izabella asked.  Ringman suppressed a
snicker.
     "Oh, about the equivalent of --"  Ridiculous Sword cast a
fireball spell and centered it right on the egg.  The wooden
fence turned to ash, the rocks inside of it glowed a cherry red,
and Ridiculous Sword's terrycloth robe disintegrated.  Her hair
was a little mussed up, too; after all, a double-strength
permanent potion of fire resistance could only do so much.  "--
Red dragon breath."
     Ringman and Izabella came out from behind the rock in time
to see the egg crack.  The first shell fragment fell away, and a
polished (but damp) foot-long dragon head poked out of the hole
and glanced around.  Not seeing its mommy, it shut its eyes and
wailed a few bucketfulls of tears.
     Ridiculous Sword gabbed the head and stroked it.  That
calmed it down a bit, and gave it enough incentive to bust the
rest of the way out of its shell.  The sun chose just that moment
to peer over the horizon, and glinted off its dew-specked dragon
skin with an silvery-golden light.
     "My deity!" Ringman whispered.  "A silver dragon!"
     Ridiculous Sword looked back up at him and shook her head.
"No.  A platinum dragon."
     "Platinum?" Ringman mouthed.
     "The first one to be born in over two thousand years.  The
first one to be born . . . since Bahamut."
     "A new lord of the dragons . . ." Ringman mused.
     "He'll have a lot to learn before he can become _that_ -- but
he has 401 years before he's an ancient dragon and ready for that
position, anyway."
     "Um, you're sure it's a he?" Ringman asked suspiciously.
     "Sure," his daughter assured him.  "All platinum dragons
ever born are male.  And besides, I checked."
     This puzzled the paladin still further.  "But if all
platinum dragons are male, that means that they can't reproduce."
     "That's 'cause they're a hybrid.  You see, when a gold and a
silver dragon mate, they produce an electrum dragon.  If this
electrum dragon then goes on and mates with a speaking, spell-
using dragon of another species -- any species, good or evil --
they either produce _no_ offspring, which is usually the case, or
they produce one of these."  She indicated the platinum dragon
chick in her arms.  "That's how Bahamut was born in the first
place."
     "So, then," Izabella put the pieces together, "Smaugzilla
had to have mated with one of those electric dragons?"
     "Electr_um_ dragons; and yes.  These affairs are rare
occurrences indeed, because electrum dragons never live past the
age of sub-adulthood.  But this one's here, and we're going to
keep it that way until he's able to take care of himself."
     Ringman whistled.  "Four hundred and one years.  Heck, it'll
take him fifty years just to grow into a full adult.  That's a
lot of time to devote to one creature."
     "Mm hmm.  Matter of fact, he'd probably be best off if he
were taken care of by someone from North Fliedershire.  Like you,
for instance, Izabella."
     Izabella gulped.  "M-me?  But I couldn't even raise cows
right!  I don't know anything about raising dragons!"
     "They can pretty much take care of themselves.  Just feed
him scrambled eggs and teach him how to speak -- and he'll be
able to tell you everything he needs by the time he's six months
old.  Send him off to magic college when he's 1, and he'll be
casting first-level spells before you know it."
     Izabella shrugged.  "Sounds simple enough, but --" she
smiled at Ringman "-- I could sure use a nice strong man to stay
and help me raise this dragon."
     Ringman pursed his lips.  "Or you and the platinum dragon
could come back to Central Earth with me.  I have a great little
keep set up in town. . . ."
     She stroked a finger along the hairy, exposed portion of his
chest.  "Well, we'll see."
     "A new Bahamut," Ridiculous Sword nodded and smiled.  The
dragon cuddled up against her chest and purred.  "A beautiful new
Bahamut.  I wonder what we should name him."
     "Bahamut the second?" Izabella offered.
     "Bahamut junior," Ringman chuckled.
     Ridiculous Sword rubbed her chin.  "How about Sick Dragon?"
     "NO!" Izabella and Ringman shouted as one.
     "You tell 'em!" a distant voice from behind intruded.
     "Huh?"  Ridiculous Sword turned around first, unaccustomed
to being without the 360-degree aid of her robe of eyes.  A naked
boy was running toward them.  He was easy to recognize.
     "Hi, Rid!" Jimmy said as he arrived two seconds later.  He
would have been out of breath except that he had an 18
constitution.  "Hi, Mr. Ringman!"
     "Jimmy, what are you doing here?" Ridiculous Sword asked
with one fist on her hip.
     "Oh, just trying out some psionic plane travelling.  I
shoulda guessed from the piles of junk that fell to the floor
when you two left that this plane doesn't allow any carry-on
luggage, but oh well.  Hey, who's the fat broad?"
     "Izabella," Ringman stared him levelly in the eye, "My new
girl-friend."
     Jimmy stopped himself.  "Oh. . . . And who's the dragon?"
     "Bahamut the second," "Bahamut junior," and "Sick Dragon"
all came out at once.
     Jimmy thought for a second.  "How about just calling him
'Bahamut,' like the old one?"
     "Well . . . why not?" Ridiculous Sword acquiesced.
     "Sure."
     "Sounds good to me."
     "Good," Jimmy sealed their agreement.  "But anyway, R.S.,
there was somethin' that's been buggin' me."
     "Yes? . . ."
     "When I turned into that hill giant and attacked GrossSword
with the ballista of automatic missile fire?"
     "Mm hmm . . ."
     "That shouldn't've worked.  Just because a hill giant has
6+2 or more hit dice doesn't mean _I_ got to have 6+2 or more hit
dice.  I was only fifth-level at the time.  I shouldn't have been
able to affect him."
     "I was wondering when you were going to figure that out,"
Ridiculous Sword told him.  "I won't tell the Dungeon Master if
you won't."
     Jimmy mopped his brow in relief.  "Agreed.  Oh, and one more
thing . . . about how I helped with stopping Gross Sword and
Peter Perfect and --"
     Ridiculous Sword held up a restraining hand.  "Wait . . .
don't tell me --"
     Jimmy nodded, and he, Ridiculous Sword, and Ringman all
joined in chanting the immortal words:
     "HOW MANY EXPERIENCE POINTS DO WE GET?"

--
Jeff Boeing / Roger M. Wilcox         cbcsc063@ma.secs.csun.edu
----------------------------------------------------------------
"Estas malpermesita entrudi sin en la evoluon de pli naivaj
kulturoj."  -- La Unua Direktivo, pli aw malpli

  alley said cautiously trying to play the role
"Your crew has promised me certain compensation for returning
them."
    "Are you trying to ransom my crew to me, Captain Osborn?"
Malory asked very suspiciously, he hadn't been told of this
twist.
    "No, Sir." O'Malley replied with what seemed to be a twinge
of fear.  "It's just that this being a high security area I may
have trouble leaving freely.  I've been promised safe passage,
absolutely no interference."
    Malory looked toward Assali for confirmation "That's
correct, Sir.  With the stipulation that she does not incur any
offenses while with us."
    O'Malley laughed "Yea, I'm to be on my best behavior."  She
then said "There is one other thing that is even more
important."
    "And what is that?" Malory said, though, knowing how these
people operated he could guess what it was.
    "As your scanners have probably already told you," O'Malley
said "My supply of dilithium crystals has begun to deteriorate.
I've been promised the needed repairs to the drive and
replacement of the crystals."
    "What ever Mr Assali has promised, I will stand by." Malory
finally said tiring of the 'negotiations'.
    "Very good" the red head said "Starting approach to shuttle
bay."  the screen returned to standard view of the approaching
ship.
    "Sir," Penthrach said "In coming message from Admiral Hrgon.
Apparently he's been monitoring the conversation."
    'Here it comes' Malory thought to himself then said "Thank
you Mr Penthrach, I'll take it in my ready-room."

    The transport expertly slid into the shuttle bay and set
down smoothly.  The door on the side of the long boxy body
hissed and jerked open.  Steam poured out of release valves
partially obscuring the opening.  A short figure walked up to
the door way then started down the stairs.  He wore a tattered
environmental suit and carried the helmet professionally under
one arm.
    The semi circle of security guards around the opening knew
at once it was Lieutenant Meede.  Immediately behind Meede, came
Midshipman Albert looking similarly disheveled.  By the time
Meede reached the deck the doorway was filled by Commander
Assali.  Finally, Chief of Security Zalvosta loudly said
"Attention, First Officer on Deck"  bringing the assembly to
stiff attention as Commander Assali descended the ramp.
    Zalvosta approached the three "Sir, Welcome back" She said.
    "Where's Captain Malory?" Assali asked.  Then smiled "I
thought he would be here to greet his prodigal sons personally."
    "Sir," Zalvosta replied "He received an urgent message from
Admiral Hrgon just as you were making your final approach."
    "Yes, I understand." they were expecting as much.
    Doctor Mayak approached with her team to begin preliminary
scans of the survivors.  Zalvosta turned to speak with Meede
but was distracted by a commotion from the assembly.  Coming
down the gangplank was an oddly dressed woman with slicked down
bright red hair.
    The woman wore what appeared to be an assortment of
mismatched older style Romulan and Klingon uniforms.  There was
also a small assortment of equipment strapped to her, not the
least of which was an old Romulan disrupter casually dangling
from her round hip.  This was obviously the pilot, Janny Osborn.
    "Ms Osborn," Zalvosta said when she reached the bottom of
the steps "I'm going to have to ask you to leave the weapon with
us for the duration of your stay."
    O'Malley looked at Zalvosta suspiciously for a second then
looked at Meede and Assali, Assali nodded.  O'Malley made a
quick motion toward the disrupter jerking it from the holster
and spinning it next to her at the same time.  The barrel ended
in her hand with butt pointing out.  She then turned and gave it
to Meede.

-----------

    The assembly sat in one of the Delphi's meeting rooms.
Present were Admiral Hrgon and his aid, Captain Malory,
Commander Assali, Lieutenant Meede, and Midshipman Albert.  Also
present was the ORACLE operator on duty at the time of the
explosion at AR-24 and Janice O'Malley.
    O'Malley sat toward one end of the table away from the rest.
She was slouched back with her feet sticking out in front of
her.  It was all she could do to keep from putting them up on
the table but figured she was pushing it as it was.  She really
enjoyed playing the rogue.
    Admiral Hrgon turned to O'Malley "Let me get this straight,
you were passing by the AR-24 system when you picked up a
distress signal?"
    "As I've said several times before," O'Malley said "I was
passing by the system when I received what sounded like a
distress call.  The Faraday was already starting to have
problems but I figured there may at least be something to
salvage.  It wouldn't take much to scan the area and see if I
could find something to help fix my drive."
    "You weren't even thinking of survivors?" Malory asked.
    "Of course, if there were survivors there would be a better
chance of some usable equipment.  Besides, a lot of times there
is a reward for the safe return of survivors.  Sometimes, the
survivors are able to express their appreciation for being
rescued."  O'Malley had rehearsed the story well.
    "Did you know that charging survivors for rescue is against
just about every code there is?" Hrgon asked in disbelief.
    "Of course, but there is usually some sort of voluntary
reward.  For instance, I would not have come here if it wasn't
for your crew.  My first choice was the Nexus Colony, they were
much closer and not nearly as patrolled as this place is."
    "And you would have had to pay for your own repairs at
Nexus, is that right?" Hrgon was more making a statement then
asking a question.
    "I'm a trader, I have to make the greatest return possible.
If I come out of this with free quality repairs, I've done quite
well."
    "Surely" Hrgon said trying to look threatening "You know
that if we run a complete I.D. check on you, you'd probably be
arrested."
    "I was assured safe passage by a Commander in Star Fleet,
that was enough for me." O'Malley had to remain confident.
    "That is enough, Sir." O'Malley said firmly to Hrgon.
"We've had enough tragedy from this incident, it's time to close
the book on it."
    Hrgon took the opportunity to turn on Malory "And how do you
explain abandoning your landing party on a planet with a hostile
environment?"
     "Sir, there were several factors leading to the apparent
'abandonment'.  First of all, there was some effect from the
rock structures on the planet on the ORACLE sensors. Couple this
with the storms, and we were effectively sensor blind. False
images abounded and by the time we did get a good check, thanks
to the timely recovery of Lt. T'irna, there were no life signs
on the planet. Moreover, both you and Star Fleet command had
ordered the DELPHI to come here at once anyway. You because you
wanted to question the survivors personally, and Star Fleet
command on the whims of the late Commodore Albrit."
    Hrgon frowned at the shifting of blame but before he could
say anything Assali said "Sir, we were unconscious for over
twenty four hours, by the time we dug our way out of the sand we
could not reach the Delphi, our communicators were destroyed.
If Ms Osborn hadn't also heard the distress call that originally
brought the Delphi in we would be dead by now."
    The discussion of detailed events lasted several more hours.
Each person involved ended up telling their story several times,
some times in groups and sometimes separately.  In the end Hrgon
begrudgingly closed the case accepting the stories as they stood
but vowed that he knew some kind of cover up was happening.  He
also said that he thought that all of this was somehow connected
with Whitecloud and 'The Vigilante' and would eventually prove
it.

-----------

    Malory, Meede and Assali stood in the shuttle bay to see
O'Malley off, all other standard personnel had been dismissed.
Meede carried the disrupter and gave it back to O'Malley as she
stood in front of the ramp.
    "I'm glad you finally decided to trust us" O'Malley said to
Meede spinning the weapon back into it's holster.
    "I didn't have much choice." he said then added with as much
of a smile as he could muster "I half wish I was going with you,
that was a fine crew."
    "Thank you," O'Malley said "Coming from you, that is quite a
complement."
    She then turned to Assali.
    "Give my regards to everyone, I wish you the best of luck."
Assali said holding out his hand.
    O'Malley shook the Commander's hand and said "Thank you,
sir, we'll need it."
    Malory also offered his hand "I thought I had said all of my
good byes already." he said "Just make sure you bring them back,
is that clear."
    "Yes, Sir." O'Malley said then shook his hand.  Before she
let go, she hugged the Captain lightly then the other two.
Janice then climbed the steps to the Faraday and disappeared
behind them as they closed.
    The Faraday waited as the bay doors opened then slid out of
the Delphi and headed to the asteroid belt.


                              ++++

    The woman standing next to Captain Anthony's bed seemed tall
for a human female.  Her wavy blond hair was cut to above
shoulder length and was held casually away from her face with
several clips.  She wore the red uniform and insignia of Star
Fleet Command.
    Anthony stared at the woman as she sat down on the edge of
his bed.  "Robert," she said softly "your doing the right thing.
Star Fleet needs information on the Borg.  If they ever return
in force, it could mean the end of life as we know it.  You know
that can't be allowed to happen.  Everybody here knows the
risks, they've accepted them.  Use the information we obtained
from the battle to keep your crew alive."
    "I've lost so many already" he whispered "and we haven't
even left the Federation."
    "I know," she said soothingly "many more could die too, if
you let them."
    Anthony raised his hand to touch her face and she reached
out to touch his.  "I love you.." he said as she faded away.

    The door signal chimed waking Anthony, he called for the
visitor to enter.  Commander Tarva came in and stood at
attention just inside the door.
    "Sir," she said "all final tests have been completed, the
U.S.S. Vigilante is ready for deployment."
    "Very good," he said "Notify all hands to prepare for
departure within the hour.  I'll be with you in a moment." Tarva
reached for the wall mounted communicator to relay the orders
and Captain Anthony headed into the bathroom to change.
    Tarva waited in the first room in her standard 'at-ease'
posture looking around the Captain's cabin.  She had been here
before but had never taken a close look at it.  The cabin
consisted of three rooms separated by the same style dividers as
in her room.  The first room was set up as a meeting room with a
table and several chairs.  The middle room was the sitting room,
with a couch and the standard rough duty chairs.  The third room
had the large, almost double bed, closet and other amenities.
    Next to the door, was a shelf with a glass covered pedestal.
On the pedestal was a faded blue book with well worn edges.  In
the upper right hand quadrant were stacked faded gold print
words 'Collected Poems of Robert Service'.
    Tarva pushed a button on the pedestal, the front of the
glass opened and the platform holding the book slid out at her.
Tarva carefully opened the front cover and saw a name penned on
the inside 'L..ry Na..' the rest seemed to be an address.
Something compelled her to turn to the end of the book and read
the last stanza of the last poem...

               And so, frail creatures of a day,
             Let's have a good time while we may,
             And do the very best we can
             To give one to our fellow man;
             Knowing that all will end with Death,
             And lift our heads like blossoms blithe
             To meet at last the Swinging Sythe.
                             FINIS

                        to be continued........


------------




                   T  H E   V I G I L A N T E

                              IVA

                        "Ring of Spears"




            "Deny your God!" they ringed me with their spears;
            Blood-crazed were they, and reeking from the strife;
            Hell-hot their hate, and venom-fanged their sneers,
            And one man spat on me and nursed a knife.
            ..........
                 "The Soldier of Fortune"
                      Robert Service



    The screen showed the count down, fifteen minutes was almost
up....00:59, 00:58...the bridge crew sat quietly, preparing for
the inevitable...Phasers had been secured by all stations, just
in case....00:37, 00:36...
    Captain Anthony looked at his crew, they seemed almost
relaxed, but they had done this before...0:24, 0:23...
    Behind the numbers, were the rushing stars illusion of warp.
The Vigilante had jumped to high warp when the count down had
reached 01:00.
    Ensign O'Malley watched the displays on her control panel.
Had she set the coordinates properly? or would they die in the
middle of a star.  She was aware of the padding of the head rest
of her seat.  She could remember how it felt in the
past...00:13, 00:12...
    Commander Norton couldn't suppress a grin, this was the
ultimate adventure, from a planet of half breed out-casts to the
greatest mission ever, he'd been preparing for this all his
life...
    The computer voice came on "TEN, NINE,...".  it seemed like
an eternity, "...THREE, TWO, ONE." The stars on the screen
turned blue and started forming rings.
    00:01, 00:02 ...the numbers started counting back up but
blurred from the screen...
    Captain Anthony felt the seat wrap around him, like in the
past.  The blue tunnel on the view screen started rushing at
him, it was pushing him through the chair.  He instinctively
tried to reach for the console in front of him but his arms
refused to move.  A noise started coming to him, it was a chorus
of screams, he joined in....

    In engineering, Commander Dolittel watched anti-matter
mixing chamber 1 pulse at its steady rate.  The worm-hole was
caused by alignments in the warp drives, what most engineers
would consider a fatal design flaw.  The power draw wasn't any
different than it was at warp 9.6 so engineering wasn't as taxed
a one would think.  The blue rings of the worm-hole drove
through him....

    As quickly as the discomfort had started, it was over.  It
left behind splitting headaches and knotted muscles.  It seemed
only a short time, but ten minutes had past.
    Captain Anthony undid the restraints and slid from his chair
gasping.  On either side of him, Tarva and Norton also tried to
catch their breath and fumbled at the restraints.  Anthony knelt
on the deck at the foot of his chair, his right arm lay across
the seat and the other propped him up.  This had been the
longest jump yet and he could feel it.
    The standard rushing stars of warp were back on the screen,
superimposed on them was the worm-hole count, 10:00.  Anthony
looked to his helmsman.
    "Full Stop."
    "Aye, Aye, Sir." the Ensign said "Full stop".  He then
pushed a few buttons on his console.  The rushing stars
disappeared.
    Anthony pulled himself back into his chair, "Mr. Norton,
report."
    "Sir," Norton paused trying to clear his head completely. "I
read no sign of activity in this sector and no sign of the worm
hole."
    "Thank you, Commander." Anthony turned toward his navigator.
"Ensign O'Malley, do you have our location plotted yet?"
    Janice leaned forward with left elbow on her console and
held her head while she worked with her right hand.  "Sir,
destination sector confirmed, we're at the far side of suspected
Ferengi frontier."  They had gone completely through the Romulan
empire and now were beyond any sector the Federation had ever
visited.
    "Very good, begin plotting the next leap....Ah, Ensign, this
time lets keep worm-hole time down to around, say eight minutes.
That last ride just about did everybody in."
    "Aye, Sir." Janice smiled, the Captain was trying to make it
sound like he wasn't responsible for that ten minute jump.
    Janice began plotting the next leap.  After each use of the
worm-hole they had to recalculate a new heading.  The worm-hole
never placed them exactly where they had intended and the error
increased the longer the jump.
    Anthony turned on the ship's public address system
"Attention crew, prepare for next controlled worm-hole in one
hour.  All stations should have status reports filed with in
fifteen minutes.  That is all."
    For the next hour, the bridge crew reviewed the reports from
the rest of the ship and ran tests of their own.  It was
imperative that The Vigilante be in perfect condition before
using the worm-hole.

-----------

    Anthony sat in the Command Room at the head of the long
table.  He'd been reviewing some of the command reports but his
attention had wandered to a nearby window.  The blast shields
had been opened to give him a view, now he just sat and stared
at the stars.   The blackness and the stars engulfed him.
    The mission had been so long in the making, it was hard to
believe they had finally taken the first step.  Two more jumps
would put them in the same sector that The Enterprise had first
encounter the Borg.  The Enterprise had been 'flung' there by an
entity known as the 'Q'.  It had apparently wanted to prove that
the Federation was not prepared for what lay outside of its
borders.  That one encounter, had brought the Borg to the heart
of the Federation.  That one encounter had changed his life,
forever.  That one encounter, in fact, had brought this crew
together.
    Anthony still wondered what it was like when the Nielsen was
destroyed.  Did she die doing battle or was she merely swept
aside like so many other victims.  He would never know, and when
it came down to it, he didn't really want to know.
    The stars suddenly disappeared replaced by the dull gray of
the blast shield.  Anthony could hear the door slide open and
someone enter the room.  He turned to look.
    "Sir," it was Commander Tarva.  She stood in her stiff.
at-ease posture, close enough to the door to keep it open.  "We
are prepared to begin count down for the second worm-hole."
    Anthony looked at his First Officer, she had been at
Wolf-359.  He wanted to ask her what she knew of the Nielsen but
couldn't.  He knew that it was as difficult for her to speak of
as it was for him.  Just having her as his first officer, made
him feel closer to the last moments of his real life.
    "Thank you, Commander, make it so."
    "Very good, Sir."  Tarva came to attention, snapped about
face, then exited the room.
    Tarva was a true enigma, sometimes she was, stiff,
absolutely military, other times, she acted like an old friend.
Perhaps she could sense when he needed distance, or perhaps, she
needed the distance.

-----------

    The jumps seemed to get easier, perhaps they were getting
used to them.  The crew came out of the third jump fully
functional, which was good, since it was a suspected Borg
sector.  This was the same sector the Enterprise had first met
the Borg.
    "Long range sensors report." Anthony said immediately.
    Norton checked his screen.  "Sir, scanners indicate no
activity in this sector."
    Anthony had released himself from the restraints and was
stretching.  He turned to Commander Tarva "Commander, what's our
status?"
    "Sir, all sections report no apparent damages.  Full reports
will be ready shortly."  Tarva was still fully strapped into her
seat.
    Anthony stood behind O'Malley who was still trying to
stretch off the effects of the worm-hole.  "Ensign, how many
star systems are in this sector?"
    "Checking now, Sir." O'Malley immediately reached for her
controls.  "Sir, there are three systems in this sector, one
yellow system and two reds."
    "Thank you, Ensign."  Anthony turned and looked at his crew
while he thought.  Their mission was quite open ended, seek out
the Borg in the heart of their territory and collect as much
useful information on them as possible.  They did not know were
the Borg came from, so this was just the first step in tracing
them back to their, hopefully, 'home' planet.  He turned back to
O'Malley.
    "Ensign, plot a course to the nearest system.  What would be
our E.T.A. at Warp seven?"  Anthony stood between the two front
stations with his thumbs hooked in the pockets of his uniform
jacket.
    After a few calculations, she reported "At warp seven, the
closest system is 10 hours 15 minutes away."
    "Very good, lets go take a look."
    "Course laid in, Sir."
    "Engage."
    The helmsman went to work.
    Anthony turned to Norton "Mr Norton, what's our status?"
    "Sir, Shields are currently at 25% power and cloaking is
engaged.  We have full power available any time it is needed."
    Anthony took his seat and turned to Tarva "What do you
think?"
    Tarva had finally taken the time to undue her restraints.
She finished a communication with medical, then turned to the
Captain.  "Sir, we could be exploring out here for a year and
never see a sign of the Borg.  The cube the Enterprise
encountered may have been some sort of long range scout.  There
may never have been any other Borg presence in this quadrant."
    "I quite agree, but this is all we have to go on."
    "Just so we're prepared to do a lot of simple exploring for
the Federation."  Tarva pushed her console aside and stood up to
stretch.
    Anthony stood too, looking at the view screen he smiled "I
hope it doesn't come to that."
    "So do I, Sir"  Tarva returned the ironic grin.

-----------

    Janice had been relieved until they reached the first
system, she had eight hours to get some rest.  In her rooms she
found Whitecloud working on the painting of the eagle again.
    "How can you be working on something like that when we've
finally entered Borg territory?"  she asked.
    Whitecloud seemed to ignore her as she finished a tree line.
Anndrea was wearing a knee length white smock over the standard
tight black under uniform.  She put her brush in a glass of
water and stood up.
    Anndrea smiled at her friend "And why aren't you on the
bridge?"
    Janice was already sitting on the foot of her bed removing
her boots.  She laughed "I guess we all need some time off."
    "Or away," Anndrea added,  then got slightly serious "Your
going to want to get some sleep?"
    "Is that okay?" Janice knew it had to be but couldn't help
being courteous, especially to a ranking officer and friend.
She still hadn't figured out which came first in this forced
relationship.
    "We never should have let ourselves get on differing sleep
schedules."  Anndrea had grabbed her uniform off her bed and
turned to go into the head.
    "Thank you." Janice didn't actually plan to 'go to bed' just
turn down the lights and relax to some music.
    Janice took off her uniform jacket and laid down over the
covers on the bunk.  She looked around the rooms waiting for
Whitecloud to leave so she could turn down the lights.  Janice
looked at the pair of weapons hanging on the wall near
Whitecloud's paintings.  One was the Romulan disrupter she
carried when she'd visited the Delphi.  The other was the,
adjusted phaser that had been beamed to Whitecloud to get her
and Commander Tarva off of Star Base 89.
    Whitecloud came out of the head in full uniform.  "I'll be
in the training room, they may actually need us some time soon."
she smiled.
    "Someday, I suppose." Janice agreed with a laugh.
    Whitecloud turned off the lights as she left.

-----------

    When Janice returned to the bridge, they were just preparing
to drop out of warp for approach to the system.  The system was
a red one.  The star was small and dark.  There were five
planets and two asteroid belts.  Two of the planets appeared to
have atmospheres, the others were gas giants.
    "Sir, approaching first target planet." O'Malley reported.
    "Put it on the main screen." Tarva said and joined Anthony
who was already standing.
    The planet appeared to be brown and very hazy, as if it was
surrounded by a cloud.
    "What's that cloud?" Tarva asked before Captain Anthony
could.
    "Undetermined." O'Malley replied.
    "Sir," it was Lieutenant S'Erlet, the science officer who's
station was on the perimeter behind Tarva.
    "Go ahead." Anthony said to his often neglected Science
Officer.
    "Sir, it appears that the planet is surrounded by a large
amount of debris."  The Vulcan continued to watch his
instruments.
    "What kind of debris, and is it safe for us to take up a
standard orbit?"  Anthony asked.
    "I am not sure of the source of the debris but it appears to
be natural.  We should be safe in a high orbit."
    "Very good, helm take us to a high orbit."
    "Aye, Sir" the helmsman said and made some adjustments to
his controls.
    The Vigilante moved to a high pole to pole orbit.  With the
planet's rotation, they'd be able to do a cursory survey of the
whole planet relatively quickly.
    "Sir," S'Erlet spoke up after about ten minutes of study.
    "Go ahead." was Anthony's only reply.
    "It appears that the debris is made of dirt and rock from
the planet's surface.  The planet has no mineral deposits and
appears to have no layer of top soil.  In fact, I believe that
it is missing several kilometers of its surface thickness."
    "You mean that all of this debris is from the planet
itself?" Tarva asked.
    "Yes, Sir, But I can't make positive conclusions without
visiting the surface directly."  S'Erlet knew he was pushing a
bit with that request but he'd been allowing himself to be in
the background long enough.
    "What's the surface and atmosphere like?" Tarva asked.
    "Sir, there is a thin atmosphere and the surface is almost
all rock." S'Erlet was intrigued that they were taking his
suggestion of an away team seriously.
    Tarva hailed Golta in Drop Team Operations.
    "Golta here." came the gruff Kalonian reply.
    "Prepare an away team to escort Science Officer, Lieutenant
S'Erlet to the surface."  Tarva said casually.
    "Yes, Sir, Golta out."
    S'Erlet fed the necessary planet information to Operations,
then headed down there himself.
    "Helm, adjust orbit to a geo-syncronis orbit over Lieutenant
S'Erlet's chosen coordinates."  Anthony sat back in his chair
and waited.  Soon they'd have their first real look at the
planet.  Could this debris around the planet be, in some way,
related to the Borg?  Probably not, but they had to investigate
every clue.

-----------

    Four figures appeared on the barren rock of the planet.
Three wore dark gray, armored pressure suits the forth wore a
non-armored suit but was the same color and design of the
others.  The fourth also carried two cases of instruments and
immediately opened one.
    The three in armor had phasers in hand and spread out to
survey the area.  "Lieutenant Whitecloud to Vigilante".
    "This is Captain Anthony," Came the immediate reply "go
ahead."
    Whitecloud switched her phaser to her left hand then started
pushing some buttons on the control panels on the left arm.
"Initiating visuals."
    "Acknowledged" There was a pause as they adjusted their view
screen.  "Visuals coming in clear, thank you, Lieutenant."  The
bridge crew were now watching through the mission camera built
into her suit.
    The planet was mostly large smooth rock.  There was very
little dust let alone dirt.  With the thin atmosphere, there
would be no weathering to create the dirt.
    After S'Erlet broke out his equipment and the team started a
slow walking survey of the area.  They soon noticed that the
rocks weren't as smooth as they first appeared.  Many places
were deeply gouged some places even looked cut.  It was hard to
tell what could have done the cutting, but it appeared to have
only happened recently.  The rock formations were not
sedimentary rock, most appeared to be magma formed.
    During most of that day, and the next, the team was
transported all over the planet surveying and tacking samples.
Ten hours after the last survey, Lieutenant S'Erlet was ready to
present his findings.
    S'Erlet stood at the head of the Command Room, seated at the
table nearest him was Lieutenant Whitecloud.  Captain Anthony,
and Commanders Tarva, Norton and Dolittel awaited his report.
    Since Lieutenant Whitecloud had help S'Erlet collect and
sort the data she was there to help with the presentation.  She
pushed a few buttons and brought up a split screen of the
planet.  One side showed an approaching view of the planet in
its brown cloud, the other view showed a dramatic view of the
landscape under a dark brown sky.  The landscape was unique
since it was of totally smooth rock formations and balloon type
mountains.
    "The planet under observation appears to be quite unique."
S'Erlet began "It is composed totally of volcanic rock
formations.  The formations were all formed by cooling lava not
more then one thousand years ago.  Because of the thin
atmosphere, there has been negligible erosion of the rock.
Therefore, it still appears almost exactly as it did when it
first cooled.
    "There are, however, areas where the age of the rock tests
500 million years and older.  These areas are easily spotted
because they have either deep cut marks in them or are partly
covered by the newer more bulbous lava.  If it wasn't for the
extremely old lava formations and the atmosphere, I would have
placed the age of the planet at only about 1500 years."
    S'Erlet paused to allow scenes of the different formations
and types to be shown.  He then continued when a graphic
depiction of the total planetary terrain came up next to the
approach shot.
    "The Debris in orbit around the planet appears to be rock
and perhaps what could be called dirt from the planet.  I have
determined that the debris is from the planet due to its extreme
chemical similarities to the current surface.  With a sufficient
atmosphere, the current surface would eventually weather into
soil of the same make up of the debris in orbit.
    "It is my theory that the debris around the planet was
originally part of the planet's surface."  The graphic of the
current planet filled in, adding layers of dirt and other common
surface features.
    "The biggest detraction from this theory is that the
estimated total mass of the debris would not be sufficient to
cover the planet properly.  There is also only trace amounts of
metals and other minerals."
    Anthony spoke up "Lieutenant, if your contention is that the
debris around the planet is not sufficient to cover its surface
where do you propose it came from?"
    "Sir, it is my theory that the debris did come from the
planet.  I believe that it was forcibly removed and all usable
minerals and ore where taken.  In essence, the planet was
totally strip mined and the 'slag' was dumped into orbit.  This
process would probably also destroy the planets atmosphere."
    Dolittel spoke up "That's impossible, who would do such a
thing?"
    "Sir," S'Erlet returned "You forget where we're at."
    "But the Borg don't 'mine', they take what other cultures
have already created." Tarva said.
    "They don't mine now, but what did they do a thousand years
ago when this appears to have happened?" S'Erlet argued.  "Also,
the gouges in the older rock indicate that this was not caused
by a natural phenomenon."
    Captain Anthony stood up as S'Erlet sat down.  "Thank you
Lieutenant, is there anything else you'd like to mention before
we move on?"
    "Yes, Sir" S'Erlet said and pushed a few buttons on his
console.  The view screen changed to show another planet that
appeared to be surrounded by the same cloud of debris.  "This is
our first view of the other planet in this system that appears
to have some sort of atmosphere.  As you can see, it too suffers
from the same affliction as this one.  In all of the
Federation's explorations, there has never been another planet
showing the same phenomenon.  Now we have two."
    "Perhaps it is unique to this system." Anthony said.
    "Perhaps." S'Erlet agreed.
    The group discussed the possible history of both planets
then decided to visit the other planet and make a similar
survey.  It was hoped that similarities or differences between
the planets would confirm something, anything.

    The second planet showed even more signs of deep regular
cuts in the old magma.  It was finally decided to register this
under possible activity by the Borg or other advanced culture.
    The Vigilante then moved on to the other two systems in the
sector.  All three systems' planets showed the same signs of
total strip mining.  In all, they discovered ten planets that
had been destroyed in the same manner.  The other planets in the
systems were gas giants and thus were not approachable in this
manner.
    It was even decided that some of the planets may have had
extremely severe atmospheres.  The first thing the 'pillagers'
of these planets would have done was rip the atmospheres away,
it would have made things much easier.  The power needed to do
this was incomprehensible and had not until this point ever been
attributed to the Borg.

-----------
              ********
              And there was I, sore wounded and alone,
              I, the last living of my slaughtered Band.
              Oh sinister the sky, and cold as stone!
              In one red laugh of horror reeled the land.
              And dazed and desperate I faced their spears,
              And like a flame, out-leaped that naked knife,
              And like a serpent stung their bitter jeers:
              "Deny your god and we will give you life"
              *********

    Captain Anthony sat in the Command Room looking out the
window.  They had visited three systems and ten planets, now
what.  They had taken the opportunity to launch drop ships to do
the surveys more efficiently.  They had run more drills and the
drop teams were in constant training.  Still, they had nothing
new to go on, they knew no more about the current state of the
Borg then when they left the Federation.
    The next question was, where next?  He had several choices:
they could pick a random course and just go hunting.  They could
start a spiral exploration of adjoining sectors until they found
more stripped planets.  They could follow a trail of stripped
planets hoping it would lead to the Borg.  The only problem, was
that the trail could lead away from the Borg.  Also, all of the
planets in this area could be stripped, effectively making no
trail at all.
    Another suggestion was to follow the course the original
Borg cube was on when the Enterprise met it.  This led to
another problem, should they follow the cube where it was going
to, or coming from.  A wrong decision could waste a lot of time.
    "Robert," the voice came from the back of his mind.  "Follow
your instincts, they've never failed you."
    "But I've never had so little to go on." he thought back.
He opened his eyes, standing just outside the window was a woman
in a standard red command uniform.
    "Your closer than you think." she said in the back of his
mind.
    Anthony stood up and approached the window, he whispered
"This isn't the way we were suppose to be."
    "I know." she said.
    The woman faded and became his reflection as Anthony reached
out and touched the window.
    Anthony was startled by the piping sound from the bridge.
"Bridge to Captain Anthony."
    "Go ahead." he said to the window.
    "Sir, long range scanners show something moving across our
scan area."
    "Thank you, I'll be right there." Anthony stared back at his
reflection in the window for a second; then turned and exited to
the bridge.
    Captain Anthony walked out to see a graphic depiction of the
scanner display on the main view screen.  It was a semi-circle
grid with the flat side along the bottom of the view screen.
The center of the line indicted the Vigilante's current,
relative position.  Moving across the top of the screen were
three blips.
    "Report." he said as he took his seat.
    "Sir," O'Malley responded "We have three objects moving
across the limits of our scanners at high warp."
    "Can you tell anything about them?"
    "No, Sir, not at this range.  Current velocity, however, is
warp nine."
    "Thank you Ensign." Anthony said then turned to Tarva "Sound
yellow alert.  Have all hands prepare for battle stations and
silent running."
    He then turned back to Ensign O'Malley "Ensign, plot an
intercept course, I want to come in from behind.  First get us
behind them, then we can approach from the back."
    O'Malley worked for a few minutes then put a projected
course on the screen.  "Sir, at warp 9.2 we can get behind them
in about twenty minutes.  We could then approach them at a lower
velocity at our leisure."
    "Very good." Anthony smiled "Make it so."
    "Course laid in, Sir" O'Malley reported.
    "Engage."
    The Helmsman pushed a few buttons then reported "Warp 9.2"
the tactical display was replaced by the rushing stars illusion
of warp.
    Anthony turned back to Tarva "I want boarding teams ready to
explore the ships.  We'll start without the armor if possible,
we don't want to give away all of our secrets right off."
    He then turned to Norton "Have guards posted EVERYWHERE, if
these guys can board us I don't want them to have time to do any
damage."
    He then said to both Commanders "As of right now, nobody is
off duty."
    The bridge was suddenly full of activity as guards were
posted and non-regular stations were manned.  The guards seemed
unnecessary since the whole crew, even on the bridge were armed.
Two guards, however, were posted on either side of the view
screen.
    They all took time to check their weapons for full charges.
Every station through out the Vigilante had a phaser holder.
Some had boxes built into the consoles others had what looked
like holsters built into the sides of consoles and chairs.  The
crew kept the phasers with them at all times but placed them in
the holders for convenience while on duty.
    After ten minutes, Ensign O'Malley reported "Sir, I've
confirmed six, repeat six, Borg cubes traveling in formation.
Current velocity is exactly warp 9."
    The Vigilante dropped in behind the Borg ships keeping them
at about one quarter maximum sensor range.  The distance was
close enough to allow a rather good view at extreme
magnification.  The six ships flew in three pairs or two stacks
of three.  The precise symmetry made them look like three ships
on the long range scanners.
    "Analysis" Anthony said turning to Lieutenant S'Erlet for
the more precise sensor reports.
    "Sir, the ships have exactly the same measurements of the
ship that invaded the Federation."  He continued to adjust his
controls.  "They, however, have a greater mass.  Each ship, in
fact, has quite a different mass than the other."  he hit a few
buttons and the respective masses were superimposed over their
images on the screen.
    "How odd," Tarva said "that they would build seven ships of
exactly the same dimensions but make them very so in mass."
    "The mass on these ships is distributed quite unevenly, as
if it was added recently."  S'Erlet thought for a second then
added "Perhaps they are carrying cargo."
    Before anybody could respond, Ensign O'Malley spoke up "Sir,
I'm reading more ships behind us.  They've just come into
scanner range."
    "How many?" Tarva said very interested.
    "There's at least twelve and their gaining, but slowly."
O'Malley continued to watch her output.
    "Are they more Borg?" Anthony asked his frown betrayed his
concern.
    "Unknown at this time, Sir." O'Malley said "But at our
current velocity they should be in range to tell in about twenty
two hours."
    Anthony looked at his crew "Options."
    Tarva turned toward the Captain "We could wait for them to
get close enough for a better reading, or..." she hesitated.
    "Or what Commander?" Anthony asked knowing what she was
probably going to say.
    "Or, Sir, we could go back and take a look at them or just
stop and wait for them.  Either way, with them doing warp nine
plus, we would know in about 10 minutes."
    Anthony thought for a second, running his hand through what
little hair he still had on the top of his head, then said "Take
us down to warp four, but keep us out of their way.  We want
them to go past us no through us."
    The Vigilante swung wide to port then slowed down to warp
four.  Within minutes, O'Malley reported "Sir, I read fifteen
ships.  None of them appear to be of Borg design.  They are
traveling at Warp 9.01."  She continued to check her displays.
    S'Erlet then added "Sir, the ship designs do not match any
of those that the Federation has ever encountered."
    "They will be by us in about fifteen minutes" O'Malley
added.
    "Who are they?" Anthony asked to no one specifically.
    "They're us, Sir." Tarva said coldly.
    "Excuse me." Anthony looked at his first officer.
    "Sir, I believe that the six Borg ships have just
'assimilated' another civilization.  These fifteen ships have
taken pursuit, like any remnants of the Federation would have
done if the Borg had been successful at Sol-3."
    "That's why those Borg ships have extra mass, it does fit."
Anthony said.

    The fleet of alien ships was an impressive armada.  They
were obviously an assortment of different styles and classes.
The lead was a large triangular ship with a second smaller
triangle on top, an apparent bridge.  It made the Vigilante and
most of the other ships in the armada seem small.
    There were several other triangular style ships all much
smaller then the lead but obviously related classes.  The other
ships all had unique designs; some were long and sleek with
large batteries of weapons on them, others were boxy and clumsy
looking, apparently carriers of some sort.
    After they passed, the Vigilante took up behind them
matching speed.  Anthony figured that he should learn about
these people before going in for a close look at the Borg.
Besides, they were slowly gaining on the Borg and at the current
speeds, would be engaging them soon.
    "Sir," O'Malley said "I've found the transmissions from the
lead ship, and we have visuals."
    "Main screen." Tarva said leaning forward in interest.
    The main screen changed to what was apparently an older male
of a humanoid race.  He had long styled hair with full beard and
mustache.  His eyes were a bright red but otherwise his features
were strikingly human.  The man was wearing bright ornate robes
and jewelry.
    The sound was absent, at first, as the universal translator
learned the language.  The man appeared to be making a speech to
the rest of the armada...."so by the will of Lin'hrlar we will
triumph over these creatures spawned from depths of Zin'hrlar's
own madness.  I, the carrier of the heart of Lin'hrlar, will
lead you to the glorious retribution of our peoples."
    Others could be seen behind the speaker.  Some wore similar
ornate robes but not as splendid.  Most, however, wore more
practical uniforms.  All either carried side arms or swords.
    Anthony turned to Commander Norton "What is your analysis of
their strengths, do they have a chance?"
    Norton had been scanning the ships ahead of them "Sir, the
lead ship is highly armed and shielded.  The other ships have an
assortment of technologies.  Most of the technology is on a par
with current weapons in use by the Federation; including,
phasers, photon torpedoes and shield generation.  The larger
ships are carriers of probably small fighter craft.  These
fighters would account for why all of the ships have phaser
turrets that are good only for very close combat.  In fact, none
of the ships seem particularly suited for a prolonged ship to
ship battle."
    Norton paused as he analyzed more information from the
scanners "The lead ship appears to have very powerful phaser
cannons.  The cannons, however, would not be highly effective on
a small or moving target.  My guess is that they're meant for
long range bombardment."
    Tarva was standing, staring at the ships on the screen.
"What kind of propulsion systems do they use?"
    "They seem to use some sort of cross between fission and
anti-matter, probably based on compounds unique to their
systems.  Their actual drive system is similar to our warp but
slightly more efficient then the Federation's standard drives.
I think this accounts for their ability to maintain high warp.
It appears that they can maintain their current velocity
indefinitely, but can't do much beyond that."
    "So their efficiency curve goes right up to warp 9.01 then
drops pretty quickly after that, eh?"  Anthony had sat back in
his chair studying the ships in front of him.  "Now we have to
decide what we're going to do about them."
    Captain Anthony suddenly stood up "Lets discuss this some
place more suitable, Tarva, Simon in the Command Room.
Lieutenant S'Erlet, you have the bridge, let us know if anything
changes."
    "Aye, Sir."
    The three went into the command room to begin discussing
options on how to deal with their 'new friends'.

    "We don't have any choice." Tarva said.
    "How's that?"  Captain Anthony knew exactly what she meant
but he figured he let her voice it first.
    "We can not acknowledge ourselves to these people.  It is
directly against mission directives.  Their intentions are
clear, to attack the Borg.  If we reveal ourselves to them, we
reveal ourselves to the Borg.  Since there is no chance that
they will defeat the Borg, even with our help, then there is no
reason for us to interfere."
    The Captain sat back in his chair "I'm afraid I'd come to
the same conclusion.  It, however, haunts me to just sit back
and watch the remnants of an obviously rich and diverse
civilization be destroyed."
    Commander Norton agreed "It is obvious that we would be
unable to dissuade them from the attack.  They appear to be
driven by a strong religion.  I agree that we have no choice but
to remain observers to this conflict.  Perhaps we can use the
information we gain from the battle in future conflicts."
    Tarva suddenly looked up as if having a revelation "What
about survivors?"
    Anthony looked at her "What?"
    "There's going to be survivors, there's always survivors."
Tarva was living proof of that "Do we just ignore survivors?  If
we're just going to sit this battle out, we've got to do
something."
    "She's right, Sir.  We may be able to justify sitting this
out, but we must help any survivors."  Simon Norton seldom
seemed so passionate about anything.
    Anthony had to play devil's advocate to make sure they
thought of all proper precautions before bringing any of the
survivors aboard his ship.  "What will we do with a group of
aliens on this ship?  How will they react to us, will they
resent us for just sitting back and watching.  I know I would.
Will they cooperate with us when we try to achieve our goals.
If they never trust us, we'll have to keep them confined.
Remember how much trouble we had convincing Assali's men, even
after we convinced him, and we were all Star Fleet."
    Tarva and Norton looked at Anthony wondering what his
decision would be.  He finally said "We'll need security on hand
for everyone we bring aboard.  Treat them as unfriendlies,
that's the way they'll see us, and we must be prepared.  Have
force fields up when they're beamed aboard, we don't know what
their responses will be.  Keep them segregated and guarded, I
don't want them to be able to do any random damage.  At all
times, the safety and mission integrity of the Vigilante must be
maintained.  Is that clear?"
    They were going save some of these people, but probably
scare them to death doing so.
    "Sir, who do we rescue?  Do we take the masses off the ships
before they're destroyed?"  Tarva had to have some 'official'
guide lines set for the transporter operators.
    "We'll only take those people whom we can get without the
Borg noticing.  Escape pods only, and after the Borg have
departed.  We do not have room for the rescue of the whole
ships' crews.  Just those who would survive the battle itself
without us being here."  Anthony thought for a second then added
"If we can pull some of their small craft pilots just as their
ships are destroyed we'll do it.  None others, this battle would
be waged weather we were here or not.  These people have made
their own choice to die revenging their people, we can't deny
them that."
    The intercom opened from the bridge.  "Sir, this is
Lieutenant S'Erlet"
    "Go ahead." Anthony said immediately.
    "Sir, one of the ships has increased speed, it appears that
something is about to happen."  S'Erlet was extremely cautious
presenting his simple conclusion.
    "We'll be right out."  Tarva said and the three stood in
unison.

    When they got onto the bridge, it was apparent that the
largest of the 'carriers' had broken formation and pulled ahead
of the lead ship.  The ship had a large boxy body that looked
like it could almost hold the whole Vigilante.  Along the top
where the body slopped down toward the bridge area were thirteen
round hatches currently closed by spiraling doors.  There was
movement at the bottom of the ship.
    A large door had opened along the bottom with the opening
toward the back of the ship.  The door was centered in the ship
fore to aft and port to starboard.  It was three quarters the
width of the ship and a good quarter of the length.  The opening
created, was obviously protected by a force field since people
and equipment could be seen on the lower portion.  The center of
attention seemed to be an egg shaped craft about the size of a
large shuttle.
    The egg-shuttle soon lifted from its place and slipped free
of the carrier.  It immediately began breaking, and maneuvering
toward the triangular ship.  As soon as the shuttle was clear
the large door began closing and the carrier started maneuvering
to get back into formation.
    The course the shuttle was taking was extremely tricky.  It
apparently didn't have the ability to keep up at warp nine.  It
braked and maneuvered until it was directly in front of the
approaching lead ship.  The lead ship opened a door on its bow
just above the ports for its phaser cannons.  The shuttle
continued to break and adjust its course until the lead ship
swallowed it.

........
              **********
              Deny my God, yes, I could do it well;
              Yet if I did, what of my race, my name?
              How they would spit on me these dogs of hell!
              Spurn me and put me on the brand of shame.
              **********


    "Lord,"  The man had walked through the expansive, crowded
bridge of the Star Watcher then ridden up the lift to the Lord's
Dais.
    The man was Sir Utlin Robe'than second in command of the
carrier Star Controller.  Sir Utlin wore the black uniform of a
fighter pilot but the flowing red cape with high collar of High
Command.  Instead of a straight saber that was traditionally
worn by members of High Command, Sir Utlin carried a battle
blaster.  The large blaster hung comfortably in a similar size
black holster strapped securely to his left thigh.
    Sir Utlin stood out in all company, he had the slim, not
tall frame of High Command but was clean shaven with spiked
short hair of a warrior.  His light brown skin and bright blue
eyes betrayed his origins on Tregamalis, but, in this age of
enlightenment, that fact was ignored, usually.
    Sir Utlin stood with his head bowed and the scroll he was
carrying held tightly to his chest.  He stood next to, Lord
Lang'OA Dowe Fin Dragma, Lord Commander of the Lin'hrlar
Protectorate Fleet.  Lord Dowe finished the work he had before
him then turned to Sir Utlin.
    Sir Utlin could hear the Lord's robes rustle as he turned.
"Sir Utlin, Welcome back to the Star Watcher."
    Utlin snapped his hand down and looked up at Lord Dowe
"Thank you, my Lord." he said then held out the scroll and bowed
slightly from the hips "I bring you the 'Pledge of Following"
from Commander Travois of the Star Controller."
    The 'Pledge of Following' was an ancient custom among
Commanders when they were about to follow a Lord into what was
considered a hopeless, but Holy, battle.  Commander Travois was
always the last to issue his pledge, because he never considered
a battle hopeless.  The more 'hopeless' battles Commander
Travois survived, the later his pledges became.  The pledges
had, for some Lords, however, become more of a vote of
confidence then an oath of 'willingness to die'.
    This final remittance of the 'Oath' from Commander Travois,
was, in fact, a very ominous event.  It was an admission from
the most seasoned Commander of the Fleet that he truly expected
to die in the coming battle.
    Lord Dowe took hold of the pledge but didn't take it.  His
red eyes looked through his beard at Sir Utlin.  "It will not be
long now, Sir Utlin."  he said then took the scroll.
    Utlin stood up straight "Yes my Lord," he said formally "I
know."
    An aid working at a console next to Lord Dowe spoke up "My
Lord, we will be within range in ten par."
    "Very good, alert the fleet, start charging the guns." Lord
Dowe then turned to Sir Utlin "You'll want to get back to the
Star Controller before the battle begins." he said.
    "Yes, my Lord."
    Lord Dowe formally opened the scroll and read it, then
rolled it back up and placed it in a rack behind his throne.  It
joined 13 other scrolls.  "Dismissed."
    "Thank you, my Lord" Sir Utlin said then made a sharp
about-face causing his cape to fan about him then headed to the
lift.

..........

    Half an hour after the shuttle had entered the leader's
ship, S'Erlet reported "Sir, the carrier is opening its door
again."
    The Vigilante had taken up a position even with the plane
formed by the formation of the alien ships.  From this vantage
point they could monitor the entire fleet.  The giant door on
the carrier had begun to open again, only this time the opening
was toward the front of the ship rather than the rear.
    "Sir," S'Erlet said "I'm reading movement on the lead ship."
    The shuttle doors on the lead ship had also opened.  The egg
shaped shuttle suddenly exited at a high rate of speed.  It
immediately turned back toward the carrier.  The ship was
breaking severely causing it to approach the carrier extremely
quickly.  It landed in the opened bay almost recklessly.
Because of the size of the bay, it was obvious that the
precision flying was not needed this time around.
    "There's something else," Commander Norton said after
checking his scanners "All ships are starting to show large
power build ups.  The lead ship is apparently charging its
phaser cannons."
    "Can those things be effective at warp 9?" Lieutenant
S'Erlet asked.
    "They must know what they're doing." Tarva said then hit the
red alert button.
    Commanders Norton and Tarva began issuing instructions for
the transporter rooms to retrieve survivors.  Tarva then
reported to the Captain "There are drop teams ready for
deployment in the 'cavern'.  There are also guards standing by
in Transporter Room II. "
    Anthony turned to Commander Norton "Mr Norton, what's our
status?"
    "Sir," Norton replied immediately "Shields are at full
strength, cloaking is on line, all phasers are at full power and
all torpedo delivery systems are loaded."
    Tarva then hailed engineering "Commander Norton, report
status."
    There was a slight delay then Dolittel's voice came over the
intercom.  "Sir, engineering is sealed for battle.  All
personnel are on station.  Repair contingency and rescue teams
are stationed through out the ship."

    Commander Dolittel sat in the rough duty chair in his
command center between the two engine rooms.  Through windows to
his right and left he could see both anti-matter mixing
chambers.  The chambers pulsed casually, in unison, as if
nothing out of the ordinary was happing.
    Right now, the only access between the two rooms were the
doors into his office.  Dolittel could see his technicians at
station.  Most were strapped into rough duty chairs, others were
tying things up before getting into theirs.  There were also
armed guards standing in strategic locations in both rooms.
These guards had the most hazardous stations since evacuation
was designed to drop the rough duty chairs to safety.  The
guards would have to make a run for it if an evacuation was
called.

    "Prepare to drop out of warp on notice" Tarva said to the
helmsman.
    They then waited for the action to start.  The first out
ward sign was from the carrier.  The round doors on the top of
the ship spun open.  Similar doors on the other smaller carriers
also began to open.
    "I have numerous small power sources in all carriers."
S'Erlet said.
    As if to punctuate what S'Erlet just said, thirteen small
craft launched from the newly open doors.  There were apparently
two different types, one was a single seater, the other seemed
to be a two seater.  The single seater had a long tubular body
with warp style engines held out to the side like out riggers.
The two seater was rounded but wider with the pilots apparently
sitting side by side.

............

              **********
              Then, through the ringing terror and sheer hate
              Leaped there a vision to me- Oh, How far!
              A face, Her face...through all my stormy fate
              A joy, a strength, a glory and a star.
              **********

    Upon returning to the Star Controller, Sir Utlin was
confronted by the confusion caused from the impending
deployment.  The shuttle was immediately snatched up by giant
lifts and moved to its storage bay.
    Normally all activity would cease for the passage of a High
Commander, but in times of war these courtesies were suspended.
Sir Utlin always considered most courtesies to High Command a
hindrance anyway.
    Sir Utlin strode confidently across the bay barely aware
that the platform was moving beneath him.  Utlin's cape flared
behind him as he rounded the corner to the lift.
    An operator at the lift immediately came to attention and
saluted, right hand to the chest and a slight bow of the head.
"Sir," he said "Commander Travois wishes a conference with you
before your launch."
    Utlin returned the salute, but without the bow, and said
"Thank you, please take me to the Command Center."
    The open air lift had room for a dozen warriors but non rode
with Sir Utlin.  They sped up past the hangers of hundreds of
fighters.  The fighters hung by great hooks to be more easily
lifted into launch preparation areas.  The system allowed for
hundreds of fighters to be launched in minutes.

    Sir Utlin walked into the small office without being
announced.  If any other crew member, even Command, had done
this, Commander Travois would have their head.  Sir Utlin,
however, being second in command, always had direct access to
the Commander.
    Commander Travois Beu'lrmt Van'derla wore an ornate version
of the black warriors uniform that his first officer wore.  Over
the uniform he also wore a red cape but once again more ornate
and much longer.  Sir Utlin always considered capes that hung
lower than the knees to be impractical and too bulky.
    Commander Travois had long brown gray hair and full beard of
a proper High Commander.  He had light brown skin like Sir Utlin
but had bright red eyes like Lord Dowe.  Though none would admit
it, this one small difference would always relegate Sir Utlin to
Second in Command, and HE knew it.
    Commander Travois looked up as Sir Utlin entered the office.
"Welcome my friend." he said and stood to welcome him.
    Sir Utlin came to attention and saluted with a slight bow
and said "Commander, you wished to see me before I launched?"
    Commander Travois returned the salute with the bow, which
surprised Utlin "Yes, with the Pledge of Following I have
acknowledged to all that I believe this is a hopeless battle.
Many, however, believe that we can win because this is a Just
War."  the worry in Commander Travois' eyes was evident.  He sat
down heavily and leaned back.
    "My friend," Travois continued "These creatures have already
destroyed everything we ever held dear.  They've destroyed
hundreds of ships and killed millions of people.  Our kingdom is
dead.  Lord Dowe believes we can defeat them, I do not."
    Sir Utlin shifted from side to side not knowing why
Commander Travois was stating the obvious "Commander, is there
something more?"
    "I want you to promise me something, between friends and
warriors." Travois said and leaned forward a bit over his desk.
    Sir Utlin stiffened and said "Anything my Commander."
    Commander Travois withdrew the long straight sword from its
sheath on the side of his desk. "Promise me that you will fight
this coming fight as you never have."
    "That goes with out saying." Sir Utlin said almost insulted.
    "I'm not done." Travois said unannoyed by the interruption.
He then handed the sword to Utlin, hilt first "I also want you
to promise me that when the battle is lost, that you will not
allow yourself to die uselessly.  Someone must live to tell
others of our great peoples and of the these evil creatures."
    This was not an easy thing to ask, their people never walked
away from a battle.  They had a strong tradition of winning or
dyeing, that is what they were doing here.  They had lost, but
they still lived.  Tradition and honor dictated that they had no
other course of action.
    "Take this sword" Commander Travois said "It was given to me
by my father and he his.  Its been in my family since the time
when it was our only weapon, when we truly lived and died by the
sword.  It was a time of true warriors and honorable foes.  Take
it now, in honor of my son who stands now, controlled forever by
those creatures."
    Sir Utlin stood for a moment, looking at the sword being
offered.  If he accepted it, he accepted the charge.  He was not
sure if he could accept it, it went against all that he had
lived by, every code, every oath.  Was it right for him to put
them aside when all around him would not?  Never before had one
day seemed so far away and unreachable.
    Utlin saluted again and said "What you ask of me, my
Commander, is the most difficult mission I could ever face."
With that he reached out and grasped the sword firmly.
    "I could have chosen none better for my second, you have my
leave."  Commander Travois said.  He then stood, saluted Sir
Utlin and watched him leave, red robe flowing out behind him.

              **********
              Beneath the pines, where lonely campfires gleam,
              In seas forlorn, amid the deserts drear,
              How I gladdened to that face of dream!
              And never, never had it seemed so dear.
              **********
                        "The Soldier of Fortune"
                             Robert Service


            to be continued..............


-----------




                   T H E   V I G I L A N T E

                              IVB

                        "Ring of Spears"
                          (continued)



              Must I now forever and forever go from you?
              Ah, yes I must...for if I do this thing,
              How can I look into your face again?
              Knowing you think me more than half a king
              I with my craven heart, my honour slain.
              ..........
                        "The Soldier of Fortune"
                              Robert Sevice


    Soon all carriers were blossoming an assortment of small
fighters.  The Vigilante had to pull further back to stay out of
the way of the growing swarm of small ships.
    "Sir," S'Erlet said "Current count of fighters is 1,238 and
growing."
    The Borg were currently visible only on high magnification
and holding warp 9.  Suddenly the Leader's ship glowed blue
around its gun ports.  It released two large beams of blue
light.  The beams continued long after they had disappeared into
the distance.
    The Vigilante was watching the ship and the Borg on a split
screen.  The beams had merged to one by the time they hit dead
center on the middle, left Borg cube.  The cube suffered no
obvious major damage, but its lights seemed to dim slightly and
some sparks erupted from the impact area.  All six cubes,
however, immediately dropped out of warp.
    "I think they just pissed them off." O'Malley whispered to
herself.
    "I think your right, Ensign" The Captain responded from
behind her.
    At warp 9.01, the fleet had to almost immediately drop out
of warp to keep from running into the Borg.  The fighters and
other ships leaped forward attacking all six cubes.  The
leader's ship had dropped out of warp as soon as it had fired.
It now approached at impulse speeds.
    The carriers stayed just out of standard Borg range allowing
their fighters to do the work for them.  The five undamaged
cubes started taking immediate tolls on the fleet.
    Each cube projected multiple tractor beams holding the
larger ships at a safe distance while their shields absorbed
what weapons that could be released on them.  The Borg then
initiated their cutting beams, one ship at a time.
    The fighters headed through the Borg's shields and fired
indiscriminately on the cubes.  The Borg's reaction was
immediate, they started firing energy charges into the swarms of
fighters.  The charges took out several of the fighters at a
time.
    "Sir," Norton said "I've got a message coming from one of
the Borg cubes."
    "Put it on the screen." Anthony responded.
    The screen changed to a scene of a bearded humanoid with
several Borg adaptations.  Sections of the mans hair and beard
were shaved to make room for an appliance.  Tubes lead from his
shoulders over his head connecting to the appliance.  His eye
that wasn't covered was bright red, like the man's they saw in
the message earlier.

    The voice was mechanical and sounded like several were
talking at the same time.  "The fighters are irrelevant." It
said  "You will all be assimilated like the rest of your people.
Resistance is futile."

    "Have we gotten any of the pilots yet?" Anthony asked.
    "No, Sir" Norton said "The Borg defenses against the
fighters are too quick, and the ships aren't well shielded we
have no way of knowing who to track.  When they're hit, they
explode immediately"
    "Tell them to keep an eye open, there might still be
somebody we can grab." Anthony looked back at the image on the
screen continuing to tell all how irrelevant and futile the
whole situation was.  "And get that off the screen."
    The on going battle reappeared.  One of the large ships that
had moved in on the cubes was beginning to break up.  The cube
had several tractor beams on it and was splitting it down the
middle.  So far, they hadn't seen any escape pods launched from
any of the ships.
    Then a new strategy became apparent, the fighters after
getting through the shields were able to blast holes in the Borg
ships.  They then flew into the ships.  The cube this seemed to
work best on was the one hit by the long range blast.  But
several others also appeared to have been entered by fighters.

.............

    By the time Sir Utlin had made his way to the launch deck,
his wing and many others had already launched and were engaging
the enemy.  His personal fighter was a modified (of course)
X1-90 single pilot attack craft.  It had dual warp blasters
mounted on the sides where the standard phaser cannons should
be.  There was a standard phaser cannon in the nose, taking the
place of survey equipment.  The survey equipment was meant for
peace time missions and war time surveillance missions, neither
of which Sir Utlin was involved in anymore.
    The craft was also fitted with experimental life support
equipment.  The equipment was said to extend life support time
indefinitely, but he'd never needed it.  As Sir Utlin waited for
the fighter to be prepared for launch it occurred to him that he
had no place to go if he did survive the battle.  His life
support may last indefinitely, but he only had limited food and
very limited room to 'live' in.  These things shouldn't concern
him at this point though, his first mission was to fight
valiantly in the battle.  If, in the end, he found that he was
still alive, he'd worry then.
    When the ship was placed on the launch line in front of him,
Sir Utlin placed Commander Travois' sword in the standard, but
never used, scabbard behind the seat.  He folded his cape and
also placed it behind the seat.  He then took the helmet off the
seat and put it on.   After he lifted himself into the cockpit
he connected the helmet's wires to the navigation and fire
control computers and secured the belts.  The straps pressed him
firmly into the custom fitted seat.  The g-suit he wore under
his uniform inflated to prevent high-g black outs.
    The launch sequence was projected into the face shield of
the helmet.  "Sir Utlin," came  the Voice from flight control
"You are cleared for launch." as soon as the voice ended, the
seat seemed to wrap around him.  The launch tube rushed at him
then suddenly turned to stars, black and mayhem.

.............

    The Vigilante had parked over-head looking down on the
action.  The Borg ships remained in their formation but the
damaged cube seemed to stray a bit.
    "Sir, I believe the lead ship is about to fire on the Borg
again.  I read the same power build up as before." Norton
reported.
    Soon the ships that were maneuverable broke from the attack
and away from the line of fire.
    "Keep us away from them." Tarva said as some of the swift
fighters headed in their direction.
    "Have any of the fighters come out of the cubes yet?"
Anthony asked.
    "I haven't read any exiting fighters" S'Erlet reported.
    As soon as the path was cleared, except for the two ships
still held by tractor beams, the Leader's ship fired again.
This time, it targeted the cube that seemed to have taken the
most damage from the fighters.  There wasn't even distance
enough for the two beams to appear to fully become one.  The
cube glowed bright blue as the energy from the beam dispersed
around its shields.
    As soon as the ship ceased fire, the fighters swooped back
in on the Borg.  This time, however, the fired on cube broke
formation and went after the leader's ship.  Apparently, after
firing the weapon, the leader's ship wasn't able to maneuver
quickly.
    A good third of the fighters broke off from the remaining
five cubes and attacked the one going after their leader.  The
four remaining maneuverable cubes seemed to take this as a cue
and spread out.  They stopped using the grab and cut technique
and started firing more energy charges.  The fighters and ships
quickly succumbed to the new method.  Even the carriers that had
stayed in the background were now targeted.
    The large carrier that had released the shuttle took several
hits in the side.  It had continued releasing fighters and had
even collected some damaged ones on the giant bottom door.  Now
it rocked from internal explosions as the fighters inside
ignited from chain reactions.

............

    When Sir Utlin launched from the Star Controller he had a
difficult time not being hit by any of the fighters.  He could
hear the constant chatter of the fighters from his command.  All
semblance of order or controlled attacks had disappeared.  The
Borg dealt with them in a very efficient manner, just destroy
anything that comes near.
    Before he had a chance to approach any of the cubes, he
heard the Star Watcher's warning of 'fire in the tube'.  He
didn't hesitate in following the other fighters pulling away
from the enemy.
    He thought that he could hear the shot, using the Star
Watcher at point blank, in the middle of battle, like this, was
unheard of.  When he swung around back toward the Borg he
expected to see only five ships.  Instead, he saw all six, only
this time one had broken formation and was going after the Star
Watcher.
    The Star Controller tried to divert the Cube but only
sustained damage as it passed.  Sir Utlin could see the his ship
rocking from exploding fighters and fuel.  It wouldn't be long
before Commander Travois made good on the Pledge of Following.
Many of the other fighters headed toward the Cube to protect
their leader.  Sir Utlin knew it was fruitless, they should
concentrate on the damaged ship.  Perhaps they could at least
destroy one.
    Diverting his course toward the damaged Cube, the last he
saw of the Star Controller was it lining up for its destiny.
"Good by my friends." he said aloud and accelerated to his own
destiny.

............

    The great carrier lumbered toward the cube attacking the
leader's ship.  As it approached, they could see that no escape
pods were being ejected.  The immense carrier, the pride of its
fleet, was dwarfed by the single cube.
    When the carrier was attached to by the tractor beam, Norton
looked up and said "She's powering up her warp engines."
    Before anybody could react, the carrier jumped to warp and
collided with the Borg ship.  The explosion rocked the Cube
causing most of one side to cave in and open to space.  They
could see debris flying from the opening.  Almost immediately,
the hole slowly started closing in.
    The leader's ship had taken sustained damage and didn't have
the power to pull away from the Cube while it was regenerating.
While the hole was still open, the fighters took the opportunity
to enter the ship.  Several small surface explosions could be
seen from the damaged caused by the fighters on the inside.
This was the first time fighters on the inside were obviously
doing something.
    The number of maneuverable ships had been greatly reduced.
Only five seemed in relatively good repair.  The rest were
either disabled like the leader's ship, or destroyed.
    The four remaining undamaged cubes strung out across the
battle area.  They began meticulously destroying all ships in
their path.  It was as if they had had enough of this game and
it was time to clean up.
    The Borg ship involved in the collision was only about two
thirds finished with its repair to the hole when it locked back
onto the leader's ship.  This time the cutting beam took obvious
chunks out of the haul.  As these pieces were absorbed into the
superstructure of the cube, the hole closed up a little more.
    The Borg's advancing destruction of the leader's ship was
evident, but still no escape pods were jettisoned.  Suddenly,
the Borg let go of the ship and moved away from it.  Just as the
Cube got some distance, the ship self destructed.
    Within a few more minutes, one of the remaining ships made
another suicide run on a cube that had grabbed it.  This time,
however, the Borg were ready for it and the ship exploded
harmlessly against the cube.
    The remaining ships and fighters took the same tactics, as
the Borg got a hold of them, they would implement some sort of
suicide maneuver.  Though valiant, none were successful.  The
Borg had learned from the first ship to do it and were prepared.

............

              **********
              No! No! my mind's made up. I gaze above,
              Into that sky insensate as a stone;
              Not for my creed, my country, but my Love
              Will I stand up and meet my death alone.
              Then though it be to utter dark I sink,
              The God that dwells in me is not denied;
              "Best" triumphs over "Beast" -and so I think
              Humanity itself is glorified....
              **********


    Sir Utlin flew wide around the other Cubes.  Through his
radio he could hear the reactions to the destruction of the Star
Controller.  The destruction also seemed to push four of the
remaining Cubes into action.  They fanned out and started
destroying everything in their path.
    One of the things he heard his comrades doing was flying
into the Cube the Star Controller had just rammed.  This sounded
like a good idea.  With his extra fire power he may be able to
open a hole big enough to get into the damaged cube.
    On approach, his sensors read no shielding from the Cube.  A
few other fighters were flying around the ship virtually
ignored.  They seemed to be indiscriminately firing on the
superstructure.
    He switched to a general scrambled frequency "Attention,
this is Red Wing Commander, what wing are you?" the ship to ship
signals had very limited range to keep down the confusion.
    "Go ahead, Red Wing Commander, this is Blue Wing, or at
least what remains of it."  Blue Wing was from Star Fire, a
small but highly decorated carrier, it was one of the first
destroyed.
    "Do you have any strategic targets on these things?" he
asked as he swooped over the massive ship.
    "No sir, not really, we've just been hitting anything that
looks important." returned the young voice.
    "Have they returned fire?" Utlin asked making a high-g turn
and flying back.
    "No Sir, We think Lord Dowe's guns shorted them out pretty
good.  They must be ignoring us to fix the damage."  Sir Utlin
couldn't tell which of the ships was talking to him since all of
them continued their strafing runs.
    "Well" he said "I think it's time we pay them a closer
visit."  Utlin said as he lined up for his run.
    "Sir, a couple of us went in, but we haven't heard from them
and we can't seem to make that much damage anymore."  The voice
came back.
    "I think I'll give it a try."  Sir Utlin said and powered up
all of his weapons.
    "Sir, if you open it, we'll follow you in."  the boy sounded
confident, confident that he was about to die.
    The ships stopped their normal runs and started gravitating
toward his position.  When their flight patterns seemed to be in
sync with his, he started his run.
    This time, instead of coming in parallel for the normal
strafing, he went straight at the ship.  His right index
fingered started pumping the trigger for the warp blasters.  The
fighter bucked every timed he fired its blasters.  He poured
full power to the front shield and continued to fire.  The
surface of the Cube disintegrated under the blasters.
    His scanner showed a large open area inside the cube about
30 finlars from the surface.  Debris had started flying out of
the hole from depressurization.  He continued to pump the warp
blasters causing explosions deeper into the hole.  He then
turned the phaser cannon onto automatic pulse, maybe it would
held chop up some of the debris.
    Just as he approached the opening, his first instinct was to
back off the throttle to hopefully navigate to the interior.
Instead, he punched the throttle up full and was pressed into
his seat from the acceleration.  He was tempted to hit the warp
engines but knew that was instant death.  He continued to pump
his warp blasters but all he saw were explosions and debris
hurling at him.  He let go with a primal scream as he flew into
the destruction.
    The promise to stay alive was the furthest thing from his
mind.
              **********
              "And now, my butchers, I embrace my fate.
              "Come! let my heart's blood slake the thirsty sod.
              "Curst be the life you offer! Glut your hate!
              "Strike, Strike, you dogs! I'll not deny my God!"
              **********

............

    Finally, the six cubes reformed and warped away.  The one
cube that had been struck originally seemed unable to maintain
the perfect formation.  The six, however, continued back on
their original course.  This time they held a much slower pace,
warp 8.6.
    Just before they warped away, Norton said "Sir, I read an
explosion on the damaged Borg ship."
    "On the screen." Anthony said.
    Norton put the six ship formation on the screen then zeroed
in on an area of the one cube that wasn't holding perfectly in
the formation.  On its surface were a series of explosions that
appeared to be initiated from the interior.  Finally, just as
the cubes jumped to warp, a lone, single seat fighter emerged
from the hole.
    The fighter emerged into a sea of debris.  Suddenly alone,
left behind by the ship it came from.  It limped slowly through
the devastation surveying for survivors that weren't there.
    Tarva turned to Anthony "Sir, I believe we have our only
survivor."
    Captain Anthony turned to Commander Norton "What's your
analysis of that ship?"
    Norton was already studying his tactical scanners. "Sir, I
read one life form, apparently uninjured.  The ship no longer
has warp capability, but has life-support."
    "Open hailing frequencies." Anthony said.
    "Hailing frequencies open." Norton returned.
    Anthony stood and looked at the fighter on the screen as if
he were talking directly to it "Attention fighter, this is
Captain Anthony of the United Star Ship Vigilante, do you read
me."
    There was a short pause then a voice came back "This is Red
Wing Commander, please state your position, I do not read you on
my scanners.  They could, however, be damaged."
    Anthony smiled, this was a pretty cool cat.  "I did not
state our position, but I do offer you our assistance."
    There was another pause "Your a bit late to be offering
assistance."
    "Does that mean you do not desire our assistance?"
    The small ship did a few turns and loops, obviously looking
for the source of this conversation. "If your really around
here, I would definitely appreciate your assistance."  He didn't
sound too committed.
    Anthony smiled "Okay." he said "Now, here's where your going
to have to trust us."
    "I don't like the sound of that."
    "Don't worry," Anthony said "have I ever lied to you."
    There was some nervous laughter in reply.
    "Now, what we would like you to do is shut down all power to
your weapons and engines." Anthony said very carefully.
    "And then what?" he was almost flip.
    "And then wait."  Anthony said then added "I must warn you
that if you power anything up, we'll be forced to interpret that
as a sign of aggression."
    "Is that all?"
    "That is all, do we have a deal?"  Anthony was beginning to
like this guy.
    "I don't seem to have much of a choice.  Powering off now."
The man still didn't seem too convinced.
    Norton looked up "He's powered down all main systems."
    "Okay" Anthony said "Tell Shuttle Bay Two to lock on to the
fighter with the tractor beam.  Have transporter room two stand
by, if he powers up, pull him out and destroy the ship."
    "Aye, Sir." Norton said as he reach to his comm switch.
    Anthony then added "Also, have security meet us in Shuttle
bay two."
    Norton grinned slightly and said stiffly "Of course, Sir."
    "Commander Tarva, Your with me." Anthony turned toward the
lifts with Tarva a step behind.

...........

    What was going on, were the Borg back? Was he dead and
talking to Lin'hrlar himself.  Was he just space happy and
hallucinating?  It was too soon for that.
    It didn't matter, with his warp drives out of commission, he
had no where to go.  He had enough supplies for a month but what
good would that do him at sub-light speeds?
    He breathed deeply whispered a short prayer to himself then
started shutting down his systems.  What ever was going to
happen he hoped it would happen soon.  How long should he wait
to power back up before they wouldn't take it as an act of
aggression.
    What if they just wanted him to power down so they could
attack him.  Some sort of pirates waiting to salvage what little
debris was left of the fleet.
    Suddenly his ship jerked, he almost reached up to power on
thinking he was being attacked, but hesitated.  There were no
explosions, there were no lights he wasn't under attack. The
ship was moving on its own.  This wasn't possible, unless
something was pulling.  He started looking around maybe he could
see something.
    The stars in front of him started looking blurry.  Some
seemed to be getting close too quickly.  The stars shimmered and
disappeared revealing a large dark gray ship.  He was extremely
close, his reflexes caused him to jerk the joy-stick hard to
port to avoid a collision.  It  didn't work, of course, since he
wasn't under his own power.
    He appeared to be heading directly toward the back of the
ship.  Four large, flatten, cylindrical, engines, spread out
from the body, two above him and two below.  The engines glowed
soft blue down the sides.
    Ahead of him the four engines swept away from a large
bulbous body.  The ship was smooth and symmetrical, there were
no gun turrets, or ports.  It was no wonder they wanted him to
power down, a lone fighter could reek untold damage on this
ship.
    There were three doors in the very back of the ship two
smaller ones side by side over a much larger one.  The door on
the right started opening and his craft was being pulled toward
it.
    "Well," he said to himself "that looks like my destination."
    Where the door had been, was replaced by a shimmering blue
force field.  His ship glided smoothly through the field and
into a well lit bay.
    There were two other ships in the bay, both looked like some
sort of transport one had star drives, the other did not.
Standing to the side were some people in baggy black uniforms,
must be this ships security.
    A couple appeared to be like himself, sons Lin'hrlar the
others were some creatures unlike anything he'd ever seen.  His
ship came to rest directly in front of the reception committee.
He pushed the canopy open button but kept an eye on the group
the whole time.
    One of the group stood out, he was wide shouldered with
non-alien features.  He had long hair like a High Commander, but
he was clean shaven, like a warrior.  He stood in the middle
flanked on either side by both dark skinned creatures and few
other non-aliens.  One thing he noted was that they all carried
side arms.  Another thing very strange occurred to him, some of
these creatures were apparently females.  What strange creatures
these were to not only bring females with them, but arm them
too.
    They continued to wait for him to conclude any business he
needed to, very courteous.  He disconnected his helmet and stood
up, then stepped down on to the ships built in ladder.  When he
was half way down, he removed his helmet and placed it on the
seat, then reached behind the seat took out his cape.  By the
time he jumped to the deck the red cape was flowing out behind
him.
    A dark skinned non-alien approached him and handed him two
small devices.  From the way he motioned it appeared that one
was to be place in his ear, and the other around his neck with
the disk on the front of his throat.
    It could be a trap, something so they could control him.
Sir Utlin hesitated, waiting for some kind of explanation.  He
also rested one hand comfortably near his battle blaster.
    Finally the man with the long gray black hair stepped
forward holding a small device in his hand.
    "Well come aboard the U.S.S. Vigilante." he said through the
device in his hand.  It was some sort of translator.  "I am
Captain Anthony, I believe we've already spoken."
    Sir Utlin snapped to attention and saluted, including a
slight bow of his head "I am Sir Utlin Robe'than, First Officer
of the Carrier Star Controller, and Commander of Red Wing
Tactical Fighter Squadron.  I am in your debt for your
hospitality, Captain."
    The Captain though obviously unfamiliar with the salute,
immediately returned it.  He then said through the box in his
hand "It would make communication much easier if you could use
the devices you were given."  He then indicated the objects Sir
Utlin still held in his right hand.  "They'll allow the computer
to translate automatically"
    Sir Utlin considered the devises carefully, they seemed
harmless.  He started with the piece for the ear.
    "A lot better then this contraption." the Captain said
apparently in Sir Utlin's own language.  What a marvelous
device.
    He then strapped the other piece around his neck, it fit
like a piece of jewelry.  "What is this piece suppose to do?" he
said.  The rest in the room smiled as if they recognized the
question, but he heard it in his own language still.
    "That device translates for the rest of us.  By
inconveniencing you slightly, the rest of the crew will not have
to wear the translators while you are with us." the Captain
said.
    "Now for the rest of the introductions."  The Captain
continued.  He indicated the short dark skinned female creature
standing next to him.  "This is my first officer Commander
Tarva."
    Sir Utlin looked at the creature, she almost looked normal
but her forehead rolled slightly and her hair started at about
the top of her head.  She looked like she was a cross between
the Children of Lin'hrlar and some of the even uglier creatures
standing about.  He considered 'her' for a moment then decided
that since she had been indicated as second in command he would
treat her as he would wish to be treated aboard the Star
Controller.
    He gave her his stiff salute and slight bow, the same as
he'd given the Captain, "Commander Tarva".
    She comfortably returned both, but didn't say anything.
    "If I may inquire," the Captain said "by what name are you
used to being addressed?"
    They had given him simple names, obviously how they
addressed one another.  He'd given them his full title, his own
people would know the proper salute, these people did not.
Their translator changed the words for them but didn't indicated
customs.
    "I am officially addressed as 'Sir Utlin'" he said formally.
    "Very good, Sir Utlin"  The Captain said as another creature
came in.
    He looked almost normal but he was completely bald, had
pointed ears and a very slight green complexion.  As the man
approached Captain Anthony indicated him and said "Sir Utlin,
this is Commander Norton, he is in charge of security on the
Vigilante."
    "Commander Norton." Sir Utlin said and repeated his salute.
    Norton retuned the salute without hesitation.  Then turned
to the Captain "Sir, if I may."
    The Captain looked slightly unsure then said "Of course."
    Commander Norton turned back to Sir Utlin "Sir, I'm going to
have to ask you for your side arm, for the time being."
    Utlin hesitated for a second then decided that they really
didn't have to ask.  He pulled it from his holster and handed it
Commander Norton, who took the weapon bowed slightly then handed
it to one of the creatures standing nearby.
    "Now," the Captain said "If you'll come with us we have much
to discuss before we can get you settled in."
    "I believe we do." Sir Utlin agreed and followed the group
out of the hanger.
    As they left, he noticed that technicians were circling his
fighter with scanning devices but appeared to be keeping a
respectful distance.  If this was a sign of how he was going to
be treated, it might not be too bad.
    They entered a nearby room with a long table at on end and
rows of chairs facing it.  It was some kind of seminar or
meeting room.
    Sir Utlin was ushered to one of the chairs then Captain
Anthony, Tarva, and Norton also took seats.  Two of the ugly,
ridged, dark skinned creatures took guard positions on either
side of the door.
    "To get started, perhaps I should tell you who and what we
are.  Perhaps I can answer some of your obvious questions before
asked." The Captain said.
    "That sounds like a good way to start." Utlin agreed.
    Before Anthony could begin a piping sound came out of the
ceiling. "Bridge to Captain Anthony." came a female voice.
    "Anthony here, go ahead"
    "Sir, we have the Borg back in scanner range"
    "Very good, maintain distance."
    "Aye, Sir." returned the voice then the speaker obviously
turned off.
    Utlin looked slightly alarmed "The Borg have returned?"
    "No" Anthony said "We jumped to warp to follow them as soon
as you were in the bay."
    "I didn't feel the acceleration." Utlin returned.
    The Captain smiled proudly "You rarely do."
    Captain Anthony then proceeded to tell Sir Utlin about the
Federation and their encounter with the Borg.  He also told him
about the development of the Vigilante to spy on them and gather
information.  Then finally about their presence during the
battle.
    This infuriated Sir Utlin. "You mean that you sat back and
watched the remains of my people get destroyed by these evil
creatures and did nothing?  How could you, what kind of
creatures are you?"
    The battle seemed to weigh heavily on the crew of the
Vigilante.  These allegations obviously disturbed them.
    "What would you have had us do?" Anthony asked coldly.
    "You could have helped us, you obviously have some sort of
weapons." Sir Utlin insisted.
    "Yes, we have weapons, very similar to what your ships had.
Do you think that in the end, we could have made a difference?"
Anthony was speaking very carefully.
    "You could have done something, maybe helped destroy one of
those things."  Sir Utlin knew now why they had taken his
blaster, they must have predicted his anger.
    Anthony sat back, obviously disturbed by the events.  "You
don't know how much this decision weighs on me and my staff.
All of us have been personally affected by the Borg."  Anthony
shook from some kind of memories.  "But we have a duty to our
own people.  They are depending on us to return with information
that they may be able to use to defeat the Borg once and for
all.
    "If we were to valiantly engage in a hopeless battle, then
we would have betrayed the whole Federation.  They are depending
on us to do our best to return with the intelligence they need."
Anthony looked at Sir Utlin carefully, hoping to see some sort
of understanding.
    Utlin sat back and considered Captain Anthony's argument, he
tried to put himself in their place.  As a warrior, it was tough
to understand sitting out such a battle.  But perhaps, they had
a point, to put ones own civilization over another dying one.
It was what he was doing, not caring about the needs of their
civilization.
    "I suppose," Utlin said slowly "I can understand the reasons
that would cause you to stay out of our battle." he hesitated
then continued "I can also understand the pain and helplessness
you and your warriors must have felt doing so."  With that said
Sir Utlin suddenly felt a closeness to these people and the
inner conflicts they must endure.  He prayed that Lin'hrlar
would look after them.
    "With that cleared up," Commander Tarva said "We must make
some decisions."
    "Such as?" Sir Utlin tried his best not to talk down to this
female creature.
    Captain Anthony spoke up before Tarva could answer "Sir
Utlin, I must excuse myself, there are other duties that I must
attend to."
    "I fully understand, Captain" Sir Utlin said and stood as
Anthony did.
    "I leave you in the very capable hands of Commander Tarva, I
know she will be able to help you find a proper place among us."
With that Captain Anthony turned and exited.  At the same time
Commander Norton excused himself and took the guards with him.
    Sir Utlin soon found himself alone with the creature who was
second in command of this ship.  He was very uneasy with the
thought of a Female on a war ship but a female alien in charge
of one would take some real getting used to.  He looked at her
as she took her seat across from him.  She seemed short even
compared to her comrades, but very confident.  There had to be a
reason she was second in command.
    After he took his seat she spoke again "As I said, we have
some decisions to make.  First we'd like to have permission to
examine and repair your fighter.  When we finally reach our
destination, you may wish to have use of it."
    "You mean you haven't examined it yet?" Sir Utlin sounded
slightly surprised.
    Tarva smiled "We've done all we can without touching it,
they have strict instructions to respect your property."
    "I have some personal property I'd like to retrieve before
your technicians start working on it." Utlin decided to see how
far he could push it.
    "Very good.  Now about what we're going to do with you.  I
figure there are several options you could chose from if you
wish."  Tarva said remaining very business like.
    "I get to chose my fate?" Sir Utlin asked surprised.
    "Of course, we do not want you among us if it is not where
you want to be.  That brings us to your first option, we could
repair your craft and send you on your way."
    Sir Utlin frowned at this thought.  There was literally no
place for him to go.
    "Now if you wish we could take you to the Borg and let you
fight your own battle, this is I guess very similar to the first
option."  Tarva was mentioning these options knowing full well
Sir Utlin probably wouldn't seriously consider them.
    "Do you have any less drastic options for me." he asked
giving her lead to continue.
    "We do not take observers on the Vigilante." Tarva said
"Therefore, if you chose to remain, you will have to join the
crew.  Our crew is made of a diverse number of different peoples
from different cultures, if you chose to join us, you will have
to accept that.  You will have to accept our mission and our
goals.  We will, however, try to work with you to find for you a
position worthy of your skills and experience.  Does this sound
acceptable?"
    "Just like that?" he asked "How do you know you can trust
me, that I won't work for my own agenda?"
    Tarva leaned forward, Sir Utlin could see a fire in the
creatures eyes that sent a chill down his spine.  "We will not
stand for any part of this crew not being part of the team.
There is no room out here to deal with infractions in any but
the harshest of manners."
    Sir Utlin had to keep himself from swallowing hard, perhaps
he would be better on his own.  "What if, in the future, I wish
to leave the Vigilante?"
    "As long as your departure would not adversely effect our
mission, we could not prevent you from tendering your
resignation."  Tarva said simply.
    "Can I have some time to think about it?" Sir Utlin asked.
Perhaps if he had sometime to get a better feel for what these
people were all about.
    "Of course, but we don't know when the Borg will get to
where their going.  So you may not have time to become a proper
member of the crew by the next emergency."
    "I'll just have to risk it."
    "Until then," Tarva said "Lets get you set up in your
quarters.
    "Very good." Sir Utlin said and stood with Commander Tarva.
    When they walked out of the room, the two guards that had
been in the room with them were waiting just out side the door.
The first place they went was to the shuttle bay.  Sir Utlin's
fighter was flanked by several guards who came to attention as
they approached.  Several techs continued to walk around the
craft with hand scanners.
    Sir Utlin climbed up to the cockpit and removed a few
things; first was a long straight sword from behind the seat,
the other was a pack of apparently personal gear.  He then
approached Commander Tarva who was talking with a large bearded
man.  Sir Utlin wore the sword in the seldom used loop on his
belt and carried the bag as he approached.
    "Sir Utlin," Commander Tarva said "this is Commander
Dolittel, he is our Chief Engineer and will in charge of the
repairs of your craft."
    Before Sir Utlin could properly salute Commander Dolittel
held out his hand and said "Welcome aboard."
    Not knowing the proper response, Sir Utlin held his hand in
reply.  Commander Dolittel took hold of his hand with a firm
grip and shook it saying "I can't wait to take a look at that
fighter of yours, don't worry, we can get it flying better than
new."
    "I hope you can." Sir Utlin said not knowing how to respond
to this man.
    "Now if you'll excuse me, with your permission, we'd like to
get to work."  Dolittel said after letting go of Utlin's hand.
    "Thank you." was all Sir Utlin could think to say.
    As Dolittel walked away, Utlin could see him motioning to
technicians and heading toward the fighter.  He then looked at
Tarva questioningly.
    "I must apologize for the informality of our Chief Engineer,
he is not a great military man, but he is a gifted engineer."
Tarva said, then headed toward a door.  "Now, lets see if we can
find proper quarters for you."

   Sir Utlin was assigned what was called junior officer's
quarters.  It had two rooms with two bunks in one of them.
Tarva explained that there were no singles available, but this
was the next best thing, since he would not have a room mate.
    Commander Tarva then took the time to show him the different
features of the room, including the 'replicator' and 'head'.
She showed him how to access the computer verbally to get a list
of foods and other things available through the replicator.  He
wasn't sure how it worked but was intrigued with the technology.
    Commander Tarva then took him on a tour of the ship,
including the very small bridge.  It would have been difficult
for him to believe a ship of this size could be run effectively
from such a small place, but it seemed to be working just fine.
He was also shown a shuttle bay they called the 'cavern'.  She
seemed quite proud of its size, but it paled in comparison with
the Star Controller.
    She also showed him several rooms she called transporters.
He wasn't quite clear about their function, but was sure he
would find out.
    He finally decided that of the functions shown him, he was
best suited for security or something they called the drop
ships.  He would have to look into them more closely.  They did
make it clear, however, that within their normal mission
parameters their was no place for his fighter.  Though it had
powerful weapons, it lacked other technology vital to
maintaining mission integrity.
    Tarva had assured him that unless somebody specifically
challenged him, he had access to the ship, within reason of
course.  He decided to visit a place of gathering Commander
Tarva had pointed out, some sort of cafeteria.  Tarva had even
suggested visiting the place on his own, to get a 'feel for the
crew'.
    He had sat in the place a short time when two non-alien
looking females approached him.  One he recognized from the
bridge, she had been introduced as a navigator the other was
unfamiliar.
    He stood as they approached "May we join you?" asked the one
with darker skin and straight black hair.  He found both
extremely attractive.
    "Of course," he looked at the red headed female "Ensign
O'Malley wasn't it?  But I don't believe we've been introduced."
he said to the other.
    She smiled "I'm Lieutenant Whitecloud, but you can call me
Anndrea." she held out her hand in the same way the engineer
had.
    This time he knew the gesture and gripped her hand and
shook.  The woman had an amazingly strong grip.
    Ensign O'Malley offered her hand and said "And please, off
duty, I'm Janice."
    As they sat down with him he decided that since they had
offered their personal names, it would be proper to offer his
too. "You may call me Ra'than" he said.
    He chatted with the two women quite a while and soon
discovered that they were roommates.  He was able to get a lot
of social information from them.  They told him about the
different species on the Vigilante.  They warned him about the
tension between the Klingons and the Kalonians, he promised he'd
watch what he said around them.  It didn't take long to realize
just what a diverse group this was and that he might actually
fit in.
    Soon they both had to excuse themselves, Ensign O'Malley had
to report for duty and Lieutenant Whitecloud had an appointment
in the Drop Team Training Room.
    "Would you like to join me?" Whitecloud asked as she stood
up.
    "What sort of training is being conducted at this time?" he
asked as they walked away from the table.
    "It's practice in hand to hand combat.  It may not be very
useful against the Borg, but it is still good for the mind and
body."  Whitecloud said.
    "And what are your duties, medical?"  They had discussed
many things but Lieutenant Whitecloud's position had never come
up.
    Whitecloud laughed, "Not exactly, I'll be leading the
exercises."
    They stopped in front of some crew quarters and Whitecloud
walked in.  Sir Utlin stayed outside.
    "Won't you come in," Whitecloud said "I've got to change
into my work-out clothes."
    Utlin hesitated for a second then stepped in.  He was just
in time to see Whitecloud disappear into the head with a bundle
of clothes.  The room had the first decorations he'd seen on the
ship.  Several paintings hung on one wall; one was of some
primitive people who looked vaguely like Whitecloud, the other
was of some kind of bird but it didn't look finished.
    "Do you like them?" Whitecloud said from right behind him.
    It surprised him because, as a bloodied warrior, he always
prided himself on being aware of what was going on around him.
"They are very intriguing." he finally said.
    "I apologize for the Eagle, I haven't had time to work on it
lately."  Whitecloud said.  She had changed into loose white
clothes that appeared to be made of the same material as the
uniforms.  "Shall we go?"
    "Yes, of course."
    As they walked down the hall Sir Utlin said still sounding
confused  "So your job is training the warriors?"
    "That's one of the duties I've taken on, but my official
designation is second in Command of the Drop Forces."
Whitecloud said trying not to brag.
    "I thought these Drop Forces were suppose to be elite
warriors, and a Female is second in command?" Sir Utlin said
finally unable to contain his shock.
    Whitecloud stopped and looked at Sir Utlin curiously "Is
there something about females in your culture you have failed to
mentioned?"
    Sir Utlin stiffened a bit "In my 'culture', we recognized
that there are certain roles for the males and females.  War was
not a role for females, neither was commanding warriors."
    Whitecloud looked at him and said "That's to bad, you
probably missed out on a lot of great talent by pre-defining the
roles of your society."  She then continued down the hall.  Sir
Utlin followed, his red cape flowing out behind him.
    When they approached the training room Whitecloud turned to
Sir Utlin.  "Would you like to join us for the workout?"
    "I don't think I am dressed properly." he said hoping to get
out of it.
    "Don't worry, we have changing facilities here."
    "ah....Great."

    The room was filled with an assortment creatures from the
Vigilante.  All were dressed in the similar white robes and were
extremely respectful of Sir Utlin and Lieutenant Whitecloud.  He
joined them for a grueling work out and then stood in for a
punching bag during the combat training.
    After an hour of humiliation at the hands these creatures he
finally admitted to himself that they were all skilled warriors
but protested "But this is a style of combat I have not been
trained in."
    Whitecloud looked at the him while the team fell silent, she
had barely broken a sweat.  "I heard that you carried a sword
with you." she said "Perhaps you have some proficiency with it?"
    "I've at least used one before." now he had her, though he
never had use for one in battle, he was recognized as one of the
best duelers in the fleet.
    Whitecloud turned and spoke to one of the Klingon creatures
who went to retrieve something from the supply room.  He
returned with two black poles with white handles, just longer
than an arm.  Whitecloud handed one to Sir Utlin, thick end
first.
    "These are a little contribution from the Klingon training
techniques.  The Federation doesn't have a tradition of using
'blades', however, the Klingon's do.  I felt that the
coordination developed through training with swords would help
in other areas of combat.  These devises are modified to be
harmless but deliver a slight electric shock on contact.  The
shock, however, does increase slightly with the force of impact.
Sir Utlin, are you game?"
    "Who shall be my opponent?"  Sir Utlin asked curiously.
    "Why me, of course."  Whitecloud returned.
    Sir Utlin almost declined he had never fought a woman before
and it didn't matter that she was second in command of such fine
warriors.  Finally, he decided that this was his new peer group
and it was time to become one of them.  "How do you turn it on?"
    Whitecloud turned hers on and took a casual on-guard stance.
The rest of the room gathered around and started cheering for
both.
    Sir Utlin took his standard stance which differed
considerably from hers.  He didn't know who should move first
but was answered by a sharp pain in his arm.  While he was
debating with himself, Whitecloud stepped forward, tapped his
arm and returned to her position.
    "Come on, wake up." she chided.
    The ensuing duel pitted the battle scarred veteran of
countless wars, Sir Utlin, against the merciless, Special Forces
warrior, Lieutenant Whitecloud.  When Whitecloud closed her
attacks Utlin could see the coldness in her eyes.  When he
gained the advantage, she never faltered she pushed a new
strategy.  He found that she could take and receive pain without
hesitation.
    At one point, they stood exchanging blows to the side, one
would take a full hit to the side then deliver one.  Pain surged
through him from the electric shock and the weight of the
weapon.  It was a test of endurance neither one would back down
from.  Sir Utlin didn't remember who broke the routine, but was
glad when it ended.
    Over an hour after they began, they knelt facing each other,
totally out of breath.  Sir Utlin could taste the blood drip
from his broken nose and pain surged from his throbbing side.
Whitecloud looked back at him with a wide smile, two different
shades of blood stained her workout clothes and a large welt had
started to rise on her cheek.  The room had filled with
spectators who watched in total silence.
    Sir Utlin surveyed the crowd, in the front of one group was
Commander Tarva standing in her formal at-ease position.  Seeing
the Commander, Sir Utlin struggled to his feet and faced her.
    "Have you made your decision yet?" Tarva asked.
    "Yes, Commander," Sir Utlin looked around "If they'll have
me."
    Tarva looked to Whitecloud who said "Welcome aboard." and
offered her hand.
    Sir Utlin grasped and shook it, then stepped back and gave
his own traditional salute.
    "Very good." Tarva said "Now we'll have to confer with
Lieutenant Golta and the Captain to assign a field commission
and position in the team.  Until then, Lieutenant Whitecloud
will issue, and train you on the equipment you'll be using."
    "Thank you Commander." Sir Utlin said.
    Tarva nodded then walked across the mat toward the door.
The crowd parted more then sufficiently to let her through
without slowing down.

    Sir Utlin sat stripped to the waist in an examination room
in the medical section.  Lieutenant Whitecloud was in an
adjoining room, probably getting the same treatment.  A large
bruise had formed on his right side from just under his arm to
just above his thighs.  There were a number of other bruises and
cuts over his body.
    "What the hell were you doing sparring with Lieutenant
Whitecloud?" The medic asked as he started to work.
    Sir Utlin looked at the man, he looked like a seasoned
warrior, what was he doing working as a medic.  "Is there a
problem?"
    The man ran a scanner done the bruised side "It's just that
most people know better than to fight with the Lieutenant."
    "Why is that?"
    The man quieted down a bit and said "I worked on the ship
that she was first assigned to, after she left Special Forces.
She kept us very busy, most incidents, however, were never
reported.  The guys she fought with were mostly too embarrassed
that such an attractive woman had bettered them in a fight.  It
was lucky for her, she would have been thrown out a lot sooner
than she was."
    "What kind of incidents?" Sir Utlin normally didn't care for
any kind gossip but he found Lieutenant Whitecloud extremely
intriguing.
    The man ran some kind of bone knitter over the broken ribs.
"It's just that she likes to hurt people.  Well I guess it's
better than killing them like she used to."
    Sir Utlin looked at the man unbelieving.
    "Its true, one of the reasons she had to leave Special
Forces was that the underworld had a price on her head.  She
couldn't be effective as an undercover agent with her face
plastered all over the place."  The medic then turned to mending
the broken nose.
    "She had a price on her head? How did that happen?"
    "It's rumored that when she was undercover, she would sooner
kill someone than fight with 'em.  You kill enough of a crime
lords best people, he gets annoyed."
    "The more I hear about the Lieutenant the more I like her."
Utlin said with a smile.
    "Well I'm glad to hear that, but if your going to keep
training with her, we'll be seeing you again."  The medic said
as he started working on the large bruise.

-----------

    Lieutenant Utlin stood in the back of the drop ship, his
back against the stern bulk head.  The troop door lay open next
to him.  He held the phaser pointed to the roof and waited.  He
listened for the  go signal from the receiver in his ear.  The
darkness around him was complete but the goggles he wore gave
everything an eerie off color glow.  The sound of phaser blasts
told him the action was approaching his position.
    Utlin thought back on the past weeks; the Vigilante kept up
its relentless warp nine pursuit of the Borg; and he learned.
He learned to speak Federation 'Standard', he learned to work
with all of the creatures on this ship, and he learned his new
job.
    They were troubled by where to place him in the Drop Team
structure.  At first they thought he would actually be best
suited for Drop Ship pilot, but he was a fighter, not just a
pilot.  He best fit in with the ground troops, the real front
line warriors.
    His field commission was a tricky thing, he was obviously an
experienced warrior and leader.  They felt like he deserved to
be highly placed.  There were, however, many on the teams who
had worked hard for their positions.  It would be difficult to
suddenly have them answering to someone who, until just weeks
ago, hadn't ever heard of Star Fleet or The United Federation of
Planets.
    They gave him the rank of lieutenant(junior grade).  At
first he thought it was much below his naturally born position,
but birth-right seemed to hold little importance to these
creatures.  He would have to earn further promotions and
importance.  This couldn't be too difficult in an organization
that allowed so many females to rise to such importance.
    He heard the signal as the team approached the ship, it was
time to give cover so they could get to safety.  He leaned out
low, looking for his comrades. They were coming in from the
right, phaser blasts following them.  He stepped out and fired
at the sources of the blasts.  When the last of the team was
aboard, he turned and followed him them in.  A sharp pain
exploded in his left arm and side causing him to drop the phaser
and throwing him across the ship.
    When he came to, one of the Klingon creatures was looking
down at him.  "You'll do better next time,..Sir." it said
gruffly.
    These live fire exercises must have been Whitecloud's idea.

-----------

    Four weeks after beginning their pursuit, Tarva was awakened
by the yellow alert.  She heard Lieutenant S'Erlet saying
"Command to the Bridge."
    When Tarva got to the bridge Captain Anthony was just
arriving on the other lift.  Commander Norton was already in his
chair and S'Erlet was busy at his station.  Ensign O'Malley sat
staring at the image on the screen.
    It was a single Borg cube, obviously at an extreme distance,
but it was just one cube.  It was also obvious that they had
dropped out of warp.
    Tarva looked at the cube "What happened to the other five?"
    Ensign O'Malley turned and looked back at Commander Norton.
O'Malley had gone ghost white.
    The Captain looked at Norton, "Well, what happened to the
other five?"
    Norton looked up at Captain Anthony "Sir, all six Borg ships
entered this one."

              **********
              I saw the spears that seemed a-leap to slay,
              All quiver earthward at the headman's nod;
              And in a daze of dream I heard him say:
              "Go, set him free who serves so well his God!"
                        "The Soldier of Fortune"
                            Robert W. Service
              **********

                                  to be continued............


-------



                   T H E   V I G I L A N T E

                               VA

                           "Outpost"


Since all that is was ever bound to be;
Since grim eternal laws our Being bind;
And both the riddle and the answer find,
And both the carnage and the calm decree;
Since plain within the Book of Destiny
Is written all the journey of mankind
Inexorably to the end; since blind
And Mortal puppets playing parts are we:
......
              "Faith"
         Robert W. Service





    Captain Anthony looked at the Borg Cube on the screen, it
looked like all the others.  Scanners, however, indicated that
this one was bigger, much bigger.
    "What do we have?" Tarva asked.
    "It appears to be a Borg space station." S'Erlet
volunteered.
    "Perhaps, it's their home." O'Malley suggested
optimistically.
    "What's your Analysis." Captain Anthony said to the bridge
crew.
    "Sir, I estimate that this cube is 2 million times the
volume of a standard Borg ship." S'Erlet reported.
    Captain Anthony whistled in appreciation of the size.  "What
kind of scans are they emitting, is there any sign they may be
able to see us?"
    "Negative, Sir." Commander Norton said "They are emitting
standard Borg signals."
    "Okay, keep a close watch on all activity, I don't want one
of those cubes running into us."
    "Aye, Sir." O'Malley and S'Erlet said in unison.
    Anthony then turned back to Commander Norton "Let's go to
complete battle stations, repost all guards, and have away teams
ready to scramble from transporters and drop ships.  I want
primary teams, again, to be prepared with out the armor, lets
keep our technology a secret as long as possible."
    Norton stood saying "Aye, Sir." then exited the bridge.
    Anthony looked at Tarva "What do you think?" then back at
the cube on the screen.
    "We're going in, aren't we?" Tarva said with a half smile.
    "That's what we've been training to do." Anthony responded
then sat down in his chair.  He leaned back and clasped his
hands across his chest.
    Tarva sat on the edge of her chair, turned to look at the
Captain.  "When?"
    The Captain looked at his First Officer "I know, we have to
study it, get an idea what it really is and so on, but we'll go
in, ......we will go in."
    "Just try not rushing it, sir." Tarva said quietly "We've
got time."
    Anthony looked up at his navigator "Ensign O'Malley, set a
course to take a closer look, standard orbit."
    "Aye, sir" O'Malley responded "Plotted and laid in."
    "Engage." Anthony said.
    "Aye, Sir." the Helmsman returned.
    The Vigilante headed toward the Borg cube.  They quickly
started backing off the magnification to keep it on the screen.
Once they were close enough to get a good look without
magnification, they cut the impulse engines and went solely with
maneuvering thrusters.  It was the same kind of technique they
used for orbiting a star base.
    "Sir," S'Erlet said "Every indication from the object is
that it is not a ship.  It appears to have stabilizers only,
there is no means of propulsion evident."
    "What about the sub-space 'Borg Link' that the Enterprise
logged, what kind of patterns are there?" Anthony asked.
    "I've started the analysis but it will take some time before
any conclusions can be made." S'Erlet said.
    "Very good, but I want you to take any technicians you need
to complete the analysis quickly." Anthony said.
    "Sir," S'Erlet looked up from his console "I may be able to
do a more complete analysis with facilities in engineering."
    "Dismissed." Anthony then turned to Tarva "Commander I'd
like you to be in charge of mapping the cube.  We need to know
where the entrances are and other vital areas.
    "Aye, Sir" Tarva said "I'll get right on it."  She then
started contacting the survey specialists from the Drop Teams.

-----------

    Lieutenant Utlin stood in his armor looking out over the
'Cavern' below him.  It didn't come near the majesty of The Star
Controller but from this distance it did seem quite far down.
    "When ever your ready, Lieutenant." came Whitecloud's voice
over the intercom.
    He only had to do one thing, and that was step off the
platform.  If the suit worked, it would automatically fire its
rockets and lower him safely to the ground.  If it didn't work,
and he was lucky, he wouldn't spend too much time with the
medics this afternoon.  He was used to being in control, if the
rockets were suppose to fire, he wanted to fire them.  A
computer deciding to turn something on didn't sit well with him,
he wanted the control.
    "Trust the technology." he whispered to himself and stepped
of the ledge.
    He could immediately feel the suit vibrate slightly and stop
his decent.  He soon landed gently on the deck.  The suits
weren't made for flying about in a gravity situation but would
safely lower the occupant.  In zero gravity, however, they told
him, that they did have maneuverability.
    Utlin looked about, the team he was training with waited for
him.  Since Commander Dolittel retrieved the flight recorders
and cameras from the fighter they held him in much higher esteem
as a warrior.  They did, however, find it amusing that he seemed
scared of heights.  It wasn't that he was afraid of heights, he
just didn't trust alien technology.  Put him in his fighter, and
they'd see fearlessness.
    Lieutenant Whitecloud met Utlin in the suit room.  "We've
found a Borg outpost."
    "What?" Lieutenant Utlin had just gotten into his uniform.
He had switched to ship's standard, it was only proper.  They
did tell him that for formal occasions Star Fleet allowed
traditional, cultural dress.  There, however, would be very few
formal gatherings on the Vigilante in the near future.
    "The Borg ships all entered a much larger Borg Cube which
appears to be stationary."  Whitecloud said in obvious
excitement.
    "Is there some way we can get a look at it?" Utlin said in
total fascination.
    "Of course." Whitecloud said "It's on the view screen in the
meeting room right now."
    The meeting room was crowed with drop team personnel.  The
Borg cube was prominently on the screen.  When they walked in
Whitecloud spoke up.  "Okay, the Captain has ordered us to
prepare for deployment."
    There was a resounding cheer from the gathering.
"Lieutenant Golta has ordered that teams five and six remain on
call and suited.  Teams one and two are to be prepared in class
1 mission uniforms.  That's why you are here, five and six are
already on station in Shuttle bay three waiting for orders to
board and deploy.  We are to suit for deployment and await here
for orders."
    As second in command of drop teams, it was Whitecloud's
honor to lead the most likely team for deployment.  Lieutenant
Utlin had been assigned to Whitecloud's team until his training
was complete.

    Class one mission uniforms were the standard ship uniform
with gear added.  The teams sat in the rough duty chairs in the
meeting room.  There were 32 in all, two teams of 16.
    Each wore their standard uniform with a black 'mission'
helmet added.  The helmets included face shields with tactical
'heads up' displays and built-in communicators.  The extra
equipment included, technical gear for mapping and surveying.
Half carried analytical tricorders, the others carried 'extra'
fire power.  All carried their new larger phasers.  These
phasers reminded Lieutenant Utlin of his own battle blaster,
which now hung like a trophy in his quarters.
    As soon as the Captain wanted to see if the Borg reacted to
them, he'd send this group in.  He wouldn't use the suited
warriors unless he had to, he wanted to guard the technology of
the suits as long as possible.

    After five hours the Captain ordered a stand-down and the
drop teams off full readiness.

-----------

    After stand down, Lieutenant Utlin went down to the shuttle
bay to inspect his fighter.  A week after he had arrived, he was
summoned to a meeting with Commander Dolittel and the Captain.
    They met in the shuttle bay to discuss the future of the
fighter.  At the time, it lay in pieces around the bay.  Its
stripped frame was barely recognizable.  Commander Dolittel
stood over one of the star drives conducting some form of tests.
    Dolittel looked up as Utlin approached "Hello, Lieutenant."
he said pleasantly "How are you to day."
    "Commander, what have you done to my fighter?" Utlin said in
shock.
    "The technology used in your fighter is unfamiliar."
Dolittel said "My technicians were unable to make sufficient
progress on the repairs, so I've been forced to do the job
personally."
    Utlin couldn't say a word, he did not believe that the
damage to the ship had been this severe.
    Dolittel continued to talk as he worked "I've spent every
spare minute I've had since your arrival to learn your systems."
He looked at the mess around him "To do that, I've had to do a
little dissecting, but don't worry, everything I've taken apart
has been meticulously documented."
    Dolittel looked over Utlin's shoulders "Ah, here's the
Captain now."
    Utlin instinctively came to stiff attention and had to force
himself not to give his traditional salute, those days were
over. "Captain, Sir" he said in greeting.
    Anthony looked at the debris scattered through out the bay
"I hope you'll have this cleaned up before we need this bay
again."  he said with a smile.
    "Yes, Sir." Dolittel answered.
    "What's the status with the fighter?" Anthony said as he
started a walk around.
    "Sir, I've just finished repairs on the warp drives, and am
currently running systems checks.  By combining our two
technologies, this ship should be able to maintain warp 9 for an
extended period of time.  The ship seems to have been
retro-fitted with some extremely powerful blasters that
integrate warp technology."
    Anthony looked at Utlin, apparently for an explanation.
    Utlin smiled proudly "A friend of mine designed them based
on the technology used by Lord Dowe's cannons."
    "They will make an excellent thesis for my next submission
to Star Fleet Research and Development." Dolittel said with a
smile then said  "This ship, however, must have bucked like a
son of bee every time you fired the things."
    Utlin wasn't sure of the exact reference but understood the
meaning "That is why they weren't considered for standard
equipment.  If I wasn't securely strapped in, I'd be thrown
against the canopy every time I used them.  They also tended to
knock the ship off course."
    Dolittel smiled "With your's and the Captain's permission I
can fix that.  A simple inertial dampening field should do the
trick.  I can tie it directly to the firing mechanism so there
won't be any lag.  You'll only feel a slight vibration when you
fire. "
    Utlin looked at the Captain for his reaction "Do what ever
you wish, as long as your other duties are not neglected.  Just
remember, that unless Lieutenant Utlin relinquishes owner ship
claims to the ship, only use standard Star Fleet technology."
The Captain then dismissed himself.
    "What does that mean?" Utlin asked.
    Dolittel looked at the debris around them "That means that I
can upgrade your phaser, your shields and other systems using
commonly available technology.  If you want me to cover the ship
with the same composite material used for the Vigilante's hull
and include cloaking, you'd have to agree to the fighter
becoming a permanent part of the Vigilante's resources."
    "And if I don't?"
    "Then I'll fix it up, close it up and pack it away until we
get back to the Federation."

    It had been a tough decision, if he had given it up, they
would have assigned it to him, but it wouldn't have been his.
If he kept it, he wouldn't be able to fly it again until they
finished their mission and returned to the Federation.
Everybody on board knew that they may never return.  Now as he
stood looking at the ship he was glad he made the decision he
had.
    The fighter stood in the middle of the bay looking better
than it had the day it was delivered.  The paint was bright
white, all of the old patches were gone, replaced by new metal.
The red stripe down the nose was bright and crisp like it was
when he had painted it after arrival on the Star Controller.  It
was a fighter to be proud of.
    Lieutenant Utlin watched as hoists were fitted to the ship
and it was hauled away to storage.  It seemed as though the
final page on that chapter in his life was finally being turned.

He knew though, that if they survived, he would once again have
the freedom it offered.


-----------

    The complete command team sat in the Command Room off the
bridge.  Golta and Kartang sat at opposite ends of the table
with  Captain Anthony, Commander Norton, Commander Dolittel and
Lieutenant S'Erlet between them.  Commander Tarva stood at the
head of the room to give her presentation.  On the screen was a
full picture of the Borg 'outpost'.
    Tarva looked at the gathering "We have finished the
preliminary survey of the structure.  There appears to be a
primary entrance to it here."  A large portion of the cube was
highlighted near the bottom of the top half of the cube.
    "This is the entrance the ships we were following entered.
There are other apparent entrances but the structure appears to
be built around this point."  She then pushed another button and
a rotating, graphic depiction of the cube appeared next to the
current picture.
    "We have logged fifty existing 'standard' Borg ships docked
to the outside of the station.  There are also apparent 'niches'
for two hundred more ships."  The displays had zeroed in on a
docked Borg cube.  "We can only deduce that this is a major Borg
center."
    Anthony looked up "Commander, is there any indication if
this is the Borg home?"
    "I'll let Lieutenant S'Erlet answer that." Tarva said then
nodded to S'Erlet.
    S'Erlet stood "Thank you Commander.  I have been studying
the patterns of the 'Borg Link' since we arrived here.  It is
apparent that there are three major sub-space carriers
emanating from this station.  We, however, are unable to
determine the purpose of these signals but are continuing
studies.  My best hypothesis is that these carriers connect
similar Borg stations."
    "Do you have any proof of this theory?" Anthony asked.
    "No, Sir." S'Erlet said "What we do have, is that this is
the first major Borg installation encountered.  It is emitting
unique signals to specific locations.  These signals are not
going to standard ships, therefore, they must be going to
similar installations.  I do not believe that this is the Borg
'home' because their home must be a planet.  There isn't even a
star system near by.  If this is the center of the Borg empire,
then they have abandoned their home planet."
    "I concur." the Captain said "We must, however, explore this
facility to determine its place in the hierarchy."
    Golta and Kartang grunted their approval of 'exploration'.
    Anthony turned to Commander Norton "Commander, I'd like you,
Golta and Kartang to work with Commander Tarva and Lieutenant
S'Erlet to develop a plan to systematically explore this
structure.  Find specific locations to target such as computer
centers.  I want a plan to explore the important areas
efficiently.
    "In order to do this, we're going need a much closer look,
so we're taking the Vigilante into the station.  Commander
Dolittel,  we'll need all systems in top order.  Commander
Norton, I'll want all guards reposted and all weapons systems
ready for battle.  Before we send in large parties, we'll send
in a couple teams just to get an idea of how they'll react to
us."
    Anthony looked around the room "Any questions."
    "How long before we go in?" Norton asked.
    "We'll begin the approach as soon as this meeting is over."
Anthony sat back in his chair, very relaxed "Anything else."

    The Vigilante was dwarfed by the Borg station.  They entered
the opening along a bottom corner, great pipes and conduits
stretched out beneath them.  Above them, more cubes were docked
along the walls.  Further into the station, the top half opened
up revealing that it was mostly hollow.
    The Vigilante was brought about and faced back toward the
opening.  Captain Anthony decided to survey the interior before
making another move.
    The six cubes they'd been following were soon spotted docked
together above them.

    "There are two areas we want to get a closer look at."
Anthony was saying to Commander Norton.  "We need to study what
they do with the remains of a civilization.  I'd also like to
find out what is in the bottom half of this thing.  There is no
exterior opening, it ought to be interesting."
    "So the first teams should be deployed in the area of the
docked cubes so we can trace what the do with the cargo."
Norton said.
    "Correct." Anthony stared at the display of the cubes
"Another team should be sent below to chart that area."
    "Very good, Captain."  Norton transferred his phaser from
its holder on his chair to his holster "We'll begin making
plans."

    The first step away from the Vigilante was a drop ship
flight to the upper reaches of the docking bay.  The drop ship
being used, was the same one originally retrofitted with extra
scanning gear.  Equipment had been added in the troop area to
extend its scanner capabilities.  Commander Dolittel had
designed six operator stations to be added to the ship to expand
its ability to run detailed passive and active scans.  They had
the ability to map every nut and bolt within their scan range if
they wanted to.
    Drop Ship Seven floated up through the expanses of the Borg
structure.  Around it the cavern was totally still, if they
hadn't seen the cubes enter, they would have thought the station
abandoned.  There were none of the support or repair craft so
common in any Federation space dock.
    Upon the return of Drop Ship Seven, plans for the first two
away missions were finalized.  Team one with Whitecloud and
Utlin, was chosen to explore the interior while team two would
examine the activity dealing with the returned Cubes.
Lieutenant Utlin had requested to be assigned to team two but it
was decided that his connection to the subject may jeopardize
his objectivity.
    The first incursions into the station would remain small.
Even though the Borg had ignored the Enterprise's away teams in
the past, they had been aware of the Enterprise.  It was not
known how they would react to intruders from an unknown source.

-----------

    Drop Team One appeared in what scanners had indicated as an
access area just below the surface the dock area.  The team had
their class one mission uniforms.  Each member had a locator
implant for quick retrieval.  The implants had originally been
designed for the teams during use of the mission armor.  After
the incident with the Delphi, all away team members had been
implanted.
    The sixteen appeared with drawn weapons in full cover
formation.  They faced in all directions with the ones in front
squatting low so those behind had clear fire over them.
    The tunnel was 200 meters wide, had rounded sides and was
ribbed from the joining of sections.  The top and bottom were
flat and smooth.  Many scratches and gouges led up and down the
faded green passage.  The tunnel reached into the distance in
one direction but obviously opened on to an area several hundred
meters away.
    Lieutenant Whitecloud flipped open her visor and looked
around as several scientific members began taking scanner
readings. "They put us down in an obscure location so we would
have some time to get our bearings."  She looked at the
tricorder users.  "Is there any reaction to us yet?"
    "Nothing obvious, Sir." said a medium built dark skinned
human.
    "Team One leader to home." Whitecloud said to her mike.
    "Team One, this is home, go ahead." Came Golta's rough
voice.
    "Beginning mission status check." Whitecloud said.
    There was a slight pause as each team member coordinated
with control on the Vigilante.  They each made voice and visual
tests then confirmed transponder coordinates.  Each member had a
camera built into their mission helmets and transmitted
continual visual and related audio.  The audio was not team
member chatter but from a mike built into the helmets like the
camera.
    "Okay" Whitecloud said after the tests were completed
"Spread out and lets head to the opening."
    The team separated into pairs and started down the tunnel,
leaving foot prints in the thin layer of dust that covered the
deck.  One member of each pair proceeded with drawn weapon only,
the other also took readings with their tricorder.  They allowed
several meters between each pair for safety of the group.  They
would all randomly turn to check their flank.
    The tunnel opened in to a large storage facility.  Piles of
large beams towered above team.  Beyond, they could faintly hear
the hum of machinery that brought a strong acrid odor with it.
    "What are they for." Whitecloud asked.
    "Unknown." replied one of the technicians.
    Whitecloud then used a quick hand signal telling the team to
spread out though the area.  In the middle of the room, one of
the pairs found a control panel on a raised pad.  Whitecloud
quickly found her way to the area.
    Two other pairs were already on the scene and two techs
stood on the two meter high pedestal, looking at a control
panel.  She could hear inspection instructions coming from the
Vigilante to the technicians.
    Whitecloud turned to Lieutenant Utlin who was with her,
phaser in his left hand and tricorder in his right.  "Stay here,
keep an eye out, we may draw their attention."
    "Agreed." Utlin said and put his tricorder in its holster.
    Whitecloud holstered her phaser and climbed the flat U
shaped rungs on the pedestal to the control panel.  The panel
stood at the top of the pedestal without any railing around it.
It was a single panel on a thick stem, it was dark gray, almost
black with many buttons and display screens on it.  The pedestal
and panel were covered with a thick layer of dust and the panel
was dark.
    "What ever it was used for, it's not used any more."
Whitecloud said.
    "Perhaps we can use it to access their computer system."
Lieutenant Utlin suggested from below.
    "To access their computer system, is to access them."
Whitecloud returned.
    "Perhaps that is why this panel is not used." said one of
the techs.  "If they have direct computer interface, they would
no longer need this kind of individual control over a function."
    "Of course," Whitecloud said looking out at the stock around
them.  "they don't use this kind of control now, but there had
to have been a time when they did."
    "Well, at least it gives us some kind of idea how old this
station is."  Tarva said over the radio.  "Do not try to
activate the panel.  Leave one pair to study and record it and
continue survey."
    "Aye, Sir." Whitecloud said and pointed to one tech who
would remain on the pedestal, her and the other climbed back
down to the deck.  "Continue survey to the far side, toward the
machinery."
    They split up again and continued to head toward the heat
and noise at the far side of the storage room.  The temperature
rose slowly and the noise and smell also increased.
    When the opening to the next room came into sight, those
that had their face shields up had to lower them.  The bright
light coming from the room was blinding without the protection
of the tinted shields.  The opening towered above the team and
dry heat blasted out.  The team could not get closer then 100
meters from the opening, and even then, they felt like they
would be burned.
    "What is it." Whitecloud asked above the din.
    "It's a foundry." replied one of the technicians.
    They then looked back at the stacks of beams they had been
walking through for the past hour.  "This must be some kind of
repair facility." Lieutenant Utlin said.
    "Repair or Construction." Whitecloud corrected.
    "Perhaps." Utlin agreed.
    "We need to get in there and get a closer look at what
they're doing."  Whitecloud said.
    "It sounds like a job for the armored pressure suits." Utlin
said.
    "That it is, that it is, my friend." Whitecloud responded.
    "What do we do until we can return with them?" Utlin asked.
    "We'll check the length of the room, perhaps we can find
another way down to the next level."  Whitecloud said.
    Lieutenant Utlin used hand signals to direct the team on a
course parallel to opening.  They continued scouting the area
staying just out of the worst effects of the opening.  Skirting
around and under the stacks of giant beams they soon found
another, much smaller opening out of the store room.
    The dust from the access tunnel was mostly absent from the
store room but was again apparent in the new access.  The access
was an apparent elevator shaft.  The channel seemed to reach
indefinitely above and below them.  Next to the shaft was
another control panel, similar to the one they had found in the
middle of the room.
    "What do we do now?" One of the techs asked.
    "Well," Whitecloud said "we could continue to be afraid of
revealing ourselves by experimenting with these panels we keep
finding, or we could see what happens."
    She then signaled the Vigilante "Team one leader to home,
request permission to experiment with current control panel."
    Unexpectedly Captain Anthony's voice came over the intercom
"Team leader, you are authorized to attempted to access all
computer terminals you encounter.  This mission is to gather
knowledge and your current mission is to see how their going to
react to us.  Don't be afraid to push buttons."
    "Aye, thank you, Sir." Whitecloud said with a smile.
    "Home out." Anthony said and signaled off.
    Whitecloud immediately signaled one of the techs toward the
panel.  A skinny woman slightly shorter than Whitecloud
approached.  She began a close scan of the panel with her
tricorder.  "Sir," She said "It appears that there is power to
this panel, we should be able to get a response from it."
    "Very good," Whitecloud said "make it so." She always wanted
to say that.
    The tech started with a couple of larger buttons but didn't
seem to get any response.  She then saw what looked like a
scanner just above the panel, after placing her hand over the
scanner, the panel lit up.  She then pushed the largest button
on the panel and waited for a second for some kind of response.
A yellow light lit up on the top of the panel and movement could
be heard coming from the shaft.
    "You did something, Ensign." Lieutenant Utlin said.
    Soon something rattled in the shaft and a large, open air
grate elevator appeared.  There were no railings, just a flat,
dust covered grate and a glowing control panel sticking up from
a pedestal.
    "Is it safe?" one of the techs asked.
    "Who wants to go first?" Whitecloud asked with a grin.
    Lieutenant Utlin stepped forward "I'm game."
    "Home, be ready to transport Lieutenant Utlin on his
signal." Whitecloud said before Utlin started testing the grate.
    He started by prodding it with his foot.  Though the
tricorders said it was stable, they had a tendency to
misdiagnose where the Borg were concerned.  He then walked
across the grate to the control pad.
    "Which way, up or down?" Utlin said while studying the
controls.
    "Down, of course." Whitecloud said.
    "Okay." Utlin pushed a button on the pad and was thrown to
the grate as the elevator accelerated upwards.  "By the cape of
Lin'hrlar, I think I pushed the wrong button." he screamed as
the elevator flew up the shaft.
    "Do you request retrieval?" came a voice from the 'ship to
shore' intercom.
    "Negative, lets see where I'm going first, but stand by." he
said loudly though he didn't have to.
    The elevator stopped at the first opening it came to,
hundreds of meters up.  The door revealed the first Borg they'd
encountered.  There were narrow passageways crowed with the
mechanical lumbering Borg.
    Most seemed to be in their regeneration stations but others
occasionally stepped away and made adjustments to nearby
equipment.  The passages weren't regular, they flowed
organically in and around equipment.  An obvious contradiction
from their precedence of meticulous regularity and geometric
precision.
    Utlin pulled out his tricorder and began doing scans of the
area.  He really didn't know what he was scanning, that was for
the techs to analyze later.  He wanted to explore the new area,
they'd finally found the Borg, but he was alone and the team was
waiting for him.  He would be back though.
    Utlin walked over to the pedestal and leaned his helmet
camera towards it and lifted his visor.  "Well, Home, do you
have any suggestions for my next trick?"
    "The button you pushed the first time was the oval towards
the top of the panel." came a voice over the communicator.
    "That's correct." Utlin was impressed with the astute
observation.
    "We suggest the oval at the bottom half of the panel."
returned the voice.
    "Sounds good to me." Utlin said and reached for the panel.
    "Lieutenant, Sir," came the voice quickly "We would also
suggest that you secure yourself to the elevator before pressing
the button."
    It was too late, the elevator dropped away from under
Utlin's feet as soon as he pushed the button.  Lieutenant Utlin
felt as if he were flying for a second, before the elevator
shaft shifted into the Vigilante's transporter room.  The
transporter pad came up and smacked him in the face.  Laying on
the transporter pad with blood gushing from his nose, he wished
he hadn't lifted his visor before pushing the button.
    The medic on duty immediately came over to treat Utlin.
Within minutes, he was ready to return to the current location
of the away team.
    Utlin looked toward the tall blond female working the
transporter "Thanks for the fast work."
    The woman smiled "I was going to let you fall a bit, Sir,
but figured since your still new, your allowed one mistake."
    "Thanks." Utlin said.
    "But remember, only one." she smiled then disappeared,
replaced by the away team and the Borg station.
    Whitecloud looked at Utlin with a bit of a frown "Well," she
said "I don't think that elevator is going to work to get us to
lower levels."
    "There were other controls on the panel." Utlin returned
"Perhaps one of them regulates the speed."
    Whitecloud turned back to the tech at their panel "Do any of
those controls appear to be incremental?"
    "No, Sir." replied the tech after inspecting the panel for a
few seconds.
    Whitecloud then turned to Utlin "Did any of the controls on
the elevator appear to perform that function?"
    Utlin looked out at the elevator sitting in the shaft.  His
foot prints and other marks were barely noticeable in the dust
on the edges of the grating.  "I don't remember, perhaps I
should go out and take a look."
    Whitecloud and several others looked out at the elevator
"Your as good of a choice as any," she said "now that you are
experienced with the thing."
    Utlin flipped down his face shield and walked back on the
elevator.  The control pad had the two ovals on it with thumb
prints in the dust, it also had several other controls.  One
control was a graduated dial.  The dial had regular marks around
it with heavier lines forming an open bottom V at the top.  The
single mark on the dial was pointing straight down away from the
V.
    "If this is the speed control," Utlin said "it appears to be
at half speed.  Which way should I turn it?"
    "Turn it slightly one way," Whitecloud said "then ride it up
again.  Your tricorder should be able to tell us if it goes
faster or slower."
    Utlin turned the dial a couple of centimeters to the right,
sat down then pushed the top oval.  He didn't even feel the
contraption begin to move.  It just felt like the grate came up
and smacked him in the back of the head.  When he came to, he
was looking up at the face of the medic on the Vigilante.
    "What happened?" Utlin whispered.
    "You passed out from a blow to the head, and sever
g-forces." The Medic said "It's a good thing you were wearing a
helmet."
    The medic then had Utlin remove his uniform jacket and
shirt, both of which were shredded and soaked with blood.
Utlin's upper back was cut in a grid pattern from slamming back
on the grate.
    Twenty minutes after stepping into the elevator shaft the
second time, Lieutenant Utlin reappeared among his comrades.
They had retrieved the elevator a third time and were studying
its control pad.
    "You had a fifty, fifty chance." Whitecloud informed him.
"We've just finished tests on the elevator and are prepared to
proceed down to the next level.
    Half of the team stepped onto the elevator and rode it down
to the next level.  They had set the speed control a centimeter
in the opposite direction then Utlin had chosen.  The elevator
slid down the shaft at a very comfortable pace.
    The next level was a large open area.  High above them, they
could see the structural support of the previous level.  The
level, however, was cordoned off by 3 meter high walls and a low
humming sound could be heard.
    After the team was together, they made their way through the
corridors which soon revealed many 'work stations'.  All
stations were unmanned but appeared to be ready for use.  The
stations had a combination of standard Borg computer interfaces
and manual interfaces.  At the first computer interface port,
four personnel were left to attempt access.
    The noise became louder and more distinct as the team
proceeded through the maze.  Even though they hadn't encountered
any hostility, they turned each new corner in a two-by-two cover
formation.  One stayed high and the other low giving mutual
cover.  The rest of the team lined the walls with weapons drawn
and pointing up.  They snapped around the corners and moved
quickly through the area.
    Eventually, they reached a wide open area.  The place was
filled with giant working machines.  Many stretched over fifty
meters into the air.  All of the machines were painted the
normal dull Borg gray.  Most were connected with a series
conveyers and robotic tracks.  At the ends of the machine lines,
the parts coming off were enveloped by the green glow of the
Borg transporter and disappeared.
    The outside edge of the room was lined with standard Borg
interface stations.  Most of the stations were occupied with
assorted Borg.  Some Borg wandered about the machinery making
adjustments.
    "Lieutenant Whitecloud," came a voice over the team
intercom, it was one of the techs left behind to access the
computer port.
    "Go ahead" Anndrea responded as she watched the Borg wander
about, doing their insignificant duties.
    "We have accessed the first layer of security, we currently
have access to the functions of this work station.  It appears
that these abandoned ports have been neglected for so long that
there is no significant protection.  We are about to attempt
accessing the second level which appears to be the data
transmission level."  The young male voice said.
    "Very good," Whitecloud said "proceed."
    While the access was attempted, the rest of the team waited
at the entrance to the manufacturing area.  Soon, one of the
Borg stepped away from its station and headed for the team.
    The Borg had pale, ashen skin and was dressed with partial
armor like plates.  Servomechanisms could be seen opening and
closing driving the creatures legs.  Its respirator could be
heard opening and closing as it approached.  A ribbed tube ran
up behind its head from an apparatus on its back.  The tube
connected into its face just to the left of its chin and behind
the jaw.  The tube could then be seen under the skin merging
with its windpipe.
    "Looks like we have company." Lieutenant Whitecloud said.
    Several of the team took aim at the Borg but Whitecloud
waved them down.  "Let's see what it does." she whispered.  Then
said "Sub Team One, disengage the port, you've attracted some
attention."
    "But, Sir," returned the young voice "we have accessed the
data layer.  We've only just begun down loading."
    "Ensign, its coming for you.  Disengage immediately and
vacate the area.  Understood?"  Whitecloud said firmly.
    "Acknowledge." returned the voice.
    The whole team flattened against the walls as the Borg
walked between them.  Whitecloud signaled to the two at the end
of the line to follow the creature as it disappeared around a
corner.
    Golta's voice came over the ship to shore intercom: "Sub
Team One, you were given direct orders to disengage with the
port, comply immediately."
    "We just need a couple more minutes." the young tech's voice
returned.
    "Negative, disengage immediately.  We can not have the Borg
see us doing something that they object to so early."  Golta
practically growled.
    "Beam them out." Whitecloud said.
    "Negative, for security reasons, this early in the mission
we will not beam them out while they are under observation or
their equipment is accessing the Borg computers."  Golta said
gravely.
    "I can't disengage the tricorder from the port."  Came the
young voice now starting to panic.  "The ports must have
magnetic locking."
    "Set the self destruct on the tricorder and prepare for beam
out." Golta growled back.
    "Acknowledged."
    There was a slight pause when Golta came back "Beam out
completed."
    Then one of the team that had followed the Borg said "The
Borg is approaching the tricorder."
    Suddenly, in the direction they had come from, they could
hear a popping sound.   Sub Team Two reported back "The
tricorder exploded as the Borg attempted to access it.  The Borg
and the port were both destroyed."
    "Sub Team two report back to this position."  Whitecloud
said coolly.
    "Sir" One of the other team members said "You'd better look
at this."
    Whitecloud looked out at the machine area.  The conveyers
and the robotic arms were shaking.  Many of the lights around
the area were flickering.  As this was happening, the Borg
started stepping off their stations and several were already
heading for the team's position.  Some of the Borg were heading
toward them but most were heading into the machinery to check on
the malfunction.
    "Back to the elevator." Whitecloud order and started herding
the team before for her.
    "What if they're going to ignore us this time?" One of the
techs asked.
    "I have a hunch." Whitecloud said "Move it."
    The remaining members of the team headed back toward the
elevator ahead of Whitecloud and Utlin.
    Whitecloud and Utlin were several meters and few turns
behind the rest of the team.  They heard the lead say "They've
beamed into the damaged area.  Look out...arrrgh.."
    When Whitecloud and Utlin turned a corner they saw two of
the team firing at a Borg that had grabbed and injected one of
their comrades.  The Borg was beaming out just as the bright
blue of the phasers hit.  It exploded in a green and red flash
throwing the shooters back into the soldiers who had come up
behind them.  The room and the team were covered in green and
red gore from the Borg and the team member.
    "Home, this is Team One, eleven to beam out, now."
Whitecloud said loudly.
    "Negative." came Golta's gruff reply "The Borg have raised a
force field in your area, we are unable to transport."
    "To the elevator." Whitecloud said.
    The away team rushed through the twisting corridors back
tracking their way to the elevator.  This time, however, they
maintained the two by two cover formation rounding the remaining
corners.
    The elevator was in the shaft, but this time two Borg stood
on either side of the entrance.  When the first two came around
the corner, the Borg activated and started heading toward them.
    "Standard phaser power this time." Whitecloud warned from
behind them.
    "Aye, Sir." one of them said as they adjusted the large
weapons.
    Whitecloud watched the Borg advance slowly toward them.
"Fire."
    The two phasers each emitted a short red beam at a separate
Borg.  The Borg stumbled backward as a green patch glowed on
their torsos then fell over back wards.
    "Lets go." Whitecloud said then jumped forward leading the
team onto the elevator.  As soon as they were on the elevator,
Whitecloud nudged the speed control back toward center then
pushed the top oval.  They could just see the first Borg round
the corner when the elevator flew upward.
    Before they reached the level they had come down from they
felt the inertia seem to lift them away from the elevator.  The
shaft shifted and turned into the transporter room of the
Vigilante.  As a group, they seemed to jump together and land
clumsily on the pad.
    "Where's that fool?" Whitecloud demanded.
    "Ensign Peterson is waiting in Conference room A1." came
Lieutenant Golta's reply.  He had been standing next to the
control panel waiting for them.
    "What about the other team?" Lieutenant Utlin asked.
    "The Borg have continued to ignore them, so they will
continue their explorations."  Golta said then turned back to
Whitecloud "You, Lieutenant Utlin and myself are required in
Conference Room A1, immediately."
    Whitecloud dismissed the rest of the away team, then the
three exited the room.  Utlin and Whitecloud remained in full
mission gear and carried their helmets under their arms.

    Conference Room A1 was the 'court' room Captain Anthony and
Commander Tarva had used to meet the away team from the Delphi.
Ensign Peterson sat in the single chair facing the U shaped
table.  Captain Anthony occupied the chair in the middle of the
U and Commander Tarva was next to him.  Golta, Whitecloud and
Utlin took seats on the side of the U closest to the door.
    Ensign Peterson still wore his mission gear, his helmet sat
at his feet and his phaser was still in his holster.  He was a
young skinny human, slightly taller than Whitecloud.
    When the three were seated, Commander Tarva looked up from
her computer council directly at the ensign.  "Identify."
    The boy put his hand on a pad on the arm of the chair.  The
computer came on and started listing his name and history.  It
told of his graduation from Star Fleet Academy with honors just
two years earlier.  Five commendations were listed for
accomplishments in surveillance work and code decryption during
his previous/first tour along the Romulan Neutral zone.  It was
the file of a rising star in Star Fleet.  All in the room could
see the pride in the boy's face as the accomplishments of his
budding career were listed.
    Tarva continued to look directly at the Ensign "Ensign
Peterson, you are charged with disobeying a direct order,
resulting in the death of a team mate and jeopardizing the
entire mission of the Vigilante.  What is your defense to these
actions?"
    "Sir, the information I was collecting could have been vital
to our mission." Peterson said nervously "All I needed was a few
more minutes to accumulate enough data to be useful.  I could
not have predicted that the tricorder would become locked into
the access port.  There is also no indication that I would have
been able to disengage it if I had tried immediately after being
ordered to."
    Tarva continued to stare at the Ensign who was trying to
maintain his composure.  "Do you agree, that if you had
discovered that the tricorder was locked you could have
initiated the self destruct sequence earlier."
    "Perhaps." The boy admitted.
    "Do you agree that if the self destruct had been initiated
earlier the Borg unit that was damaged by the explosion would
not have been harmed?" Tarva continued coldly.
    "Yes."
    "Do you agree that if the Borg unit had not been harmed,
they would not have had a chance to act so severely toward the
Team member that had run into the replacement?"
    "Sir, there is no proof that the original unit would not
have attacked in the same way the second one did." Peterson was
continuing to stay calm.
    "But Ensign Osborne would have been aware of its presence
and not run into it." Tarva said as if concluding a complex
argument.
    "Ensign Osborne should not have been moving so recklessly
through a hostile environment." Peterson sounded as if he were
grasping at straws.
    This time Lieutenant Golta snorted then said "Excuse me
commander," Tarva nodded, Golta continued "We have the video
from the incident.  Perhaps, we should examine him 'moving
recklessly'"
    "Proceed." Tarva said after glancing toward the Captain.
    The screen on a side wall lit up showing the shaking video
of someone walking quickly down a hall.  The bottom of the
screen showed Osborne's name, the time and stardate.  The side
of the screen showed a readout of simple vital signs; pulse,
heart rate, respiration, and basic brain wave patterns.  He was
not moving in the standard two by two cover formation but was
stopping at each corner and checking the room before stepping
quickly into it.
    The room of the explosion was empty, including no sign of
the Borg caught by the explosion.  Ensign Osborne had checked it
properly and was half way through when a Borg materialized
directly before him and simply reached around him.  All of the
vital signs on the screen immediately went flat.  Soon after,
the screen shimmered green then went blank.
    Tarva said "Do you have anything else to say, Ensign."
    Ensign Peterson looked ill "No, Sir."
    The Captain looked at the young man "Please wait out side."
    Ensign Peterson stood stiffly and walked out of the room,
carrying his helmet professionally under one arm.  He stood
outside the room by himself in a very stiff at-ease stance.
Several minutes later, Lieutenant Utlin came to the door and
escorted him back in.
    "Please remain standing." The Captain said.
    All five at the table stood and faced the Ensign.  Commander
Tarva spoke first "For disobeying the direct orders of a
commanding officer while on a hazardous mission, you are
sentenced to exactly thirty hours in the brig.  You will also,
of course, have a notation made in your permanent record for
disobeying a direct order in a hazardous situation."
    Peterson didn't seem phased by the announcement "Is that
all, Sir?" he said emotionlessly.
    This time Golta spoke "No, that is not all.  You will also
be reassigned to duty in engineering.  The Drop Teams no longer
have use for your skills.  This reassignment also means
relocation to new quarters.  Before severing your time in the
brig, you will pack your gear and move to your new billet
location near engineering."
    Peterson had gone ghost white "But, Sir..." he mumbled.
    Commander Tarva cut him off "Dismissed."
    Golta, Utlin, and Whitecloud escorted Peterson back to his
quarters.  His roommate, thankfully was not there.  Golta
entered with him and collected the Drop Team gear.  Then stepped
outside while he packed his few possessions.
    When Ensign Peterson stepped back into the corridor he was
greeted by two lines of personnel facing into the center of the
hall, standing at stiff attention.  They were the total Drop
Team personnel less the current away team.  There was just
enough room for him to walk between them.  The lines started
about two meters from his door and were led by Golta and
Whitecloud.
    Ensign Peterson stiffened his back, sucked in his gut and
walked proudly toward the gauntlet.  As he approached,
Whitecloud and Golta snapped stiff, formal about faces and faced
away from him toward the bulkheads.  The rest of the personnel
did the exact same maneuver as Peterson approached.

--------------

    Several hours after returning from their mission, Whitecloud
and Utlin were reviewing the tapes and records in the drop team
meeting room.  They used the screen to replay key sequences of
the team members video.  Their goal was to reason out what the
purpose for the lower half of the station was.
    The most obvious function for the station, was
manufacturing.  Apparently, the Borg used the facilities to
repair massive damage to their ships.  There was some suggestion
that new cubes were also manufactured.  There was, however, no
indication that there were any cubes currently under
construction.
    The door to the room slid open allowing in Lieutenant
Commander Golta.  Utlin and Whitecloud stood as their immediate
superior approached.
    "The away team has returned." Golta said when he reached the
table.  "They have returned with something we think you may both
be interested in."  Golta looked directly at Utlin "Especially
you Lieutenant."
    "What is it?" Utlin asked curiously.
    "They've found what appears to be an unassimilated female
from your species."  Golta responded coldly.

-----------

    Whitecloud, Tarva, Anthony, Golta and Utlin stood watching a
monitor of a room in sick bay.  There was a single bunk with a
woman sitting on it.  She sat with her back against the wall and
had her arms wrapped around her legs hugging her knees to her
chest.  She sat with her face buried and rocked slowly back and
forth.  She wore a long heavy dress and robes, all appeared to
have once been highly decorated and ornate.  Now, they were
ripped and dirty.  She had dark skin and long dirty brown hair
that appeared that it might reach the floor.  From her current
position, they could not see her face or make out much about her
size or body structure.
    "She does look like a Child of Lin'hrlar." Utlin whispered,
very shaken "Do we have any pictures of her."
    Golta pressed a few buttons and the screen switched to some
mission footage.  The video showed the view from a point leader
slowly going through a Borg area.  The audio was the standard
sounds of machinery with occasional comments from the team
member.  Soon, he turned a corner and saw a mass of cloth and
hair huddled in a corner.
    He called for back up and approached the object carefully
with trained phaser.  When it was obvious he was being ignored,
he put his phaser away and gently made the woman look up at him.

Her face was dirty and gaunt, but there were no obvious signs of
injuries.  She had dark skin, darker then Utlin's, and she had
bright red eyes.  Her eyes, however, seemed totally blank.  The
rest of the video showed a tech doing a medical check then
finally the woman disappearing to the Vigilante.
    A medic had joined the group at the view screen.  She spoke
directly to Tarva "The woman is malnourished and dehydrated, but
otherwise in pretty good physical condition.  We've given her
some nutritional supplements, she won't let us get closer to do
anything else.  After what she's been through, we don't want to
force anything on her, at least not yet."
    Tarva turned to Lieutenant Utlin "What can you tell us about
her?  Is she one of your people?  Anything you can do to help us
contact her would be appreciated.  She may have information we
could use."
    Utlin sensed the coldness in Tarva's comments but ignored
it.  "She is 'One of Us'.  She appears to by high born and was
probably pampered and spoiled.  Her people are from the planet
Riganilus, you can tell from her darker skin and red eyes.
Riganilus was one of our ruling planets and a center for our
religion."
    The group could see Utlin's mixed emotions.  He was looking
at the only other known Child of Lin'hrlar, but apparently did
not care for her based on her heritage.
    "Do you think you could contact her?" Tarva asked "So far
she has not responded to any of our attempts."
    Utlin looked at the creature huddled on the bunk.  "I'll
try." he said simply.

    Sir Utlin dressed in his battle uniform.  It had been
cleaned and mended by the ships computer and looked better then
it had in years.  He carried the ceremonial sword in the loop on
his belt and wore his battle blaster securely strapped to his
left hip.  His hair was cut short and spiked like a warriors.
His red cape flowed brilliantly out around him.
    He marched into the small sickbay room and snapped to
attention then bowed deeply from the hips.  "My Lady." he said
in his own language "We are pleased to have found you alive and
well."
    The woman slowly looked up over her arm.  There was dirt
smeared across her face and greasy stringy her fell across her
face.  Her red eyes showed a glimmer of recognition at the
figure that stood before her.
    "Who are you?" she whispered hoarsely.
    "I am Sir Utlin Robe'than, formerly First Officer of the
carrier Star Controller and commander of Red Wing, Tactical
Fighter Squadron."  Utlin spoke very carefully. "And please, My
Lady, what is your name?"
    The woman looked up and down at the warrior before her.  It
was obvious she was inspecting the propriety of his
presentation.
    "I am Lady Purlerna Von Hather'fon of the House of Pulerna,
Second House of Lords in the Lin'Lolar region of Riganilus."
She stated.  As she spoke, she straightened herself out and
tried to look dignified.  "Where is my father?"
    "My Lady," Utlin said "we do not know were your father is."
    The woman looked about her "The creatures have been
defeated, we have won?  You must return me to my home, they must
be worried for me.  Where am I?  How did I get here?  My father
must be looking for me, when will I see him?  Is this one of my
Father's ships?  I didn't know the Star Controller followed my
father.  Is this the Star Controller?  Who are those creatures
who were here before...I must have been dreaming..."  She looked
at Utlin with a blank stare.  Her questions were still coming,
but her voice was gone to the dehydration.
    Sir Utlin helped her lay down flat then left the room.  He
went immediately to the Chief Medic.  "Are there any human
females who can treat her?"
    The Chief Medic looked at Utlin confused "Why human and
female?" he asked.
    "Humans look the most like our people." Utlin said "And a
woman of her breeding, would have only been tended by other
females.  I believe this would make her most comfortable."
    "It can be arranged." He replied.
    "Very good, also, please only allow humans and preferably
females in to see her.  The different species on the Vigilante
are beyond anything she would have ever encountered before."
Utlin thought to himself that they were beyond anything he had
ever encountered before.
    The next day Utlin returned to sick bay dressed again in his
traditional clothes.  Lady Pulerna paced her room, still wearing
her tattered robes and still quite dirty.
    The Chief Medic turned to Utlin "She has been very
uncooperative.  She refuses to bathe or change out of her rags.
She will not talk to her medic and barely acknowledges her
presence.  We are about to sedate her so we can get her cleaned
up and get some proper nourishment into her.  We were hoping you
could talk some sense into her before we took that step."
    Utlin signaled at her door then entered when she said
"What?"
    "I did not give you permission to enter." she spat at him.
"What is going on here, who are these people?"
    "My Lady" Utlin said after bowing "You were no condition
yesterday for me to explain, perhaps I should have."
    "Yes, perhaps you should have." She agreed angrily.
    "My Lady, you are on a space vessel called the 'Vigilante'."
Utlin started.
    "Vigilante" she hissed "What kind of name is that, I have
never heard of it.  Is it from one of the border fleets?"
    "My Lady," Utlin said gently "Perhaps you should sit down."
    "Why, what is wrong?" She insisted.
    "Please." Utlin said trying to be as calm as possible.
    The woman sat on the edge of her bed and looked at Sir
Utlin. "Out with it nave." she said "I'm getting tired of your
game."
    Utlin hung his head for a second then looked the woman in
the eyes "This is not a vessel of the Fleet.  It is an alien
vessel that was pursuing the creatures that attacked our
people."
    "Where are the rest of the Children of Lin'hrlar?" she asked
softly.
    "All was destroyed by the creatures known as the Borg."
Utlin said distantly "We are all that is left of the Children of
Lin'hrlar."
    Lady Purlerna started to slowly rock from side to side
humming some incoherent tune.  Her eyes were closed and her face
returned to its blank expression.
    Utlin took Lady Pulerna by the shoulders and shook her "You
must accept this." he said "They need you, I need you.  You must
be strong and make your Father and ancestors proud.  Do you hear
me?"
    The woman's burning red eyes suddenly flew open "How dare
you touch me, you Tregamalin." she snapped.
    Utlin stepped back and looked at the woman.  Had she
snapped, was she lost forever, or had Lin'hrlar reached out and
cleared her mind.  He would soon know.
    "What manner of creatures are these that we are among?" She
asked.
    "There are many different creatures on this vessel.  They
come from a place they call, The United Federation of Planets."
Utlin hoped that she had broken through the barriers she had
erected to protect herself against the Borg.
    "Where are they, I demand an audience with their Lord."  She
said imperially.
    "That can be arranged, but first, perhaps, you should get
cleaned up."  Utlin observed.
    The woman looked down at her robes then held herself up
straight.  "Perhaps that would be best.  You are dismissed for
now, but remain available.  I will require at least three
attendants to help me prepare for my meeting with the ship's
Lord."
    Utlin smiled, he couldn't wait to see this unleashed on the
Vigilante, they thought the Borg were tough to deal with.  He
bowed deeply from the waist "Very good my Lady." then exited the
room.
    The next few hours were a very trying time for the medics
assigned to Lady Purlerna.  She treated them as servants and
took minimal direction from them.  She refused to wear the
devises for the universal translator, insisting they were
beneath her.
    With the guidance of Lieutenant Utlin, they were able to
design clothes for her she wouldn't simply drop on the floor
saying "Unacceptable."
    Finally, she was cleaned and dressed in new flowing, blue
and red robes.  They were not nearly as ornate as what she was
used to but they would do, for now.  Her hair was cleaned and
flowed over her shoulders past her knees in front and behind
her.
    Utlin looked at her through the monitor, marveling at her
sudden beauty.  He did, however, notice that he was not as awe
struck with her royalty as he once would have been.
    "You will instruct Sir Utlin that I require his presence."
she said to one of her medic/attendants.
    "Yes, I will inform him." said the medic as she left.

    "I've had enough of Lady Purlerna." said the Medic as she
passed Utlin who was standing at the view screen.
    Utlin couldn't contain his smile, but didn't say a word.  He
headed into the Lady's 'chambers'.  "My Lady."
    "My attendants leave a lot to be desired." Lady Purlerna
said.  She was sitting in front of a mirror that had been
installed for her.
    "They are not attendants." Utlin said "They are highly
trained and dedicated Star Fleet medical officers."
    "Ha," Purlerna scoffed "Officers? You've got to be kidding.
Female officers, and did you see how light their skin was? I
don't even know what they're doing on a space craft."
    "My Lady," it was becoming very hard to spit that phrase out
"There is much for you to learn about the species that make up
the crew of the Vigilante.  Some of them are quite different
then anything we have ever seen in our part of the Galaxy."
    "Of course." Lady Purlerna said "Lin'hrlar exiled all
sentient creatures that were not in his image.  This Federation
must be the remains of those out casts.  Is it not written that
'All of the creatures known and unknown shall bow down and give
homage to the true children of Lin'hrlar?'"
    Utlin sighed, he'd forgotten that the High Lords of
Riganilus still followed the later writings of the Overseer of
Lin'hrlar.  If she truly believed that stuff, it would be very
difficult to get her to behave properly for the Vigilante.  He
was afraid that if she proved too bothersome, they would confine
her to quarters and ignore her.
    "Listen to me, My Lady." Utlin said very seriously "The
people on this ship had never heard of the Children of Lin'hrlar
before finding me.  They do not recognize birth right, only
actions and achievements.  They are very proud of the fact that
they do not restrict a person simply based on their heritage.
They will treat you with respect but they will not treat you as
a better."
    "Blasphemous." Purlerna said loudly "It is written that all
creatures will bow down before the Children of Lin'hrlar."
    "Please." Utlin insisted "They have not read the writings of
the Overseer.  You must remember that you...we are only guests
here."
    Lady Purlerna stiffened a bit then said "You are correct, we
are guests, we must behave as such.  Now I wish to meet our
host, please tell the Lord of this vessel that I will see him
now."
    Utlin hung his head and sighed "I will inform him." he then
turned crisply and left the room.
    Utlin returned to Lady Purlerna within five minutes and
escorted her to her new quarters.  He explained that the Lord
was not available immediately.  The Lord, however, wished that
she take the time to get acquainted with her new cabin.
    She walked slowly around the two rooms. "Why are there two
beds, is one for my attendant?  It shouldn't be in the same room
as mine.  Perhaps this is just the front chamber."  She walked
into the head and back out "What is the meaning of this? Where
are the rest of my chambers?"
    "This is all there is." Utlin said "You will not have an
attendant.  The second bunk is here because the quarters were
design to be shared by two people.  Junior Officers, to be
exact."
    "How will I get along, what if I need something."  She
asked.
    "Just ask the computer." Utlin then demonstrated.  "If there
is anything thing you need the computer can provide it for you,
or direct you to it."  He then demonstrated the replicator.
    "I have my own computer to do this for me?" She asked
suspiciously.
    "That's right." Utlin said.
    They were interrupted by a piping sound "Bridge to
Lieutenant Utlin."  came a female voice out of a wall speaker.
The intercom in the room had been modified to translate
automatically.
    "This is Lieutenant Utlin," he said "go ahead."
    "The Captain will see our guest now." returned the voice.
    "Thank you, Utlin out."
    "Bridge out."
    "Please explain something to me." Purlerna said.
    "Yes"
    "What is this 'Captain'?"
    "It is their title for ship's Lord." Utlin replied.
    "And 'Lieutenant'?" this time she sounded suspicious.
    Utlin smiled sheepishly "I must apologize, I have not been
totally honest with you.  I am no longer a guest on the
Vigilante.  I have accepted a commission in their organization.
I am part of the crew, and my rank is Lieutenant.  I have been
wearing this uniform so that you would feel comfortable with me.

I must admit, however, that it feels good to be in it again."
    "You are highly placed, perhaps second or third in command?"

She sounded impressed.
    Utlin looked about the room. "The room I'm quartered in is
exactly like this one.  I share it with a science officer, also
a lieutenant."
    She said no more, just followed him out of the room.  He
escorted her to the bridge.  They met very few people in the
corridors and Utlin was thankful for that.  She still had not
seen anybody but himself and humans.  He was not sure what her
reaction to her first alien would be, especially a Klingon, they
were just so damned ugly.
    Lady Purlerna paid little attention to the bridge.  She
seemed very unimpressed by it and the crew she saw there.  They
then walked into the room known as the Command Room.  It was
mostly filler with a long table, slightly rounded to fit the
room.
    One person sat at the table, a heavy framed man with long
gray/black hair pull back in a tail and thinning on top.  He
stood as Purlerna and Utlin entered and said "Welcome aboard the
Viglante."  He spoke into a devise he held in one hand that
translated for him.  "I am Captain Anthony, Captain of the
United Star Ship Vigilante."
    "Thank you." Purlerna said she then sat down in the chair at
the head of the table.
    The Captain reclaimed his seat and said "We have.."
    Anthony was interuppted by his guest "I did not give you
permission to be seated..Captain." she spat the last word.
    Captain Anthony sat back and laughed heartily.  "Lieutenant,
you warned me of her arrogance but I did not beleive you.  I
appolagize for that."  He then turned back to the Purlerna "My
Lady, you must understand that you are aristocrat without a
court.  I am the Captain of this vessel and that means I am
incharge of everything, includeing all crew and passengers.  If
I desired to have you returned to the place you were found, you
would be there before you could blink an eye--literally.  So
please behave yourself, we offer you life beyond the certain
death the Borg offered."  Anthony's face was totally serious.
    Purlerna was furious "How dare you speak to me that way, you
low class alien."
    Anthony sighed "If that's the way you want it.  Lieutenant,
please escort Miss Purlerna back to her quarters.  She will
remain there until she wishes to treat the crew of the Vigilante
with proper respect."

-----------

    Lieutenant Utlin entered Lady Purlerna's quarters after
signalling.  Ths time, he wore the standard ship's uniform with
the large black phaser replaceing his blaster.  It was twenty
two hours since Purlerna had been confined.
    Lady Purlerna's hair was tied back in a long tail.  She wore
some loungeing clothes she'd been able conjure up from her
replicator.  As soon as Utlin entered she turned on him furious
"Where have you been?" She yelled "I signalled for you more then
two hours ago."
    Utlin had been instructed to be civil to her.  They still
hoped to get though to her and get some information about the
Borg.  First, however, she had to learn to be a member of the
crew, or at least a gracious guest.  Anthony knew that if he
treated her like the royalty she had been, she would always be
impossible to deal with.
    Utlin looked at the woman and said sternly "I have duties
aboard this vessle.  I can not and will not drop what I am doing
everytime you 'signal'.  Now what is it that you signalled me
about?"
    Purlerna turned her back on him "It is unimportant, NOW."
    "In that case I would like you to meet a colleage and friend
of mine.  The Captain thinks that if you were to meet and talk
with some of the crew, you would learn to fit in better."
    Purlerna turned back around to look at Utlin "I do not care
to meet any of your warrior barbarian friends."
    "That's too bad." Utlin returned "She was very interested in
meeting you."
    "Really, how close a freind is She?"
    Utlin knew what she was implying and purposely ignored the
question.  This would just reinforce what she was thinking, what
ever got her interested.  Utlin leaned out into the hall and
signaled.
    Lieutenant Whitecloud came in dressed in standard uniform.
Her hair, however, instead of being simpley tied back, was held
back with a fancey silver clip with a large turquise stone in
it.  She had also applied a small amount of makeup, very
uncharacteristic for her.  Utlin had suggested the makeup, he
felt it might help Purlerna relate to her better.  Whitecloud
also wore the necklace and hearing aid used by the universal
translater.
    "Lady Purlerna this is Lietenant Whitecloud, my immediate
superior."  Utlin said formally.
    Whitecloud bowed very slightly and said with a pleasent
smile "I'm very pleased to meet you."
    Purlerna looked at the dark skin female who just entered.
The woman wore a very pleasent smile but her steal gray eyes
seemed cold and distant.
    "Of course your pleased." Purlerna replied then turned to
Utlin "Your dismissed, I'd to talk with Lieutenant Whitecloud
privately."

    Fifteen minutes later, Whitecloud met Utlin at his quarters.

She looked very confused another rarity for Lieutenant
Whitecloud.  "I don't know whether to laugh at the creature or
vent her."  She said as soon as she walked in.
    Utlin started laughing uncontrollably.
    "You set me up, what did you tell her?" she said finally
starting to smile.
    "I implied that we may be, how do you say...an Item."
    Whitecloud glanced at her painting of the soaring eagle
hanging on Utlin's wall.  "I suspected you may have said
something like that."
    "What did she say?"
    "She told me that I should stay away from you.  She said
that even though you are from Tregimalis you were from proper
enough breeding for her.  She said that an 'alien' such as
myself has no business with a Child of Lin'hrlar.  I was also
informed that it is your duty to take her as your 'Companion'
since you two are the last of your kind.  She also said other
things about the obvious inadequacies of my heritage which I do
not care to repeat."
    "I told you she could not be changed." Utlin said.
    "She was bred this way since birth.  They all are.  Why do
you think I chose the life of a warrior?  My own father had
arranged a match for me with a creature just like her.  I was
barely an adolesent, so I lied about my age and joined the
academy."  Utlin smiled at the memory.
    Tarva had gone into the head to remove the makeup as Utlin
spoke.  "You know," she said as she came out drying her face
with a large towel.  "I was thinking about what she said about
you taking her as your Companion.  I think she is quite right.
In fact, I think the sooner the better."
    "What?"
    "Perhaps if you spent a lot more quality time with her, she
would eventually be able to fit in."
    "No way," Utlin said starting to panic "I am not not going
to spend the rest of my life with that creature.  She may be
able to lose the edge enough to fit in, but she'll never
change."
    "You may not have a choice in the matter." Whitecloud said,
then quickly left the room.

                        to be continued...........
   ----------



                   T H E   V I G I L A N T E

                               Vb

                           "Outpost"
                          (continued)

......
Then lets have faith; good cometh out of ill;
The power that shaped the strife shall end the strife;
Then lets bow down before the Unkown Will;
Fight on, believing all is well with life;
Seeing within the worst of War's red rage
The gleam, the glory of the Golden Age.
                "Faith"
             Robert Service



    Captain Anthony had hoped to learn more about the Borg's
reactions to Lady Purlerna before he sent another team into the
station but soon gave up on the idea.  It was determined that
any information that may be gleaned from Purlerna would simply
have to be included in the mission report.
    The next missions were planned.  Drop Team One, led by
Lieutenant Whitecloud, would return to the foundry in mission
armor.  Drop Team Two, this time led by Lieutenant Commander
Golta, would again inspect the upper levels.  Drop Team Three,
led by Lieutenant Utlin, would return to the elevator shaft and
continue the investigation of the lower levels.
    After the incident earlier, the Borg had closely scanned the
vicinity outside of the station.  Probes the Vigilante had left
in orbit around the station reported high intensity sensor scans
exactly the same as those encountered by the Enterprise during
its encounters with the Borg.  Within six hours, all unusual
activity had ceased and the Borg returned to their normal
operating conditions.  Normal conditions also included the
dropping of the shields they'd erected around the incident site.

    "What if they have regained control of the elevator?" Utlin
asked.
    "Then we'll beam you out like we did last time."  Tarva said
simply.
    "What if they're just waiting for us to use the elevator
again then they'll have us." Utlin continued considering the
possibilities.
    "Lieutenant Utlin," Tarva said "if you do not wish to lead
this mission, or feel you are not ready, we will find a
replacement for you."
    "Sir," Utlin said formally "I am merely considering
contingencies."
    "Lieutenant Utlin, I don't have to remind you of the
contingency for getting captured by the Borg, do I?"  Tarva
queried.
    "No, Sir." Utlin returned immediately.  Fighting to the
death, was a tradition among his people and it still ran strong
within him.

    Drop Team One materialized outside of the Borg foundry.
They had beamed in with phasers drawn and in standard cover
formation.  After determining they were being ignored, they
started advancing on the foundry.  The tinted visors with EVE
(Electronic Vision Enhancement) revealed much more of what lay
just inside the entrance.
    The level they beamed in on turned out to be an overlook.
Below, were gigantic vats of molten iron and other ores.  The
furnaces seemed to be cranked to full volume, but no activity
was evident.  Standard Borg stations were immediately evident on
their level.  All stations were currently occupied.
    Whitecloud signaled for them to split up in standard paired
teams.  The first order of business for her, was to examine the
Borg of this area.  She approached the nearest station with
phaser drawn and trained on the occupant.
    The Borg was not the 'standard' model but was highly
modified.  Most Borg tended to have only part of their face
modified with implants.  These Borg, however, had totally
covered faces, in fact, every part of their bodies were covered.
    Another major difference was that they all had large back
packs.  The packs were made of many layers of small tubes that
were fused into their backs.  The stations the Borg stood at
were  larger then the standard stations to allow for the bulk of
the packs.
    "Why the back packs?" Whitecloud wondered aloud.
    The technician with Lieutenant Whitecloud ran scans on one
of the Borg.  "Sir, it appears that the back packs are cooling
units.  The modification would be necessary for the Borg to be
able to operate in this environment."
    "I agree." Whitecloud commented "I can think of no better
explanation."
    The level they were on, was more like a catwalk.  It
consisted of grating similar to what the elevator was made of.
The catwalk slowly spiraled down to the bottom of the foundry.
From their current position, though, the team could not see the
far side of the area.
    The Drop Team reassembled and started down the catwalk in
their standard two by two cover.  So far, they hadn't seen
any movement in the area but weren't going to take any chances.

--------------

    When Team Three tested the elevator, they found it still in
perfect working order.  Their fist stop was the level they had
visited previously.  The first goal was to try accessing one of
the ports.  This time, however, they would only monitor the
first data level.  There was no apparent response after ten
minutes so they disconnected and headed to the machinery.
    In the machinery area, the Borg continued to ignore the
team infiltrating directly among them.  The new objective was to
study the shop and determine what was being made.  Another goal
was to determine the level of technology being employed.  Were
the Borg manufacturing at a level above what the Federation was
capable of, and if they were, could they learn from it.
    It was apparent that the Borg could see the team members.
As the Borg wandered about performing their tasks, they would
adjust their paths so as not to run into anyone.
    The group had split into four sub-teams to more effectively
chart the area.  They were soon lost in the machinery that
towered above them, making most feel like insects.  It was soon
discovered that there were walk ways connecting the taller
machines.  Giving all a new perspective on the area.
    One of the subteams climbed to the catwalks for a better
view of the area.  The ladders were actually only long,
flattened U's built into the sides of the machines.  From the
catwalks it was obvious that this manufacturing area stretched
out for hundreds of meters beyond their entry point.  Beyond,
was what appeared to be another series of partitioned rooms,
similar to what they had just left.
    "Lets make for the far side." Utlin said "Maybe there are
more relics."
    The team gathered on the far side after two hours of
negotiating through the maze of machinery.  None had been
harassed or in anyway noticed by the Borg working in the area.
They fanned out and walked quickly across the fifty or so meters
of open area before the partitions.
    The new area was different from the partitioned section on
the far side of the level.  The area was not only walled but
covered.  The walls were sturdy and seemed thick.  The
tri-corders could not scan through the material and could not
positively identify it.  Where the partitions they had
encountered originally were open and easily accessible, they
could not immediately find an opening or door.
    "What is it?" one of the Techs asked.
    "Perhaps it's a storage facility." another volunteered.
    "Perhaps," Utlin said "We should find an entrance and find
out."  He then pointed to half the team and sent them in one
direction while he and the rest headed in the other.
    "Let us know if there are any changes in the tricorder
readings."  Anthony said as the teams separated.
    The walls were in panels of the same size as the dividers on
the other side.  These walls were dark green, almost black and
covered with a thin layer of dust.
    After ten minutes, the other team hailed Utlin.
    "Sir, we've found an area of the wall that appears to be a
sealed door."  Said the head tech with the group.
    "Acknowledged," Utlin returned "do not attempt entry.  We
will be with you shortly."
    Lieutenant Utlin then addressed the Vigilante "Home, this is
Team Three, requesting transport to sub team location."
    "Prepare for transport." came Chief Swanson's brief reply.
    The area around Utlin shifted and he and his team  found
themselves standing with the sub-team.
    "Report." Utlin said as soon as he arrived.
    "Sir," one of the techs said "we have found a seamed area of
the wall that reads thinner than the rest.  It is my opinion
that it is an opening of some kind."
    Utlin examined the seams then the surrounding wall.  "Are
there any scanners or releases in the area?"
    "No, Sir." The tech returned "We've done a complete scan of
the area and there are no other panels or any kind of scanning
devices."
    "What can you tell me about what's on the other side of this
wall?"  Utlin had stepped back and gazed at the 'door'.
    "Sir, our tricorders were unable to make accurate readings
through the material but since the door is thinner than the rest
of the wall we can make some cursory readings."  The Tech
responded.  "The atmosphere is breathable but uncirculated.  I
would describe it as 'stale'.  The door opens on to a hallway,
but we can't tell much beyond that."
    Utlin pulled out his own tricorder and pointed it at the
door.  He made a few adjustments then touched a button on the
control pad he wore on his right arm.  The team members with
their face shields down could see the MV Light ring come on
around Utlin's face shield.
    Utlin drew his phaser and held it in bent arm, pointing
in the air, the standard ready position.  "Team Three Leader to
Home." Utlin said.
    "Go ahead, Team Three Leader."  Came Commander Tarva's
reply.
    "Requesting transport to tricorder projected coordinates."
    "Prepare for transport." Tarva replied after a minute.
    Utlin touched a button dropping his face shield and said
"Energize."
    The standard, indirect, off-yellow Borg lighting
disappeared, replaced by the soft blue of MV radiating from
Utlin's helmet.  A long hall stretched into darkness in front of
him.  At the end of the light, he could see a connecting
corridor.
    Utlin turned around to examine the door, now behind him.
The difference in thickness between the door and wall were quite
evident.  The door was set into a meter deep alcove, this time
Utlin found the scanner they'd been looking for.
    "Home, this is team three leader." Utlin said formally.
There was, however, no answer.  "Home, I am not receiving your
reply." Utlin continued "I will, however, continue as if you can
read me.  I am inside the protected area.  There appears to be
no source of light.  I was hoping that my presence would trigger
automatic lighting but it has not." Utlin started shaking
slightly trying to fight back panic.
    "The area has obviously been sealed for a long time.  There
is atmosphere, but it is extremely stale.  There is minimal
dust, I can only assume that it indicates that the whole area is
tightly sealed from the rest of the station.  My first task will
be to open the door now that I appear to have access to the
control panel."
    Utlin pointed his tricorder at the control panel and fumbled
with its still relatively unfamiliar controls.  From what he
could tell, there appeared to be low voltage power to the panel.
The panel appeared to be a combination of previous control
panels and access terminals.  Utlin punched a few buttons and
looked for the scanner that the elevator had, but got no
response.
    Finally, Utlin decided to try the computer access. His
tricorder had been fitted with a 'standard' Borg style
connecter, so it plugged right in.  The tri-corder's automatic
diagnostics immediately began trying to access the port.  After
a couple of minutes it beeped indicating it had found a possible
access.  Utlin then had to press a button allowing it to
continue with a set of precoded, random access, algorithms.
    Within minutes, the panel lit up and the tricorder beeped
again.  Utlin now had two choices, he could try to access the
panel's functions manually or he could allow the tricorder to
continue its analysis.  Sick of playing with the tricorder,
Utlin reached out and pressed the largest button on the now lit
control panel.
    There was a pause after he pushed the button that made Utlin
think nothing was going to happen.  Then the door moved in
toward him and slid slowly into the wall.  When the door started
to move, Utlin lifted his face shield, eliminating the effects
of his MV light, and looked around.  Hidden lights in the top
corners of the walls had come on slightly illuminating the tops
of all of the walls.  It made for an eerie effect, like a
pathway leading into inky nothingness.
    As soon as the door opened enough for them to fit, the rest
of Utlin's team pushed their way in.  Four immediately formed a
standard cover formation facing down the hallway.  The rest
lined the walls, all with weapons drawn and safely pointed at
the ceiling.  The lights continued to brighten, illuminating the
team and the hallway.
    "Sir," Ensign Morris said "we were unable to read your
transmissions while the door was closed."
    "I thought as much since I could not raise you or home."
Utlin replied to his second.  "Post two guards outside the door
so we can maintain contact with the Vigilante.  Also, before we
move further in, we must determine how our signals are being
blocked.  Is it part of the structure or is it aimed at us."
    Utlin then stepped outside and signaled the Vigilante.
"Home, this is Lieutenant Utlin."
    "Report." Tarva said simply. "We have lost signals from all
personnel inside the new area."
    "The material appears to absorb all communication signals.
The tricorders were only able to penetrate at the thinner door
area.  I suggest that if we enter further into the area we'll
have to proceed with extreme caution."
    "Agreed," Tarva said "We'll beam down communication relays
so that we can maintain contact but we will be unable to get a
proper lock for transport.  If you go in, your going to have to
get yourselves out."
    "Agreed." Utlin returned.
    "One other thing." Tarva continued "Our scans are blocked
for over two hundred meters down.  You have a lot of area you
can explore, and only one known exit."
    "We'll proceed with caution."  Utlin said, "Out".
    Utlin saw a number of backpacks appear.  Each pack contained
twenty relays about the size of a tricorder.  They would simply
activate and place the relay on the floor when their connection
with the Vigilante began to fade.
    When Utlin returned to the hall, the lights were bright
enough to see to the end of the hall.  The lights were not
bright, just the standard off yellow indirect light that was
prevalent in the rest of the level.
    The five packs of relays were distributed to the technicians
then the group started down the hallway.  Twenty meters in, they
came to the first intersection.  Utlin split the group in half
and each took a corridor.

-----------

    Captain Robert Anthony stood in the Away Team command
center.  The center looked like the bridge of a Starship.  There
was a commander's chair in the middle of the room with
operator's stations in front of it.  Each operator could monitor
several team members at a time and the commander could direct
any of the video to one of five screens on the front wall.
    When Anthony had first visited the center during one of the
training missions, Lt Commander Golta had instinctively offered
the center chair.  Anthony, however, refused telling Golta that
in this room he was in charge of activity unless specifically
relieved.
    Now the command center was busy.  With the most away teams
yet deployed, most of the operators had reported even though
they were not needed.  The area had been designed to follow and
coordinate over 300 personnel, if needed.  Currently there were
only 48 deployed.
    Tarva sat in the commander's chair.  With Golta taking this
early opportunity to join in on the fun, Tarva had to cover for
him.  Anthony smiled to himself, he wished he could be out there
with them, that's why he was here now.

-----------

    Soon after splitting up, Utlin's team found the first room.
The lights in the room came on as they entered.  The room was
filled with bunks holding mummified Borg.  These Borg were
different than the ones Starfleet was used to.  They where
obviously Borg but not nearly as heavily implanted as standard
Borg.  Also, the stations they were on appeared to be only sleep
areas.
    "Sir," one of the techs said to Utlin after examining some
of the bodies.
    "Yes, Lieutenant." Utlin replied.
    "I can not find any of the standard Borg circuits in these
bodies." The tech said.
    "Elaborate." Utlin said as he approached the young woman.
    "Sir, all Borg we have encountered have two main kinds of
interfaces.  The first is the main power connector, which allows
them to feed.  The other is the Borg link, which keeps them
connected to the whole.  These Borg do not have the circuits for
the Borg link.  In fact, it is my guess that these units were
never part of the link.  I wish I had the facilities on the ship
to do a proper analysis."
    "Team leader to Home." Utlin said to his mike.
    "This is home." came Tarva's voice.
    "Can you read the Borg units in the area?"
    "Only through your transmissions, we are unable to
accurately scan the area."
    "Would it be possible to transport some of the bodies to
home for closer inspection?" Utlin sounded more curious then
anything.
    "If you triangulate with the location function on three
tricorders we may be able to get a proper lock."
    "Permission to attempt transport?".
    "Hold." was Tarva's reply.
    There was a few minutes of silence then Tarva returned
"Proper isolation fields have been activated.  Prepare for
triangulation."
    Utlin motioned for three techs to surround one of the
bodies.  "Sending coordinates..now". Utlin said when all three
signaled ready.
    There was a slight pause then the body was gone.  They did
the same with two other bodies that appeared to be different
models.
    Utlin's team continued to survey the new area.  They soon
found areas that appeared to be living, dining, even recreation
and computer interface areas.  It was slow tedious work, but
Captain Anthony decided in order to understand an enemy, one
must know as much about its past as possible.

-----------

    Anthony stood in an observation room looking at one of the
Borg bodies.  They had turned out to be extremely well preserved
and were providing unprecedented information on the inner
workings of the implants.  Though the Enterprise had made
extensive examinations of a captured Borg, named Hugh, and
Locutus, there had never been a chance to actually dissect one.
    It was the Vigilante's third shift and a smaller staff was
on duty in the science section.  Two of the other Borg were
currently being examined, this one was alone.  Anthony saw
movement out of the corner of his eye.
    A woman entered the exam room.  She wore the standard, red
uniform of command and commander's pips.  Her wavy blond hair
barely touched her collar and was held off of her face by a
couple of simple clips.  With her hands clasped behind her back,
she slowly walked around the creature.
    Anthony watched in fascination as the woman circled the Borg
several times.  Finally, she stopped and looked at Anthony
through the one-way window.
    "It's close," she said "very close, but not exact.  It was
never part of the link.  You need to be able to access the link
without them knowing.  If you can do that, they can be
defeated."
  Anthony watched the woman approach then fade as she reached
the window.  He continued staring into the room as a tear
formed in his eye.  Blood dripped from his palms from squeezing
his finger nails into them.

-----------

    Lieutenant Utlin sat in his quarters examining recordings of
the days explorations.  His roommate had been transferred closer
to the science section so he again lived alone.  He was not
reviewing his own team's records, rather he was looking at Team
One's records of their explorations of the top half of the
station.
    There was occasional evidence of his own civilization.  The
artifacts were coldly presented, but they were there.  Remains
of familiar structures and workmanship, Children of Lin'hrlar
raped and twisted by these evil creatures, all could be seen in
these cold records of the days journey.
    Utlin had wanted to spend this time in the Command Center
but had been ordered to his quarters.  They wanted him fresh to
lead the expedition to the next layer of the 'Barracks', what
the new section had been named.
    As survey teams continued the exploration of new areas,
Utlin found it irresistible to stay away from the Command
Center.  Now, he sat in his quarters examining what records he
did have and making plans for his next shift.
    Since the Captain had ordered a fourth team into the outpost
to explore the next level down they were already suffering from
information overload.  With all of the information coming in, it
was impossible to analyze all of it.  It was quickly becoming
obvious that they would not come near to having a complete
understanding of the outpost during their time here.  The
technicians of the Command Center had become more like
librarians of the new data rather than analyzers of it.
    As Utlin stared at the images before him his door signal
chimed.
    "Come." he said without looking up.
    He heard the door open and someone walk in.  He looked up to
see Anndrea standing just inside his door.  She wore her
standard uniform but her straight back hair hung loose about her
collar.  Somehow, she seemed softer than usual, almost, but not
quite, peaceful.
    Utlin stood out of courtesy "Good evening, I believe is the
proper greeting." he said with a smile. "How are you tonight."
    Anndrea managed a soft smile then said "I'm fine, just came
to see what your impressions of today's events are."
    Utlin motioned to one of the rough duty chairs near his work
station and waited for Anndrea to sit down and let the chair
form to her.  "The working areas that Team one explored are
fascinating and quite disturbing to me but they don't seem to
hold many surprises."  Utlin began.
    "How integrated have your people seem to have become with
the Borg?"  Whitecloud said carefully.
    Utlin sat back and looked at the images scrolling by on his
screen.  "Their behavior or duties don't seem to be any
different than the rest of the Borg units.  The impression is
that they have become fully assimilated into the society.  Other
than that, I really don't have any special insights, they are no
longer Children of Lin'hrlar, they are Borg."
    Whitecloud sat back in the chair and closed her eyes.  Her
legs moved slightly as if she were trying to swing the chair
from side to side.  "Has there been any progress with Lady
Purlerna?"
    Utlin cringed at the thought.  "She's changed, she no longer
acknowledges the existence of the Borg, she thinks she's on a
long cruise.  We sit in this accursed outpost and she looks at a
view screen and sees stars streaking by."
    "Haven't the counselors been working with her?" Whitecloud
asked.
    "The counselors on this ship are trained to help warriors
find their lost metal.  They are no not what you would call
xenophysicologists, trained to guide an alien mind back from its
depths.  From the cases I'm familiar with, when one of my people
was lost, there was no retrieving.  Perhaps it is Lin'hrlar
protecting her from the terror we face now."  Utlin had
obviously given this a lot of thought.
    "What is going to be done with her?" Whitecloud actually
sounded concerned.
    "It's still undecided," Utlin replied "She has named her
computer interface and now thinks it's her attendant.  She never
leaves her room and I am the only person she even acknowledges,
all others she ignores."  Utlin had learned to like Purlerna in
the past couple of days but it was more out of pity.
    "She has only been like this for a couple of days, she could
still come back."  Utlin continued.  "Like I said, once a Child
of Lin'hrlar is lost, they usually can't be retrieved except
through the grace of Lin'hrlar himself."
    "You will continue to try to talk her out of it?"
Whitecloud asked.
    The thought was obviously an unpleasant one, but Utlin
nodded simply and said "Yes, I'll continue to visit her when I
have time."
    "Very good, now, tomorrow we have a big day ahead of us.  I
plan to join you in the exploration of the next level of the
barracks."  Whitecloud looked as if she had just delivered very
good news.
    "Your taking command of my team?" Utlin asked defensively.
    "Not at all, we've just decided that Team two should join
you in the Barracks.  It is too large of a place to be explored
by only sixteen people at a time."
    "And the other areas?" Utlin asked.
    "Teams six and seven will join Team one in the upper half
and Team five will join Team four on the next level.  You know,
Team four seems to have found some sort of communications array
but they're holding decision on that until we get more
information."  Whitecloud replied.
    "We really should get some rest before the expedition."
Whitecloud said after a moment of silence.
    "Perhaps your right." Utlin agreed.
    Anndrea stood and walked into the other room, removing her
uniform jacket.  Utlin followed her, saying "Computer, lights
intensity 2."
    The lights dimmed.

-----------

    The two teams appeared outside of the only known entrance to
the Barracks.  Team four had looked for sign of it on their
level, but could not track it down.  The further into the
outpost they got, the more interference they encountered in all
of their tracking equipment.
    The third shift teams were just emerging from the structure.
Their leader immediately reported to Lieutenant Whitecloud.  The
report basically told them that there were no new findings, only
Borg in various states of decay.  They hadn't even found any new
specimens worth beaming aboard the Vigilante in almost four
hours.
    The only new thing that had been found since Utlin had left
was the elevators they planned to take down to the next level.
They were easy to find, just follow the main hallway to its end.

The team that found the elevators had tested one but had not
ridden it, that would be the privilege of their superiors.
    Utlin felt a strange feeling as the double team approached
the bank of elevator shafts.  There were 30 personnel in the
group, one person from each team had been left at the door as
guards or look outs.
    He looked up at the top of the shaft just above his head.
"I don't think we want to go up."
    The controls on the two panels were identical to the ones on
the earlier elevator.  They had already been tested, and were
suppose to be properly set for use.  Utlin hesitated then
stepped onto the grating.
    "I guess I'm still the logical choice." he quipped "I've got
the most experience."
    "Remember," Whitecloud reminded him "the Vigilante's
transporters are not there to pull you out this time."
    "Thank you Lieutenant," Utlin said with a smile, "I'm aware
of that."
    There were twenty five elevators along the back wall.  The
two teams would use three of them.  Two team members were chosen
to stay at the top level to maintain the communication relays.
Relays were also being attached to the top of the shafts and to
the elevators.
    The second level looked like the one above, a main corradore
down the middle with connecting corridors about every twenty
meters. There were no immediate differences, but all felt the
cold isolation and age of the area.  It was like opening an
ancient tomb.
    Once everyone was off the elevators they split into their
original teams.  The plan was for each team to explore half of
the level, using the main corridor as the divider.  It was soon
discovered, however, that this level was quite different than
the first.
    The area to the right of the corridor was one large open
room.  It was divided off by standing containers, supporting
wires and other hardware.  The containers were large enough to
hold a large size humanoid, they were black with metal trim and
partial glass fronts.
    The containers could not be seen over, because of their size
and the support cabling running to them.  The team could tell,
however, that this half of the barracks was filled with them.
    "Sir," one of the technicians said "The containers hold Borg
units apparently in stasis.  I read a very small trickle charge
to all of the chambers."

--------------

    After two days of exploring the lower levels of the
'Barracks', Whitecloud and Utlin were ready to make a formal
presentation to command.  Captain Anthony and the rest were in
the Command Room.
    Whitecloud stood by the main screen with a cut away
schematic of the Barracks.  "Sir," she began "The Barracks is
filled with a different model of Borg then we have yet
discovered.  As you know, the top level was filled with
mummified Borg that do not appear to have been part of the 'Borg
link'.
    "Most of the Borg in the lower levels, however, do appear to
be in some kind of stasis.  The Borg in stasis do seem to be in
perfect condition.  There are some units that appear to be in
defective containers.  These Borg show extreme signs of
decomposition."  The picture on the view screen then split to
show a pile of Borg attachments and what appeared to be humanoid
remains.
    Whitecloud turned and looked at the remains "We have begun
an analysis of all Borg attachments.  Because of the age and
micro-fine wires, the job of safely collecting the pieces is
extremely tedious."
    "What about the undamaged units?" The Captain asked.
    The remaining schematic of the Barracks was replaced with a
picture of a Borg in its container.  "We are not certain what
the reaction might be if we disturb the viable Borg units.  We
are waiting for your go ahead to open some of stasis units."
    The group began discussing the pros and cons of opening some
of the containers.  It was obvious that the computer systems on
each level monitored the Borg, but it was impossible to
determine to what degree.
    Robert Anthony listened to his officers discuss the merits
of opening the stasis tubes.  It occurred to him that there was
only one decision he could make.
    The Captain cleared his throat and the room immediately fell
silent.  Anthony stared at the ghostly Borg image on the screen
for a second then said "You've been discussing weather or not to
open some of these containers, there is no choice."  Anthony
looked at his officers for a second then continued.  "The
containers MUST be opened.  Our mission here is to gather
information, nothing else.  This gives us only one plan of
action, that is to open the containers and discover as much
about these units as we can.  The choice then becomes..How do we
do it?"
    Anthony looked at the group again, they were all nodding
agreement.  "Now, what I want you to do is analyze as much as
you can about these units and the stasis system before we try
opening a chamber.  I will be kept abreast of all progress on
the analysis and will maintain the final go ahead for opening,
is that clear?"
    "Yes, Sir." the group responded, practically in unison.

--------------

    Lieutenant Utlin stood in an observation room looking at
Lady Purlerna.   She sat hunched in a corner of her room, slowly
rocking back and forth.  Her arms were wrapped around her knees
hugging them tightly against her face.  "How long has she been
like this?" he asked an attendant.
    "We found her that way this morning." a female Ensign
replied.  This one was different from most, she had short,
straight, black hair and pointed ears.  Whenever Utlin spoke to
her, which wasn't often, she seemed cold, almost mechanical.
    "Did anything happen that could have caused this reaction?"
Utlin continued to stare at Purlerna.
    "The surveillance cameras show that she woke in the middle
of the night and crawled into the corner."  The pointed eared
female continued to talk to him emotionlessly.

    Utlin approached Lady Purlerna then knelt in front of her.
He reached out and slowly stroked her hair from in front of her
face, soon he could see her forehead over the top of her knees.
She had stopped rocking as soon as he touched her.  He gently
placed his hands on either side of her head and made her look up
at him.
    Half of Lady Purlerna's face was covered with a black mask.
A multi-prismed goggle covered her right eye, wrapping around
the side of her head, embedding into her skull just behind her
ear.  A small red laser was attached to the appliance along the
jaw line and flashed across Utlin's face as the woman looked up
at him.
    Purlerna's good eye widened in recognition, she spoke in a
mechanicle imitation of her own voice "Resistance is futile,"
she said "surrender for assimilation and serve the greater good
of the collective."

    Utlin sat straight up in bed trying to chase away the dream.
With his movement, the cabin lights brightened slightly.  He
looked around trying to remember where he was.  Utlin could
sense warmth next to him, he looked down on the bronze, muscled,
V shaped back of Anndrea Whitecloud.  The sheets covered her to
her waist and her straight black hair partially hid her
shoulders.  She hugged a pillow under her face and looked at him
with her one exposed eye.
    "Was it the dream again?"  She sounded slightly groggy but
very coherent.
    "Yes."
    "Is it still the same."
    "No, she spoke." Utlin shook his head trying to clear the
remaining threads of the dream.
    "And" Anndrea still hadn't moved.
    "She said that resistance is futile and we should just
surrender."  Utlin had leaned back on his elbows and was looking
at the painting of a four legged creature on the ceiling.  "Do
you think they know where we are?" He asked.
    "I don't think so, they'd be in here after us." Anndrea
responded. "Besides, there isn't much we could do about it if
they did."
    Utlin continued to study the ceiling and the poem Anndrea
had included:
        Go to the Wild that waits for me;
        Go where the moose and the musk-ox be;
        Go to the wolf and the secret snows;
        Go to my fate...who knows, who knows!
                                          R.W.S.
He finally understood.

--------------

    Transport areas were set up on each level of the barracks.
Standard pattern enhancer pylons were used and were tied into
the communications relays.  This allowed the crew to stand in
the field defined by the pattern enhancers and be beamed back to
the Vigilante as if a transporter had been installed.
    Utlin and Whitecloud watched as technicians started running
tests on the room's computer terminals and on five viable Borg.
One of the tricorders connected to an interface port began to
beep indicating a break in the code.
    "Has it accessed the terminal?" Whitecloud asked as she
stepped toward the tricorder.  As she spoke, the other
tricorders also began to signal.
    Several technicians were monitoring the tricorders with the
larger analytical tricorders.  "Negative." one of them said "The
tricorders appear to have activated the computers."
    "Home, this is team one, should we discontinue experiment?"
Whitecloud said immediately.
    After a slight pause, Commander Tarva replied "Negative,
continue data collection, but upgrade to defense condition two."
    The teams had entered the barracks under defense condition
one; drawn weapons, mutual cover formations etc.  They were
currently under def-con 3; holstered and locked weapons, helmets
off or visors up, generally a more relaxed working atmosphere.
Def-con 2 called for charged weapons, helmets on with lowered
visors where appropriate and nonworking personnel taking
positions to provide more security.  The security personnel were
always under a defense condition that was one higher than the
rest of the crew.
    The computer panels began to light up and seemed to begin
running diagnostics as lights and displays began flashing in
increasingly complex patterns.  Within minutes, all levels began
reporting that their computers were going through the same
sequences, even those that they had not tried to access.  Soon,
the rooms began to light up as the support cabling running to
the stasis containers began to glow.
    When the stasis containers began being effected by the power
up, Tarva ordered all tricorders disengaged.  The removal,
however, had no effect on the activation.
    All teams except for teams two and three were immediately
evacuated.  Teams two and three remained behind to monitor the
new activity.
    All remaining team members had gone to def-con one.  The
team couldn't do much about the activation,just monitor and try
to remain close to the beam out points.  Lieutenants Utlin and
Whitecloud remained by the computer centers as the technicians
continued to monitor the changes.
    "Sir," one of the techs said "There's something happening in
one of the canisters."
    A canister that had stood off to the side from the rest had
lit up and began to hum.  All phasers were immediately aimed at
the lone container.  Whitecloud, however, signaled for them to
relax slightly.
    Soon, the front of the canister jerked open releasing steam
and an acrid odor.  The Borg standing inside could be seen
unmoving through the smoke.  It didn't move for several seconds
then began to take deep breaths.  Bellows built into the Borg's
sides  constricted and expanded to force each breath.
    The Borg was built different from other units, it had a full
head appliance that didn't cover any part of its face, the body
armor was thicker than normal and more angular.  The unit's
attachments for the arms were connected on top of the arms
leaving the hands free.
    Its eyes snapped open and it stepped out of the canister
walking directly toward the group.  They thought it would ignore
them as usual, instead it stopped and stared at its reflection
in the Utlin's face shield.
    The Borg spoke to Utlin in a cold mechanical voice that the
universal translator automatically translated to standard
"Identify."
    For want of something better to do, Utlin opened his face,
bowed slightly, never losing eye contact with the Borg and said
stiffly "Sir Utlin, at your service, Sir."
    The Borg stood with his head tilted to the side for a second
then said in perfect mechanical Federation Standard "Why have
you awakened me..us..Sir Utlin At Your Service Sir."
    Utlin hesitated for a second then said simply "Identify."
    The Borg did a stiff imitation of Utlin's bow and said
"Offensive Unit One of ten kil.  Why are you awakening us, Sir
Utlin At Your Service Sir."
    The Borg tilted its head to the side again and stared past
Utlin for a second then said "RESISTANCE IS FUTILE, YOU WILL BE
ASSIMILATED...." the Borg looked confused for a second then
spoke again "The link has been expanded, this must be
investigated."  He turned to the computer terminal making a fist
of his right hand causing a long metal rod to telescope from the
underside of his wrist, then connected to the terminal.

    There was a call from one of the guards on the first level
of the Barracks "Attention, this is sentry one, we have company.
Three Borg have just materialized outside the Barracks and are
heading in."
    Tarva's response was immediate "All teams, evacuate
immediately." Tarva hesitated for a second then added "Defend
yourselves with extreme prejudice."
    As Tarva spoke, so did the old Borg "You are intruders."
    The Borg then moved faster then anyone had ever seen.  His
left arm connected with a device attached to his hip, bringing
it up pointed at Utlin.  Before they had a chance to react, the
thing fired a burst of yellow energy striking Utlin just below
the right elbow as he jumped out of the way.  The blast severed
Utlin's arm and blew a large gash in his right side.  Utlin's
dark red blood splattered in all directions as the blast
continued on striking a much slower human tech.  The tech to
simply blew apart as he flew back against several stasis
canisters.
     Utlin was the first to fire back at the Borg.  He had fired
as he jumped out of the way, still taking the hit.  The Borg was
hit low on its right side.  It staggered back a step but it took
aim again.  Through the ensuing commotion Lieutenant Utlin could
still hear the whirring and beeping of the tricorder clutched in
his right hand.
    This time the Borg's shot went wide as it absorbed ten more
red phaser blasts.  The team could hear the Borg's shot strike
something behind them with a loud explosion.  The Borg stumbled
back from the phaser strikes, with wires sparking from dry
wounds.

    <This is Chief Swanson,>
    Came the voice of the usually quiet transporter chief.
    <We've just lost signal from transport area A, repeat, we've
just lost signal from transport area A.>

    The Borg fired again, this time the shot went totally wild,
destroying several stasis containers and showering the team with
sparks and debris.  It was the last thing Offensive Unit One of
Ten Kil did as a bright blue phaser beam struck the creature,
instantly vaporizing it.

    The radio-intercom was soon filled with disjointed
confusion...
    <The Borg are still coming>...
    <Team Three withdraw immediately>...
    <Team Three, report status>...
    <The door is closing>...
    <We're going to be trapped>...

    None of the team members had had the presence of mind to
change their phaser settings except Lieutenant Whitecloud.
Anndrea knelt over Utlin holding a triage pad over the wound,
her phaser still leveled at the spot where the Borg had been.
The rest of the team held similar cover positions all kneeling
or crouched giving 360 degree cover.
    <Team Three....withdrawal....level one.....Quad A... extr..>
Commander Tarva's transmission and all other's from the
Vigilante ended with the closing of the Barrack's door.
    One of the techs who was still monitoring his tricorder
spoke up "Other canisters are powering up."
    Whitecloud quickly looked at the lights on all of the
equipment. "Lets move toward the elevators."  She thought for a
second then added "Target all equipment and make sure we get
those analytical tricorders out with us."  With that she fired
an extended beam into the main computer station near them.
    The team got to its feet and started firing on all computer
terminals, canisters and conduits.  They were soon being
showered with sparks, fire and debris.  The closest canisters
and equipment vaporized while other equipment started exploding
from chain reactions.
    Team Three started down the hall toward the main corridor.
Lieutenant Whitecloud held Lieutenant Utlin to her side holding
the triage patch in place.  Utlin's stumped didn't bleed, it was
cauterized by the blast.  The rest of the team split into their
standard two by two cover formation.
    Borg units started to appear from around the banks of
canisters.  Each was slightly different from the next but all
appeared to be heavily armored and lumbered more than the
standard Borg.  Many had full face appliances and carried
accessories strapped to their sides.
    The new units were immediately targeted but were barely
effected by the standard red phaser, even at full power.  Many
of the team, however, had already switched to blue which
vaporized the creatures.                          .
    "Full power to blue spectrum." Whitecloud yelled through the
confusion.
    With the whole team now firing in blue, large areas started
to clear around them as everything vaporized.  The phasers
however, started to over heat and shut down, Whitecloud's was
the first to go.
    Anndrea Whitecloud holstered her phaser and took Lieutenant
Utlin's.  Using the aiming systems built into the weapon and her
helmet, Anndrea drew down on another emerging Borg.  Left handed
firing was always one of Anndrea's weak points but she still
drew marksmanship honors.  Now, with the weight of Utlin at her
side, the pressure of having to keep moving, the intense heat
from the fire fight and moving targets, Whitecloud missed.
    As soon as she missed, Whitecloud called a warning, dropped
the Lieutenant and jumped to the side, re-aiming.  Before she
could regain her target, however, the Borg fired at her and the
two team members that had stayed with her for support.  The two
others were hit by the full force of the blast disintegrating
them in a blaze of red.  Anndrea felt the remains of her
commrads splash against her as she vaporized the Borg.
    Utlin lay face up on the deck clutching his side, slowly
rocking back and forth.  Anndrea couldn't see his face, but
could still feel his pain.  She helped the Lieutenant back to
his feet and headed into the curtain of smoke and fire ahead of
her.

--------------

    The communications on the bridge of the Vigilante had
erupted into a sea of confusion as soon as the door to the
barracks closed.  Captain Anthony was suddenly bombarded with
information from every survey support team on the ship.
Anthony's attention, however, was focused solely on Commander
Tarva, Lieutenant Commander Kartang, and Lieutenant Commander
Golta.  Golta and Kartang were in their command centers and
shared a split main screen.
    "Sir, all teams except team three were safely evacuated
before the door closed." Tarva reported.
    "Were the evacuation coordinates successfully relayed."
Anthony sounded like he was grasping at straws.
    "I don't know what good that will do." Golta growled "even
if they make it to the coordinates, there's no way we can
transport them out.  The Borg have raised the transport shields
again."
    Anthony scanned the faces on his main screen then turned
slightly to also look at his first officer.  "That's our next
mission, to retrieve the lost Drop Team and their tricorders."
    "Sir," Tarva said formally, "I must remind you that our
mission guidelines clearly state that we should not jeopardize
the mission of the Vigilante for the life of any member of the
crew."
    Anthony smiled slightly "The key word there is 'guidelines'.
The over ridding mission command is that the Captain has
complete authority to follow his own judgment."
    Tarva sat up a little straighter, she never wanted to leave
the team behind.  It was, however, her job to remind the Captain
of mission regulations.
    Anthony turned back to the screen "Now, I want suggestions
for the rescue, and I want them within ten minutes.  We have
people dying down there."
    Ten minutes later, Anthony and Tarva met Golta, Kartang and
Lieutenant Valerta in the 'Cavern'.  "Okay, what's the plan?"
Anthony asked as they approached.
    The two Klingons and the Kalonian came to attention as the
Captain and First Officer approached.  "Sir," Kartang said "we
have devised a plan to retrieve Drop Team Three."
    "Lets hear it."  Anthony said immediately.
    "We recommend sending in a drop ship to retrieve the team."
    "How do you recommend we get the drop ship in there?" Tarva
asked.
    "If we blast our way through the deck directly below us and
the underlying walkway it would be a straight drop to the
Barracks."  Kartang said enthusiastically.  "The drop ship
should have enough fire power to blast a hole in the barracks
and allow retrieval of the team."
    Anthony looked at the warriors in disbelief this was a
suicide mission if there ever was one.  It would also, without a
doubt, give away the position of the Vigilante.  He then looked
at the female pilot "I assume you have volunteered to pilot the
drop ship."
    The female Klingon came to stiffer attention and said
proudly "Yes Sir."
    Anthony then looked at Tarva who was scrutinizing the Pilot
"What's your opinion Commander?"
    "We'll have to move the ship as soon as she drops."  Tarva
said contemplatively.  Then to Valerta "You'll have a real rough
ride."
    "I can handle it." the Klingon said threateningly.
    "Okay, contact tech, find out exactly what we'll need to do
to punch a hole big enough to drop through."  Anthony said and
started to turn back toward the door.
    "They're already working on the calculations." Golta
informed the Captain.
    Anthony smiled slightly again "Very Good, we'll set a
tentative time for the drop in exactly twenty minutes."  Anthony
paused in mid turn and said "I'll want a second drop ship
prepared as a backup."
    "Sir," Kartang said "Lieutenant Valerta is the best pilot we
have besides myself.  As commander of the drop ship fleet, I
recognize it is my duty to remain with the command center but if
the mission proves too hazardous for even Lieutenant Valerta, I
request the honor of piloting the second drop ship."
    Anthony stood in his half turn and looked over the group for
a second "Permission granted." he said simply and exited the
Cavern.

--------------

    Through the EVE system built into her helmet, Whitecloud saw
the computer generated outline of the tail end of her retreating
team.  The figure was providing back cover for the rest of the
team continuing ahead.  The soldier's phaser trained directly on
her as she approached, then aimed high and fired over her
shoulder.  She could smell the ionization and feel the intense
heat as the shot barely missed her head.  Whitecloud never
flinched from the shot, just kept moving.  She did duck,
however, as she felt debris land about her.
    "Report." Whitecloud commanded as she approached the sentry.
    "Sir, including you two, I can account for seven." the
sentry said without diverting his attention from the
surroundings.
    Whitecloud cringed, she had lost half of the remaining team.
How many more would die, rather, would any of them survive?

    Whitecloud found the remaining four just inside the entrance
to this half of the level.  They were providing mutual cover and
watching the main corridor and elevators.  Anndrea laid Utlin
with the group then crouched with them against the wall.
    "What's the situation?"  She asked as she looked out at the
elevators.
    "The Borg in stasis in this section seem to have stopped
reviving."  One of the warriors said  "The Borg by the elevators
appear to be the ones that came in from outside."  The man
nodded toward three Borg standing stiffly by the center of the
bank of elevators.
    "I wonder how long they've been there?" Whitecloud mused.
    "They arrived just after we did." one of the four
volunteered.
    "From above?"
    "Aye, Sir" They came down on the elevator.
    "Sir," the remaining tech said "I'm picking up a lot of
movement in here, the Borg are still waking up."
    "We'd better get out of here." Whitecloud said.  She then
motioned for someone to pick up Utlin and they started heading
toward the elevators.
    Just as they started along the wall, the three Borg
separated forming a large triangle.  Immediately, cylinders of
green light appeared as more Borg beamed into the triangle.
    "They're using the three to triangulate for beaming." one of
the techs said.
    "That means their sensors can't read in here either."
Whitecloud responded.
    Soon, ten Borg were in front of the elevators and were
heading toward the stasis room.  Several of the team immediately
drew down on the Borg, but Whitecloud waved them off.  "Lets see
what they're going to do."
    The team continued toward the elevators, hugging along the
wall.  When they were about half way, one of the tail guards
called out "We've got more company."
    Five old Borg had emerged from the stasis room and were
facing the now advancing Borg.  The Borg had passed the team and
totallyignored them.  The two groups of Borg stood staring at
each other for a few minutes.
    Whitecloud had the group hold its ground waiting to see what
would happen.  Finally, one of the old Borg spoke.
    "The Link has been expanded beyond its original intent."
    "THE INTENT OF THE LINK IS IRRELEVANT" One of the newer Borg
said in a mechanical voice that sounded like many voices.
    "We have been awakened, there are intruders to deal with."
    "INTRUDERS ARE IRRELEVANT, YOU ARE OBSOLETE YOU MUST BE
REASSIMILATED."
    "We have been awakened, there are battles to be won,
intruders to be eliminated."
    "THE INTRUDERS ARE IRRELEVANT, BATTLES ARE IRRELEVANT,
WINNING IS IRRELEVANT, YOU MUST BE REASSIMILATED."
    More old Borg had begun to emerge from the stasis room and
columns of green light started to appear bringing more newer
Borg.  "We'd better get out of here while we can." Whitecloud
said.
    As soon as the team started to move, one of the old Borg
pointed its weapon at the group.  Before it could fire, however,
one of the other Borg grabbed the weapon with one hand and
removed a circuit from the creature's neck with the other hand.
The Borg immediately fell to the floor.
    The old Borg units immediately responded by firing on the
other Borg.  As soon as the firing began, the team broke into a
dead run toward the elevators.  The newer Borg were being cut
down by the old Borg but replacements were beaming in.  The
replacements, however, had shielding that could withstand the
blasts of the older Borg.  By the time the team was on the
elevator, the hallway was filled with both older and standard
Borg.  The standard Borg at first seemed to be taking a beating
but looked like they would eventually overwhelm, as usual.

--------------

    Lieutenant Valerta sat alone in the drop ship.  She wore
full pilot armor phasers strapped to both hips.  She sat tensely
in the snug pilot's seat with a half snarl on her lips.  The
signal over the door counted down eternally slow, her world seem
to be passing by in slow motion.
    Drop ship command and the bridge heard Lieutenant Valerta's
Klingon primal scream as the drop ship launched.  As soon as DS
Twelve cleared the bay, The Vigilante began a fast assent toward
the top of the Outpost.  DS Twelve had its own flight path,
straight down toward a solid deck.
    Everything had to be timed just right, as DS Twelve
approached the surface, the Vigilante beamed photon torpedoes
into place.  The torpedoes appeared and detonated seconds ahead
of DS Twelve.  The cloaked drop ship's egg shaped shields could
be seen against the fire and debris of the explosions as it
passed nose first through the holes the Vigilante had just
punched in the outpost.
    Valerta struggled against the turbulence of the explosions
as she passed through the outer hull and the access tunnel the
first team had originally beamed into.  The turbulence from the
depressurization reminded Valerta of piloting a star glider
through the solar winds of the Omicron Dellon.
Once Valerta cleared the access tunnel it was a straight
drop to the machine room and the top of the barracks.  Valerta
fired her thrusters swinging the ship toward the barracks then
immediately activated the targeting systems.  The drop ship's
fire control computers where preprogrammed with strike
coordinates and evasion maneuver sequences.
    The drop team had been ordered to extraction point alpha
which was the corner of the barracks to the right of the main
door.  Valerta was to target the wall to the left
ofthe door so as not to jeopardize the team.
    The drop ship approached the barracks in extreme
acceleration with shields at maximum and cloaking engaged.  As
soon as she was within range, Valerta fired a full volley of
photon torpedoes at the barracks.  The cloaking peeled away from
the drop ship to allow the firing then immediately reappeared as
extreme evasive maneuvers were taken.
    When Valerta finished her turn and roll, she came about to
allow full sensor scan of the area.  The floor outside the
barracks had a giant hole in it but the walls merely seemed
discolored.  The ships sensors read no cracks or other kinds of
damage to the structure.

--------------

    When the elevator arrived at the top level, the team was
greeted by the two guards that had originally been posted there.
Leading the group off the lift, Whitecloud turned to the guards.
    "Report."
    "Sir," A Klingon said "three Borg came in then rode the
elevator down, no other Borg have entered since the door
closed."  As he was saying this, he continued to cover the other
elevators.
    "Sir," the other guard spoke up "what is going on down
there."
    Whitecloud had stepped away from the group trying to get in
the full picture of the situation.  "The old Borg have come out
of stasis, they appear to be designed for a single purpose."
    "What purpose?"
    Whitecloud turned and looked at the guard raising her face
shield "They're warriors."
    "They're designed for battle." one of the others added.
    There was movement in one of the elevator shafts.  The group
immediately dispersed from the area then turned back to cover.
    "It's from one of the lower levels." the Klingon noted.
    A lift holding ten Battle Borg arrived just as the Klingon
finished.  The Borg immediately started firing on the group,
cutting one of the techs in half.
    The response was immediate, with the team firing an array of
red and blue phaser blasts at the Borg.  Several Borg took
direct blue hits, causing them to stumble and burn but not
disintegrate.  The red phasers did no obvious damage.
    Whitecloud then yelled "Aim for the lift."
    Three of the Borg had gotten off of the elevator before a
blue phaser disintegrated it.  The seven Borg still on the
platform dropped out of sight.
    Whitecloud made an adjustment on her phaser before the three
could get too far from the shaft.  This time when she fired,
bright white fire flared from the sides of the phaser muzzle and
the Borg where hit with a solid blast of energy and blown back
into the shaft.
    "Use the photon grenades," Whitecloud yelled "destroy the
elevators before we have more company!"  As she said this she
stuck Utlin's phaser in her belt and ran toward the shafts
already pulling grenades from her equipment pack.
    "Set them at full power." Whitecloud added.  The remaining
members of the group followed suit, pulling out grenades and
making adjustments on the go.
    They spread out and started dropping the remote controlled
grenades down the shafts, even the one that had just been
destroyed.  They weren't quite done when one of the control
panels lit up.
    "Another one's coming up." someone yelled.
    Whitecloud pushed a few buttons on the controller on her
left arm and yelled "FIRE IN THE HOLE".
    The seven ran from the shafts, all watching the countdown
displays in their helmets.  They hadn't even made it back to
where they had left Utlin when they dove for the deck covering
their heads.  Twenty-one of the twenty-five shafts immediately
blew yellow and blue flames over the team.  A shock wave threw
everyone over six meters further down the hall.  The team
recovered quickly and came up with phasers in hand.  The control
pads for two of the remaining four shafts lit up.
    Whitecloud headed for Utlin and commanded "Take cover!"  The
rest of the team stumbled to their feet and headed down the hall
toward the nearest connecting corridors.  Anndrea had Utlin by
one arm dragging him towards cover when the Borg arrived.
    Both lifts were packed full of battle Borg who immediately
started to spread out.  The blue phaser blasts that met them
only damaged them, but didn't destroy any.  After laying down
several barrages, Whitecloud pulled out more photon grenades.
    "Set to full power." Whitecloud said as she adjusted the
dial on her's.
    "But Lieutenant," one of the techs said "full power?"
    "DO IT" Whitecloud yelled then leaned around the wall and
started throwing her grenades over the heads of the advancing
battle Borg.  She then turned toward the Klingon guard and said
"Target the undamaged elevators."
    As soon as the grenades rolled into the elevator shafts,
Whitecloud called again "Fire in the hole!" then detonated them.
    The team stopped firing and dove down the hall away from the
doorway.  Whitecloud never had a chance to take proper cover
when the flames, shockwave and deafening roar from the
explosions blasted down the side corridor.  The explosion lifted
Anndrea from the deck and threw her over the rest of the team.
    Lieutenant Whitecloud landed clumsily rolling sideways with
flopping arms.  Her back, arms and legs smoked from the flames
but she was saved from major damage by her fire retardant
uniform.

--------------

    The Borg response to Valerta's attack was immediate.  The
interior was soon filled with white flashes of probing energy
beams.  Valerta expertly flew evasive maneuvers and lined up for
another attack, this time on the door.
    Two volley's of triple photon torpedoes struck the door and
surrounding area with a blinding flash.  Valerta began her roll
and retreat before the cloaking was totally reengaged but this
time took her first hit.  The drop ship shuddered from the
strike but didn't suffer any damage.
    When she was finally able to check the damage of the last
attack, the results were the same, major exterior deck damage
and discoloration at the impact site.  There was, however, no
discernible damage to the barracks or the door.
    The drop ship shook from another hit, and even harder from
two shots that immediately followed.  Valerta cut power dropping
and rolling the ship to the right, trying to keep the probing
beams from zeroing in on her.  After the roll and another turn,
she accelerated and climbed straight up the side of the room.
    Before Valerta could start another run on the door, five
more energy beams found her.  The drop ship shook violently as
the shields failed and the ship took its first direct hits.
    Valerta struggled to maintain control with secondary systems
failing.  She then accelerated making abrupt turns and dives
trying to avoid the net of energy bolts.  Many of the shots
continued to miss as the Borg tried to adjust to the low scanner
profile of the now uncloaked drop ship.
    Valerta got the ship positioned for a third attack then took
more hits, four to the engine area, several glanced off the body
and others struck the cabin over the copilot's seat.  Power to
all systems began to fail as sparks and smoke filled the cabin.
Valerta had no recourse, she set the impact destruct mechanism,
accelerated toward the barracks, then hit the eject button over
her head.
    Since the Borg had raised beam out shielding, Valerta was
ejected mechanically.  The pilot's chair was ejected through the
top of the drop ship.  The top clam shelled around the pilot to
form an ejection pod.
    Valerta's ejection pod was thrown high over the machinery
below.  The pod was nearing its zenith when the drop ship struck
the barracks and self destructed.  The blinding white flash
damaged the outer machinery below and threw the pod further
across the room, crashing into the partitioned area.

--------------

    Kartang sat strapped into the pilot's seat of his drop ship.
He could hear the confusion of the situation through the
intercom but didn't say a word.  The bitterness of his own blood
slid down his throat as he bit his lip trying to maintain his
focus.
    "Drop Ship One," came Tarva's voice "prepare for
deployment."
    "Drop Ship One standing by." was Kartang's gruff reply

    Captain Anthony and the rest of the crew sat strapped into
their rough duty chairs. The main view screen showed the
expansive outpost hold stretching out below them.  The Vigilante
sat in a high corner of the outpost above the coordinates it had
occupied since arrival.  Now they had to perform a tricky Z-axis
drop back to the bottom to deliver more photon torpedoes and
Drop Ship One.
    "Sir" Lieutenant S'Erlet spoke up.
    "Yes, Lieutenant." the Captain replied immediately.
    "I'm reading a large number of low energy beam discharges in
the hold below us."  S'Erlet said as he studied the readouts in
front of him.
    "What purpose do they have." Anthony asked adjusting his
console to show S'Erlet's station.
    "They are similar to what Valerta reported before she
crashed."  S'Erlet said.
    "They're looking for us." Anthony said coldly.
    "What do we do, Sir?" Ensign O'Malley asked as she prepared
for the drop.
    Anthony's reply was simple "Hold our position."  then to
S'Erlet "Lieutenant, is there any sequence to their search
pattern?"
    S'Erlet worked quickly at his console trying to guide the
ship's computer through its analysis.  "Yes, Sir"  he then
anticipated the next question "Now predicting gaps in coverage
for next ten minutes and plotting possible course for Z drop."
    "Very good."  Anthony smiled then added "feed earliest
possible course to helm.  Ensign, initiate Z drop by S'Erlet's
feed."
    "Aye, Sir" O'Malley said and began making the proper
adjustments.  Immediately a two minute eighteen second timer
appeared on the screen. "Z position adjustment maneuver in two
minutes." O'Malley reported just as the timer reached the
marked.

    Kartang watched the new countdown progress, his own launch
sequence held at twenty seconds.  Kartang had been in numerous
skirmishes and raids along many of the empire's borders but
never before had he felt such fear.  He sat alone in an unproven
piece of Federation equipment waiting to dropped like a rock
into an alien space station to retrieve possible survivors of a
science expedition.
    He watched the sequence near its end, waiting for some sign
of the descent.  Of course he knew there would no discernible
movement but he still expected it.

    The Vigilante started its descent through the station.  It
made wide sweeping turns and sudden drops to stay in the gaps of
the energy beams.  Ensign O'Malley closely monitored the
computer's course choice and stood ready to redirect the
Vigilante in an emergency.
    "Ensign," the Captain said to his navigator "prepare a
course for emergency withdrawal from the station."
    "Aye, Sir." O'Malley said hesitantly then started pushing
buttons.
    "And the survivors?" Tarva asked.  She wasn't questioning
her Captain's judgment, just needed to know what to prepare for.
    "I will not risk anymore personnel or equipment for possible
survivors."  Anthony replied  "And we definitely can not risk
the Vigilante any further at this point."  he hesitated for a
few seconds to wipe sweat from his forehead.  "We have another
destination to reach beyond this outpost.  We must complete our
mission."
    "Sir," O'Malley reported "approaching drop point."
    S'Erlet was the next to speak up "Captain, I'm reading extra
structural reinforcements at original drop site.  They also
appear to have extended the beam out shield to that area."
    "What's the closest beam in site available?" Commander Tarva
asked.
    S'Erlet put a diagram of the area on part of the screen.  He
then highlighted the section covered by the Borg's force field.
Pointing to an area outside the force field S'Erlet said "We
could beam in the torpedoes here, along with direct firing we
should be able to punch a new hole in the deck."
    "Will there be enough room for the drop ship to maneuver in
that area?" Captain Anthony asked.
    "Yes, Sir." S'Erlet replied.  "From our surveys there should
be enough room for the drop ship to safely navigate to the
access tunnel which the Borg don't appear to have repaired."
    "Very good," the Captain said with a nod. "notify Commander
Kartang of the change."
    S'Erlet pressed a button on his console sending the changes
to the drop ship.

    Kartang's launch count-down had already commenced when he
heard a beep from his navigation computer.  New directions were
being fed for the drop.. He was able to glance at the new plans
just as he was pressed into his seat from the acceleration of
the launch.
    The drop ship cleared the Vigilante and immediately nosed
down toward the deck of the hold.  A small area directly in
front of DS One erupted into flame blowing debris at it.  The
cloaked shields shimmered from the destruction around them as DS
One passed into the outpost.

--------------

    Once the blast from the photon grenades settled, the drop
team crawled to their feet and surveyed the damage.
    "Lieutenant!" one of the techs called when he saw Whitecloud
sprawled on the deck ahead of them.  He ran up to her and shook
her lightly yelling "Lieutenant Whitecloud, are you okay?"
    Anndrea slowly started to move then struggled to her side as
the tech helped her up.  "Did we get them all?"
    "Affirmative." replied the Klingon.  "All Borg appear to
have been destroyed."
    "Very good, are there any bodies still intact?"  Whitecloud
was leaning on the tech and heading toward the still form of
Lieutenant Utlin.
    "Yes, Sir." The Klingon grunted back.
    "Very good, bring it with us, it may still prove useful."
Whitecloud reached Utlin just after one of the other techs
reached him and had begun a medical scan.
    "How's he doing?" Anndrea asked gently lowering herself to
the deck next to Utlin.
    "He's alive." the Tech replied as if it were the only
conclusion he could reach.
    "Can we move him?" Anndrea asked softly relying on the Tech
to keep her from falling over.
    "We're going to have to."  The man said simply.
    Anndrea nodded slightly and said "Lets go then."
    Whitecloud had just gotten to her feet and had two of the
team carrying Utlin when the Klingon came back with a Borg body.
"What now?" he huffed as he approached the shrinking clan.
    "Now." Anndrea said "we get our butts to extraction point
alpha and hope the Vig can get in here."

    Approaching the far corner of the barracks, the team could
hear a distant rumbling noise.  "What was that?" one of the
guards asked.
    The team was in the hallway just off the main corridor
closest to the entrance to the barracks.  The rumbling came
again a few minutes later, only this time it seemed to be right
next to them.  "There it goes again."  The guard said.
    Whitecloud looked up from her support and slowly turned
toward the corridor.  "Its the Vigilante," she said hoarsely
"they'll try to punch through the door, it's the weakest point."
    "What'll they use?" someone asked.
    Then one of the techs had a revelation "I don't know," she
said "but I don't want to be standing here when we find out."
    With that, the team looked at each other for a second then
grabbed their wounded started running down the hallway away from
the main corridor.  The walls and ceiling suddenly shook
violently and a blinding white flash blew down the main corridor
carrying the door, adjacent walls, ceiling and part of the floor
with it.

--------------

    The escape pod thundered open from explosive bolts allowing
a black suited figure to roll clear of the contraption.  She
crawled to a near by wall and sat against it trying to run
diagnostics on her pressure suit.  Most EVE systems were down,
greatly limiting her vision.  The suit's communication systems
were also off line.  After running all of the diagnostics,
Valerta opened her pressure suit to the environment, no need to
waste life support.
    Valerta stood up with a phaser in hand, she leaned against a
wall still dizzy from the fall.  A large path of destroyed
dividers stretched out in front of her, flattened by the crash.
    Then hopefully Valerta said "Home, this is Lieutenant
Valerta, over."
    Harsh static was the only reply "Now what?" Valerta said
aloud but still there was no reply.
    "First order of business." She started thinking to herself.
"Figure out where I am.  Then how am I going to get out of here?
Okay, one thing at a time, are there any landmarks I recognize
from the reports?"
    Valerta looked around, trying to see beyond the debris of
the dividers.  She could see nothing obvious so she started
climbing through the trail of destruction she'd made in her
landing.  If she could find the elevator, she may be able to get
beyond the beam out shielding.  Then all she would have to do
would be to figure out a way to signal the Vigilante.
    All corridors seemed to connect to a center passage which
lead Valerta to the elevator.  She was soon on the next level up
and dwarfed by the massive girders in storage there.
    Things had changed from the reports she had seen.  The
girders and beams were no longer neatly stacked but tipped over
or at least listing.  This was the main level she had dropped by
on her way to the barracks, the stacks must have blown over from
the decompression in the tunnel.
    Valerta continued to try to raise the Vigilante but to no
avail, her systems were either too damaged or the Borg had
raised more interference shields.  She was about to take off her
flight suit in the hopes that she would become visible to scans
when something stopped her, a sixth sense told her she was
forgetting something.
    The middle of the room was suddenly filled with explosions
but the distance and stacks of beams protected the pilot.  The
ceiling high above Valerta's head was engulfed by flame.
Instead of debris crashing down into the room, a strong wind
started blowing towards the destruction.  Valerta barely had
time to grab the edge of a beam as she was picked up by the
sudden fury.  The stack of beams she clung to shifted some but
wasn't about to be lifted or moved.
    There was a new noise, a roaring sound was quickly growing
from above.  Out of the flame and debris from the explosions.
Valerta could see the egg shaped shields of a drop ship shimmer
and disappear.  Lieutenant Commander Kartang in DS One was on
his way to finish what she had started.

    Kartang watched the maze of girders approach.  The auto
navigation systems immediately oriented the ship toward the
entrance to the tunnel.  Kartang accelerated toward the opening,
skimming across the stacks of girders with the shields sparking
as he glanced off them.
    DS One cleared the girders then nose dived to fit the
entrance of the tunnel.  The Borg had not repaired the tunnel as
it was irrelevant so the drop ship had a straight drop to the
Barracks.
    Kartang's scanners immediately told him that there was a
large hole where the door to the barracks used to be.  There
also appeared to be signs of life but there was a lot of
interference.
    "Team Three," he said hopefully "this is DS One do you
read?"
    There was a brief pause as the drop ship rushed toward the
Barracks.  "DS One, this is ....three...dr" came the broken up
reply from Lieutenant Whitecloud. "Six survive."
    "Prepare for extraction." Kartang said as he swung the ship
around to drop the back into the hole in the barracks.
    "Acknowledged." came Whitecloud's simple reply.

    As soon as they punched the second hole in the deck, the
area the Vigilante was in came under heavy fire from the probing
energy beams.  For all of its advance technology, the Vigilante
did not have the ability to manuver quickly in a tight spot.
For all of its tremendous size, in galactic terms, the outpost
was still a tight spot, a very tight spot.
    The Vigilante shuddered as another energy beam glanced off
its side shields.  The near hit was immediately followed by a
series of much stronger beams in the same area.  Ensign O'Malley
was barely able to get the ship out of the epicenter of the
strikes but the Vigilante still shook under more direct hits.
    "Damage report" Anthony yelled as his ship took the first
hits of its career.
    Commander Norton immediate responded "Sir, the shields are
holding at ninety five percent, no damage reported so far."
    "Do the Borg appear to be trying to adapt to our shield
frequencies?"  Anthony asked leaning hard in response to a hard
evasion turn.
    "Yes, Sir," Norton said "they are using new frequencies in
an apparent attempt to predict our random shield frequency
shifts."
    The evasive maneuvers O'Malley was using were basically
random but designed to keep the Vigilante in the general area
for drop ship retrieval.  The Borg, however, soon figured this
out and a wall of energy appeared ahead of them and started
sweeping in their direction.
    "Captain," S'Erlet said from OPS "the curtain of energy the
Borg have put up consists of thousands of energy beams all
rotating frequencies.  When it contacts us, the odds are ninety
five point two to one that more then one beam will penetrate our
shields."
    Anthony's response to this new development was immediate
"Helm, set course out of this place, warp five."
    O'Malley turned and looked at the Captain "But Sir.."
    "But nothing!" Anthony said loudly "Engage!"

    DS One landed heavily in the ruins caused by the destruction
of DS Twelve.  Before the ship had fully rebounded on its
shocks, the troop door in back dropped open.  The remains of the
drop team three, with their Borg souvenir, scrambled aboard
before the steam from the troop door's release valves had
cleared.
    As soon as all of the team was on the door or further, they
were yelling "Go, go, get us out of here."
    The troop door had just snapped shot and Kartang was
applying power to the thrusters when the outpost shook
violently.  Kartang looked up in time to see the upper deck blow
away.

    The hole DS One had come through was sealed soon after the
drop ship had found its way out of the store room.  Valerta
immediately began formulating plans to attract attention.  She
would use a high power break down sequence in one of her phasers
to attract the attention of the Vigilante's scanners.  She was
running toward the center of the room setting the self destruct
when the Vigilante jumped to warp to escape the outpost.

    The Vigilante's four powerful warp nacelles instantly
propelled the ship out the hold.  At the same time, the deck of
the outpost was caught in the warp field.  A path from the
Vigilante's position all the way out immediately lost structural
integrity and blew apart.

    DS One was blown toward the rupture with along with
everything else that wasn't securely bolted down.  Kartang
struggled to maintain control over the rapid ascent and stay
clear of the other debris.  He figured he was doing an adequate
job since all systems were still on line.

    Valerta, never knew what happened.  Everything in her area
was instantly blown out of the Outpost.  Hurtling helplessly
into the immense hold of the Outpost, Valerta totally forgot she
was still holding the phaser she had set to self destruct.  She
was sure she could see DS One heading right for her just before
everything went white.

    Kartang averted his eyes slightly from the explosion.  He
thought that he had seen a drop ship pilot's pressure suit, but
it was gone now.  He quickly returned his attention to his job
and accelerated through the remains, aiming toward what looked
like the exit.

    The Vigilante skipped through space stretching its warp
muscle for the first time in quite a awhile.  Ensign O'Malley
had set a wild randomized course away from the outpost then
back.
    "When we get back to the outpost, take up a parking position
below the thing and begin scans for the drop ship."  Anthony sad
as soon as they had determined that they had not been followed.
    "And Ensign." the Captain said almost as an after thought
"I'd like to see you in the Command Room as soon as we've taken
up station."
    "Aye, Sir." O'Malley responded stiffly.

    Janice stood stiffly just inside the command room.  The door
snapped shut just behind her, brushing her baggy uniform.
    Captain Anthony sat leaning back in one of the chairs with
hands gripping the arms of the chair.  He was turned looking at
his reflection in one of the windows.  "Ensign." he said coldly.
    "Yes, Sir."
    Anthony turned slowly and looked at the skinny red head.  "I
recognize that it is part of the bridge crew's duty to remind me
of any facts I may have missed."  He leaned forward slightly
glaring at her. "However," he continued "don't ever question an
order in an emergency.  Is that understood?"
    "Yes, Sir." O'Malley repeated in almost a whisper.
    Anthony turned back toward the window and continued staring
at the closed blast shields.  "Dismissed."
    Captain Anthony sat looking at the blank window.  His
imagination filled the darkness with flames and destruction.
Amongst the confusion he could see the woman he loved trying to
maintain control of a dying ship.  She stood at the weapons
station directing fire while the Borg cube cut The Nielson to
pieces.....
    Anthony felt a shaking sensation and the visions in his head
disappeared.  As his heads cleared the face of his first office
formed in front of him.
    "Sir," She said.  "Sir, are you all right?"
    "Yes, Commander." Anthony said very alert now "I'm fine."
        "We've picked up the transponder from DS One." Tarva
said "At least we know it has not been destroyed."
    "Have they responded to the hail yet?"  Anthony hoped Tarva
wouldn't notice him trying to worked the cramps out of his hand
from clenching the arms of his chair.
    "No, Sir.  We are only trying standard drop ship frequencies
so as not to jeopardize the Vigilante.  We are also broadcasting
our docking transponder in hopes that they will be able to
follow it in if they have lost communications."  Tarva watched
her captain massage his twisted hands but didn't plan to
question his state of health.
    "Very good, maintain present position until drop ship
coordinates can be confirmed or we make contact with DS One."
Anthony continued to look the Kalonian in squarely in her black
eyes. "Is that clear?"
    "Aye, Sir." Tarva said formally.  She then snapped a perfect
right-face and marched out of the room.

-----------

    After clearing the immediate debris from the decompression,
Kartang hung close to the out side of the Outpost.  He had no
idea what to do from here.  If the Vigilante had left them, it
would have been for the good of the ship and the mission.  What
would they do then.  A drop ship didn't have warp drives and the
nearest star system was years away at sub warp speeds.  Besides,
it was probably another system raped clean by the Borg.
    Kartang explored the endless side of the structure then
finally chose a spot to make plans from.  They needed to
consider their options then make a plan of action.  They didn't
have many choices, but wanted to make the best choice for the
overall mission parameters.
    They really didn't have time to come to any real decision.
After a day, the ship's computer indicated that "the Vigilante
was ready for them to complete final docking maneuvers".  The
computer's simple message came from intercepting the Vigilante's
docking beacon.  It was all Kartang needed to find the Vigilante
and finally complete the rescue mission.
    It wasn't long before Kartang completed his final approach
to the Vigilante.  Medical and technical teams were all on hand
to meet them.  Utlin was transported directly top sick bay, he
had fallen into a deep comma and some on the drop ship had
thought he was dead.
    Whitecloud was conscious but showing signs of extreme
illness from her injuries.  She was taken with the rest of the
drop team to sick bay.

    Tarva entered the command room and stood at attention at the
head of the conference table.  Captain Anthony sat in his usual
place at the other end studying reports from the technical
surveys.  "What's the prognosis".  Anthony said after finishing
the current screen of text.
    "Sir," Tarva said formally "of the six surviving members of
Drop Team Three, only Lieutenant Utlin has any permanent
injuries."
    "Will he be able to resume any kind of active duties?"
    "Physically, yes, mentally, we can not tell.  Its only been
five hours since the rescue and he is still in a deep coma."
Tarva sounded deeply concerned.
    "Do we have any facilities for fitting him with
prosthetics?"  Anthony seemed distracted by the information
still on his screen.
    "No Sir," Tarva replied "the Vigilante does not have the
facilities to properly fabricate the bionics or tissue cloning
most commonly used in cases like these."
    "Are there any other options?" Anthony continued to page
through the notes on his terminal.
    Tarva hesitated for a second.
    Anthony sensed this and looked up "What is it?"
    "Sir," Tarva said apprehensively "some of the Med-Techs have
suggested using some of the mechanisms from the collected Borg
relics to build a replacement for Lieutenant Utlin's arm."
    Anthony sat back tapping a light pen on the table.  "He
might have objections to such an idea, for both personal and
religious reasons."
    "We are aware of that Sir, that is why I hesitated putting
the option forward."
    Captain Anthony sat back in his chair and stared at the
ceiling.  Then finally said "tell the Med-Techs to begin
researching and preparing the project.  But also tell them not
to do any work on the Lieutenant until he can competently give
his permission.  They should, however, be totally prepared if he
is willing."
    Tarva smiled slightly "Yes, Sir."  Then was about to leave
when Anthony interrupted her in mid turn.
    "Oh, and by the way." he said casually.
    "Yes, Sir" Tarva said regaining her position.
    "Have helm lay in the new course Sigma-Nu, and have the
Vigilante and crew ready for warp in thirty minutes."  Anthony
said.
    Tarva considered for a second then smiled and said "Aye,
Sir, and may I ask where we're heading?"
    Anthony turned and pointed to a diagram of the Outpost with
its three main communications relays mapped out.  "All of our
surveys of these arrays indicate that the information being
broadcast is not symmetrical.  The middle array appears to
rebroadcast the information patterns provided by the other two
arrays.  The other two arrays only appear to repeat what comes
in on the middle array.  This leaves us to believe that the
middle array is connected to a controling force."
    Anthony smiled at his executive officer "We're going to
follow the middle signal to its source."


I have no doubt at all the Devil Grins,
As seas of ink I splatter.
Ye gods, forgive my "literary" sins-
The other kind don't matter.
-- Robert W. Service
                   T H E   V I G I L A N T E

                               VI

                         "Full Circle"



     Just think! some night the stars will gleam
       Upon a cold, grey stone,
     And trace a name with silver beam,
       And lo! twill be your own.

     That night is speeding on to greet
       Your epitathic rhyme.
     Your life is but a little beat
       Within the heart of time.

     A little gain, a little pain,
       A laugh, lest you may moan;
     A little blame, a little fame,
       A star-gleam on a stone.
                    "Just Think"
                    Robert W. Service



    A light mist filled the air.  A bright green meadow stretched
into the distance.  The carpet of flowing grass and wild flowers
was broken by a thin brown path winding through the rolling
hills.
    The grass shuddered and swirled away as a lone figure
strolled along the path.  He walked slowly with his hands out to
either side feeling the light touch of the tall seeding grass.
His long red cape fluttered out behind him, sweeping the grass
underneath it.  A thin sword hung from the man's belt, nearly
touching the ground behind him.  The man's black,
leather-accented uniform was tailored to fit exactly.  Every
crease and seam was meticulously pressed and lined.
    The man cut the perfect figure of a soldier.  His body was
thin but muscular.  His short black hair stood straight up.  The
man's features were sharp and angular, with several old scars
high-lighting his cheeks and neck.  His skin was a healthy brown
from the constant presence of the small planet's two suns.
    The soldier stopped at the top of a small rise to scan the
fields around him.  His bright blue eyes drank in the beauty of
the rolling hills.  Sir Utlin Robe'than felt the peace of
Tregamalis, it had been a lifetime since he'd been here, but it
was still home.
    He could sense movement behind him.  Coming up the path was
an old man in simple peasant's robes.  The man looked old and
frail.  He was mostly bald but had long waist length hair from
ear to ear.  He carried a twisted black branch as a walking
stick, but didn't seem to need it.  The old man quickly made up
the distance between himself and Sir Utlin.
    With shriveled eyes and skin pulled tightly about his bones,
the old man looked like a skeleton.  He approached Sir Utlin and
looked up at the proud and bloodied warrior.  The man's feeble
looking hands tightly clutched his walking stick.  He continued
down the path and motioned for Utlin to follow him.
    When Utlin caught up, the man asked "What do you seek, My
Son?"
    "I seek peace."  Utlin answered softly.
    "Why do you seek peace, My Son?" the man asked "Is it not a
soldier's duty to seek out conflict?"
    "It is a soldier's duty to maintain peace and protect it and
the people from conflict."  Utlin answered dutifully, wondering
who this old man was.
    "Then why are you here, My Son."  The man returned.
    "The conflict is over, there are no more of my people to
protect, it is time for me to enjoy the peace."
    "Who are your people?" the old man sounded confused.
    Utlin stiffened and said proudly "My people are the Children
of Lin'Hrlar."  He reflected on his recent past.  "I am the last
Warrior of Lin'Hrlar, and one of the last of his people.  I had
dedicated my life to the protection of my people, now they are
gone.  My job is over, it is time to rest."
    The man now looked even more confused "You're here after
battling for YOUR people?"
    "Yes."
    "But the people you were with, YOUR people, are still looking
for you."  the man's bright red eyes burned through Utlin.
    "They aren't Children of Lin'Hrlar."  Utlin insisted.
    "They aren't?!" The old man asked "Who then are they?"
    "They're aliens who had never heard of Lin'Hrlar."  Utlin
replied now confused by the old man's questions but trying to
stand his ground.
    "Then why were you with them?  Why did you suffer for them?
Why did you die for them?"
    Utlin couldn't answer the questions.  "I don't know." he said
and bowed his head turning away from the man.
    "Look at me, My Son." the old man said softly.
    Utlin turned back to the shriveled old man.
    "You've done well.  You've fought well for Lin'Hrlar and his
children.  But Lin'Hrlar has reclaimed most of his children."
    "I know," Utlin said "now it is my turn."
    "No." the old man said softly "Lin'Hrlar is not ready for
you."
    "What?"
    "Lin'Hrlar still has many plans for you.  It is in you that
the seed of his people still grows.  It is in you that the flame
of his soldiers still burns."
    "I do not understand." Utlin returned.
    "You will, My Son, you will."
    The pair approached another gentle hill.  Sitting on top of
it was a lone woman dressed in immaculate purple and gold robes.
Her long dark hair flowed down her back spreading out on the
robes circled about her.
    From the back, she looked familiar but Utlin couldn't place
her.  "Who is she?"
    "She is your," the old man hesitated "no, OUR destiny."
    Utlin reached out with his right hand to turn the woman
toward him.  As he touched the softness of her robes, pain shot
through his arm.  His hand and arm seemed aflame as they faded
from his sight, his world went black.

-----------

    A soft beeping sound grew in the distance as Utlin regained
consciousness.  His eyes opened looking for the sound that had
awaken him.  All he could see was the gray of a sheet covering
his face.  He was about to call out when the sheet was swiftly
pulled away.
    Utlin became aware of a confusion of voices around him.  One
of the voices came from the surgeon standing over him.
"Lieutenant, can you hear me?"  The man said.
    Utlin sat up and looked around "What's for dinner?"

--------------

    Commander Tarva stood in the command room across from Captain
Anthony.  Scattered on the table was an assortment of artifacts
taken from the Outpost.  Anthony was carefully reading one of the
analysis reports on the screen in front of him.
    Tarva cleared her throat after waiting for several minutes.
    "Yes, Commander?" Anthony said finally acknowledging his
first officer.
    "Sir, At exactly 1852 hours," Tarva began "Lieutenant Utlin
was officially declared dead.  All body and brain functions had
failed and he could not be revived."
    Captain Anthony sat back heavily "I'm sorry to hear that." he
said sincerely.
    "That's not all." Tarva said "At 1900 hours, Lieutenant Utlin
sat up and asked for something to eat."
    "Let me get this straight." Anthony said after staring at
Tarva for a few seconds "Lieutenant Utlin is in a coma for nearly
four weeks, dies then eight minutes later wakes up asking for
food."
    "Correct." Tarva said with a rare but genuine smile.
    "Amazing." Anthony remarked shaking his head and turning back
to his monitor "Thank you commander."
    Tarva immediately did a sharp about-face and exited to the
bridge.

-----------

    "Have you told him about 'IT' yet?" Janice asked her
ex-roommate.
    "He's only been awake for a couple of hours."  Anndrea said
to her friend.  Anndrea hadn't been extremely comfortable taking
a room by herself, since the attrition that allowed it came from
the losses in her own drop team.
    Janice stood up on the unused bunk and started pacing back
and forth.  The hard soles on her boots seemed to cut deeply into
the material but didn't do any damage.  "Do you think he's going
to object or something?"
    Anndrea watched Janice pace, "I don't think he'll object.  He
knows that in order to learn all we can, we take chances and
sometimes make questionable decisions."
    Janice stepped off the bunk, landing with a solid thunk, and
walked over to the console Whitecloud was working at.  "I can't
believe that after all this time the Lieutenant would just wake
up like that after being out of it for so long."
    "There's a lot of things we don't know about his people,"
Anndrea said "and we probably never will."

--------------

    Lieutenant Utlin sat in the infirmary bunk looking at the
medics looking at him.  They seemed so confused by the fact that
he had passed over then returned.  It was nothing, Lin'Hrlar was
not ready for him yet, so he was sent back.  It did happen
occasionally, perhaps not as often for them, but it did happen.
    Utlin stretched his left arm and examined it.  His hand
looked weak and pale.  He had been healing for a long time, he
was ready to start getting back into shape.  With this thought,
he looked at what was left of his right arm.  There was a bit of
arm left just below the elbow, but not enough to be of much use.
He guessed he'd have to adapt; more equipment could be configured
to attach to his arm, the controls in his fighter could be
reconfigured to work with the Federation's advanced computers, he
could think of many different changes he'd have to make to
accommodate the missing hand.
    The pointed eared female pushed her way through her staff and
stood next to Utlin.  "I apologize for the crowd, but they have
been working on you every day since the mission, and they are
concerned."
    "I understand." Utlin said in his dry unused voice.
    "Now we have some things to discuss." the female said "While
you were 'healing' we've been designing a possible replacement
for your missing hand."
    "What sort of replacement?" Utlin asked, he'd never heard of
replacing a missing limb, you just learned to adapt or you would
be slain.
    "It is called Bio-mechanics," The female began "we have
designed a mechanical arm to replace the one you have lost."
    "Sounds good, how does it work and when can I have it?"
    "Well there are a couple of problems." The doctor said.
    "Such as?"
    "First, we did not have the proper materials to create an
exact duplicate arm, so the one we did design looks mechanical."
    "Who's going to notice where we're going?"
    "There is something else you should know." the pointed ear
doctor hesitated for a second "Many of the parts we used came
from the Borg specimens we retrieved from the Barracks."
    Utlin was quiet for a second then smiled slightly "How
appropriate that we should start assimilating them."

-----------

    Utlin had been awake for two days and already had his new arm
in place.  He had seen very little of the rest of the crew except
for Lieutenant Whitecloud who made a point of visiting him
several times a day.  There seemed to be something she wanted to
tell him but couldn't.  Utlin figured that she would when she was
ready.
    Utlin was walking slowly around his room, re-learning to use
his legs when Anndrea signaled and came in.  "How are you doing?"
she asked as she approached.
    Smileing, Utlin replied "Well the legs still seem to work."
he then held up the black metal mechanical hand.  "This thing
even appears to be functional."
    "How about a walk?"  Anndrea suggested
    "Sure, what's going on?" Utlin asked as Whitecloud headed for
the door.

    Anndrea led her friend to an area of the ship that he had
never had business in before.  After passing through several
security check points, they arrived at a holding area with a lot
of activity.
    "What's going on here?" Lieutenant Utlin asked as they
entered the room.
    Just as he spoke, The Lieutenant turned a corner and came
face to face with a Battle Borg.  The Borg was standing in a cell
in the brig, it was held back by a strong force field.
    "By the Cape of Lin'Hrlar." Utlin exclaimed "Where did this
thing come from?"
    "We brought him out with us." Anndrea said "We thought he was
killed by photon grenades, but the techs in the infirmary were
able to bring him back."
    The Borg stood in the middle of his cell, absolutely still.
He ignored all of the activity beyond the force field.
    "Does he move?" Utlin asked.
    "Just to connect up to the power and recharge his batteries,
once every five hours or so." One of the techs said.
    "Then he goes right back to were you see him now." someone
else added.
    "That's it?" Utlin sounded a bit surprised. "There's been no
communication, nothing?"
    "Not a word." Whitecloud confirmed.
    "Perhaps he's damaged from the blast."
    "We don't think so." Anndrea replied "All of his biological
and mechanical functions check out."
    "This kind may be incapable of individual thought." One of
the tech's put in.
    "That's not true." Utlin said holding up his mechanical hand
"The one that did this to me spoke in the first person."
    One of the techs interrupted "Sirs, look at him."
    The Borg was looking directly at Utlin listening to what he
was saying.  "We've never been able to get his attention before,
no matter what we did."
    Utlin faced the Borg and looked him in the eyes "Identify."
He said to the creature.
    The Borg tilted its head to one side for a moment then said
in a mechanical voice "I am unit Three Two Five Eight of 30 Kil."
The thing then added "You have been identified as Sir Utlin At
Your Service Sir, an intruder."
    "That is how one of your units identified me, but I am not an
intruder."
    The Borg looked at Utlin questioningly "Was this
identification in error?"
    "Yes."
    "What is your proper identification."
    "I am Lieutenant Utlin Robe'than."
    The Borg considered this new information for an instant then
returned to his original blank stare.
    Everybody in the room knew they weren't going to get any more
conversation out of it, but Utlin persisted.  "What is your
function?"
    "My function is to follow the collective into battle."  The
thing said.  It then walked over and stood directly in front of
Utlin.
    There was some commotion in the outer chambers and they heard
someone call out "Captain on deck."
    Three Two Five Eight ignored the people in the room coming to
attention and continued to address Lieutenant Utlin.  "Lieutenant
Utlin Robe'than, what is your function?"
    Utlin hesitated, he knew that Captain Anthony was monitoring
this conversation from the outer office and Utlin didn't want to
say the wrong thing to the enemy.  "My function is to communicate
with and learn about other cultures."
    "Other Cultures are irrelevant."  Three Two Five Eight
stated.  "In time, all is to be ruled by the Borg."
    "Lieutenant," came Captain Anthony's voice.  The Captain
stood beside Utlin. "What do you have for me?"
    "Captain, Sir, this is Three Two Five Eight of 30 Kil." Utlin
stated trying to make a formal introduction.  Utlin then turned
to address the Borg but it spoke first.
    "You are Captain Robert Anthony, Captain of this Starship."
It stated.
    Anthony was not surprised that the Borg knew his name.  "So
you were aware when we were originally trying to communicate with
you?"
    "That is correct."
    "Why didn't you respond then."
    "My systems could not find a point of reference for response.
Lieutenant Utlin Robe'than helped me key into the data down
loaded from the collective before I was damaged."
    "Are you willing to talk with us about the collective?" the
Captain asked.
    "I have been deactivated for a long time.  The Collective has
expanded beyond its original intent.  I am not a member of the
current collective."  The Borg said dryly.
    "Is that why you were fighting after we awakened you?" Utlin
asked.
    "We are not members of the current collective.  They intended
to assimilate us.  We are not assimilated, and we do not
assimilate, we conquer."

--------------

    A Command Staff meeting was called to discuss the information
provided by Three Two Five Eight.  Captain Anthony, Commander
Tarva and the other members of top command met in the Command
Room.
    "He's lying!" Golta growled, "He wants to confuse us with
contradictory information."
    "The Borg don't lie." Commander Norton returned "They don't
have to."
    Captain Anthony agreed "We are irrelevant to them.  To lie to
someone acknowledges relevance.  We must consider that this Borg
is telling us what it perceives to be the truth.  We must combine
that with what we know about the Borg and try to draw some
conclusions."
    Anthony scanned the assortment of officers in the room then
continued.  "I want everybody to continue to analyze what we've
already learned.  We need to know all we can for our next
confrontation.  Focus on your own specialties, how can you
interpolate what we have so far.  I need as many points of view
as possible, the smallest detail could determine if we survive
this mission."
    Captain Anthony finished speaking to the sound of the
intercom piping on, the yellow alert warning sounded and Ensign
O'Malley's voice came over the speaker "Captain to the Bridge."

---------------

    The whole command crew exited the Command Room directly onto
the bridge.  Captain Anthony was the first out and headed to his
center seat.  "Report!" he sad to no one specific.
    Ensign O'Malley turned her chair slightly so she could look
back at the Captain but still cover her console.  "Sir, we have
detected twelve vessels on long range scanners, all moving at
high warp.  Three are heading in our general direction, the
others are to our extreme sensor range heading in the direction
we are."
    The Captain turned to S'Erlet at the science station.  "Do
you have an analysis of those objects yet?"
    "Sir," The young Vulcan began "The ships are currently too
far away to do a detailed analysis, but their size and other
characteristics indicate possible Borg influence."
    "How long till you know for certain?"  Anthony asked turning
back toward the sensor display on the screen.
    "At current velocity," S'Erlet stated "I will be able to tell
conclusively in four minutes 15 point 5 seconds."
    "Okay," Anthony said "go to red alert.  I want everybody at
battle stations."
    All over the ship, the blast shields were lowered and the
lights were dimmed.  The crew took their places in the rough duty
seats while security donned Class One mission gear and took
positions in strategic areas.
    S'Erlet soon confirmed that the ships they were monitoring
were indeed Borg vessels.  The ships coming towards them were not
responding to them but were on a trajectory by them.  S'Erlet's
analysis also revealed that all paths came from or headed to a
common point.
    "We should be able to make preliminary scans of the origin
point in one hour twenty one minutes." S'Erlet informed the
bridge.

    Things were suddenly moving quickly.  The crew of the
Vigilante had gone from seeing the occasional sensor blip to a
whole screen of them.
    "How many do you read now?" Captain Anthony spoke directly to
his navigator.
    "There are now one hundred and seventy five vessels on the
long range scanners."  Ensign O'Malley tried her best to make her
report with little emotion.
    "Slow to warp 5." said Captain Anthony then turned to his
first officer.  "We're going in slow so we have time to analyze
and prepare for what's ahead."

    In the weeks that followed the atmosphere on the Vigilante
was extremely tense.  Everybody waited for the green shimmer of a
Borg transporter bringing a boarding party.  The bridge crew was
ever on the alert for one of the passing cubes to divert it's
coarse to inspect this tiny intruder.  None of it happened.  The
Vigilante sailed smoothly ever closer to what appeared to be the
center of Borg activity.
    Life on the ship was as normal as it could get.  The drop
teams and pilots trained endlessly.  There was no "good enough"
or "we're ready".  Every member of the Vigilante's crew was a
professional warrior though some wouldn't admit it.

    Ensign O'Malley sat in the drop ship simulator after
completing one the hardest testing batteries.  She pulled herself
up out of the top hatch and removed her helmet.  Her short red
hair was plastered to her forehead with sweat.
    Lieutenant Commander Kartang stood outside the simulator with
his arms folded across his chest.  The forced frown he wore told
O'Malley that she probably didn't do as well as he had expected.
"If that had been a real mission you, your co-pilot, and a whole
drop team would have been lost!" he growled at her.
    "I am not a Drop Ship Pilot" O'Malley stated simply "I'm a
Starship navigator."
    "You, Ensign, are one of the few backup pilots we have.  If
anything goes wrong, your skills may be needed to save many
lives." Kartang shot back at her with an even more menacing
growl.
    "Sir" O'Malley returned "I hope your highly trained
professional drop Ship Pilots don't need the services of this
'under-fed', female, human navigator to get their hides out of
the fire."
    Kartang stood blankly in front of O'Malley for a moment then
growled "Dismissed."  He watched the human turn crisply and walk
away from him.  The tests at this level of training were designed
to be nearly unsurvivable.  The intent was not only to push the
pilot's skills to the maximum but also to see how that pilot
dealt with defeat.
    On the mission O'Malley had just nearly completed, Kartang
failed one time out of five.  He would be proud if she were a
member of his team.  But he was glad she wasn't, skinny human
females who showed no fear of him and sometimes little respect
made him nervous.

    Ensign O'Malley entered Lieutenant Whitecloud's quarters
after signaling.  The Lieutenant sat cross legged on the floor in
front of a large painting.  She wore her baggy black workout
robes and a red band was tied around her head to keep the hair
from her face.
    Whitecloud looked over the top of her painting at her former
roommate.  "You've been running the flight simulator again, I
see."
    O'Malley let out a growl of frustration and threw her helmet
into one of the rough duty chairs.  "Kartang treats me like one
of his mercenaries when I'm down there.  I agreed to do it
because I thought it would help me blow off some steam, instead
that Klingon is making me even crazier."  Janice paced back and
forth through the room as she raved.
    Janice stopped behind Whitecloud and looked at her painting.
It was a picture of Sir Utlin's ship _Star Controller_.  The
vessel was in the middle of launching a swarm of fighters.
Looking at the meticulous detail helped O'Malley calm down, she
dropped into a nearby chair let out an audible sigh.
    Anndrea turned around and looked at her guest "Janice, we'll
be approaching the Borg system in two days.  You've got to relax
and focus on what's ahead of us.  The fate of the Vigilante may
rest on your being able to execute your duties flawlessly.
Forget about Kartang, his job is to push you beyond your limits."
Whitecloud then smiled "He appears to be doing quite well at it
too."

    Captain Anthony sat alone in the Command Room studying the
reports of the approaching system.  Anthony hadn't ventured past
the Bridge in more than two days and had spent the majority of
that time in the command room.  He could feel his body slowly
giving up to exhaustion but he refused to acknowledge it.  The
terminal he was reading from began to blur and he thought he
could smell smoke.
    The room was suddenly filled with noise and confusion.
Looking up from the monitor he tried to figure out what was going
on.  He was no longer in the Command Room but a place much more
familiar, it was a place he knew he'd never see again.
    Red alert and other klaxons bellowed and crew scrambled to
cover emergency stations.  This was the bridge of the U.S.S.
Nielsen and standing at one of the fire control stations was a
woman who looked very familiar to him.  The ship rocked from a
strike, everything shook and the crew struggled to maintain their
balance but Captain Anthony couldn't feel it.
    The woman barked orders to those about her while maintaining
control of the targeting computers.  Anthony watched the crew
struggle to maintain their balance while the ship took sharp
evasive maneuvers in response to the woman's orders.  The
inertial dampening fields must be damaged he thought else the
crew wouldn't be reacting so severely to the maneuvers.
    Suddenly, everything was still.  The woman turned and looked
at Captain Anthony.  She pushed her shoulder length light brown
hair out of her face and walked over to him.  "Robert, why are
you here?" she asked.
    "I don't know." he replied "I was in my command room on the
Vigilante and the next thing I knew I was here."
    "Come with me." she said and walked over to one of the
consoles.  After pushing a few buttons, the main screen changed
from a tactical display of the area to a distant shot from a
probe.
    There were starships everywhere.  Some were intact others
were hulks and shells.  In the middle of the destruction was a
single Borg cube.  The woman pointed at the screen "This, my
love, is my destination," she said passionately "not your's."
    "I should have been here, it was my place to be here by your
side."
    "Listen to me," she replied "you must honor my death with
your life.  I am a part of you I always have been, always shall
be.  Honor our life together by making the most out of yours."
    "I love you." he said forcefully.
    "I'll always love and be with you." she replied then the
Nielsen shook violently and exploded.
    Captain Anthony woke with a start as the Vigilante rocked
again.  He ran to the bridge to the sound of the red alert
klaxons.  The ship rocked under his feet as he arrived.  "What's
happening?" he demanded.
    Tarva stood looking over S'Erlet's shoulder watching his read
outs "Unknown, Sir," She replied immediately "but it does not
appear that we are under attack."
    "Helm, dead stop." Anthony commanded then took his seat as
the ship rocked again.  "Any casualties?"
    In this kind of situation with the captain in direct command
of the bridge, it was Commander Tarva's duty to monitor all ship
board functions and activity.  The captain basically operated
through her.  "Sir, medical reports no casualties."  Tarva smiled
at this.  She knew that all over the ship personnel probably
suffered minor cuts and bruises from the unexpected jolting but
this crew would never think of complaining about it.
    Ensign O'Malley reported that they were at dead stop.  The
crew then waited for the next jolt.  It didn't come.
    Captain Anthony reviewed reports coming in about the current
situation then asked "How far are we from the Borg system?"
    O'Malley replied "At previous warp, we are 32 hours from the
Borg system."
    The captain suddenly turned his attention to their
destination.  "Can we see it yet?"
    O'Malley checked some readouts then said "Yes, sir, the Borg
system should be visible."
    The Captain smiled slightly "Put it on the main screen."
    Janice pushed a couple of buttons and the main screen
switched from its tactical displays to a star field.  The field
then began to change and a single star stood out in the middle.
At first it looked like any other star, then as the magnification
brought it in closer, there was a noticeable blink.
    "Its pulsing." Tarva said.
    "According to the scans," O'Malley stated "the pulse is
caused by a large number of objects orbiting the star."
    "That's impossible." Tarva said "I've never heard of any star
system with that many planets."
    "Commander," O'Malley replied "I didn't say they were
planets."  she then put a tactical chart of the system on the
screen.
    The tactical charts were created using data from all scanners
and could be quite a bit more detailed than standard visuals.
The chart of the Borg system showed the star surrounded by a
cloud of planetoids and debris.
    While waiting for S'Erlet and other members of the science
teams to determine what was causing the buffeting in warp, much
of the crew focused their attentions on the Borg system.  The
most accepted theory was that the system was filled with a
millennia of debris from Borg conquests.  What ever the reason
for the state of their system, the Borg ships continued to come
and go at high warp.

    After several hours of study S'Erlet believed he knew the
reason for the shaking.  "The turbulence is caused by a
degradation in the fabric of space."  he reported to the bridge
crew.  "It has been caused by hundreds of years of high warp
travel over the same routes."
    "Are we going to experience it all the way into the system?"
the Captain asked.
    "If we continue at the lower warp speed, yes. However, if we
travel at warp nine or greater we should not feel the effects as
severely."  S'Erlet replied.
    "At warp nine," Captain Anthony said aloud to himself "we're
less then ten minutes away."  He then turned to his First
Officer. "Commander Tarva, sound general quarters, we're going
in."

    The outer sphere of objects clouding the Borg sun was a
network of outposts. The outposts the Vigilante scanned had the
same dimensions and surface map of the one they had visited.  The
traffic of Borg ships appeared to be concentrating on these
stations.
    Beyond the outposts, the system was a cloud of debris and
planets orbiting the Borg sun.  The first layer the Vigilante
scanned consisted mostly of refined metal and other materials
that did not occur naturally.
    The Vigilante took a close parking position next to one of
the outposts while they completed their initial scans of the
system.  It had been their experience with the first outpost that
the senors on these installations did not work well in close
proximity.
    All non-gaseous planets in the system were strip mined like
the planets the Vigilante has surveyed upon arrival in the
quadrant.  The mining of these planets, however, was not nearly
as efficient and they were also showing several thousand years
more weathering then the other planets.
    "Sir," Ensign O'Malley reported "I am reading one planet that
has not been mined."
    "Lets see it." the Captain said immediately diverting his
attention to the main screen.
    "The computer is extrapolating now." O'Malley said.  On the
screen, the picture of a dark gray-blue planet began to flicker
as the computer pieced a view of it together through the debris
of the system.
    For an M-class at the current magnification, the crew
expected to see the out line of land masses and weather patterns.
Instead, the planet appeared to be a single swirling mass of dark
gray clouds.  O'Malley adjusted the sensor frequencies filtering
the clouds, the computer extrapolated the new readings into a
fresh view of the planet.
    Instead of the naturally flowing forms of continental land
masses, the picture showed a grid work of construction.  There
were no shores or mountains, no sign of agriculture or unused
land, everything was covered.
    "My God." The Captain whispered "The whole planet is built
over."

-----------

    Lieutenant Utlin had sat with the drop teams in their meeting
room watching the Vigilante's progression through the Borg
system.  They had detected very limited travel activity within
the confines of the system.  It was hypothesized that the Borg
had over grown and abandoned their home planet for the network of
outposts.  There was, however, a very strong Borg link signal
coming from the over-grown planet.
    The progress was extremely slow.  The ship had to be guided
on a path so as not to disturb any of the debris.  If they bumped
anything or created a wake, it could give them away.
    Utlin and Whitecloud  wandered out of the meeting room and
into Cavern.  In the locker room, the A-Drop Teams were preparing
the mission armor.
    "Do you think the Captain will use any of us this time
around?" Lieutenant Utlin mused.
    "If he gets a chance I know he'll send some of us in."
Anndrea replied.
    "Don't you think we'll get close enough?"
    "We barely made it out of the Outpost" Whitecloud replied.
"The Borg know something is out here and they know how to detect
us.  All that's left is for them to know were to look."

    Everyone on the bridge held their breath as the Captain read
the initial reports on the system.  Now was the moment of
decision, he would either decide to head into the lions den right
away or they would sit and analyze the system for weeks as they
had done on there approach.  Nobody knew what the Captain would
do, but they were all getting tired of sitting around watching
the Borg fly back and fourth.  They had been tracking the Borg
flight patterns since leaving the Outpost it was time to do some
real exploring.
     Captain Anthony turned to Ensign O'Malley "Ensign, plot best
course and speed to the Borg planet so as to achieve zero wake in
the Borg debris field.  What is the estimated time to have that
ready?"
     Ensign O'Malley processed the course parameters then replied
"Computer estimates it will take thirty seven minutes to plot a
course with zero wake keeping impulse power over ten percent."
     "Very good." The Captain turned to Commander Tarva
"Commander , you have the bridge.  I'll be in the Command Room."
     "Yes, Sir." Tarva replied and watched the Captain stride
into the Command room.



     Upon arrival at the Borg system Lieutenant Utlin felt a
great pull to visit Lady Purlerna.  They were in now at the front
door of the creatures that had destroyed their world.  Lin'Hrlar
had brought them both here for a reason.  What was his plan?  Did
they have a mission here, or was their survival more basic?  Were
they meant to be the re-genesis of Lin'Hrlar's flock?  When these
thoughts cross his mind, Utlin couldn't resist the urge to visit
Purlerna.  Could he ever except the fate of excepting this female
as his Companion?
     The Lady sat in her outer chamber listening to some obscure
Federation music.  Utlin sat on a small bench across from young
lady.  She was a magnificent sight in her red and gold robes and
long flowing hair.  She had put on some weight and looked fit and
healthy.  She continued to scan what ever it was that held her
attention on the computer and fashionably ignored him for a few
minutes.
     Finally she pretend to finish or grow bored with what ever
she wasn't reading on the screen and turned to Utlin.  "I am
pleased you have come to visit, my Future Companion."  she said
softly.
     "We haven't had much of a chance to talk since my return."
Utlin said "I came to see how you have been."
     "I am quite well." Purlerna said "I am, however, becoming
quite bored with this cruise.  My attendants are very slow to
respond to my calls and always act as if they are doing me a
favor."  she sighed slightly resigned to her fate of having such
poor help.
     "What kind of instrumental are you listening to?" Utlin
asked trying to carry the conversation.
     "Something from a period call 'Terran Mid-eighteenth
Century' I've never heard of it before, but it is relaxing."
Purlerna stood and swirled her robes about as she turned toward
the replicator.  "Are you hungry? we can have something
delivered, at least the food service on the vessel is top notch.
     Utlin panicked, she had never been this nice to him before
and he started thinking about the 'future companion' comment she
had just made.  "No, I'm not hungry, thank you." he replied
quickly as he stood.  "I really must be going, I have duties
elsewhere."  He headed toward the door while she was still across
the room from him.
     Utlin  felt a surprisingly strong grip on his arm that spun
him away from the door.  It was Lady Purlerna, she must have run
across the room to catch him.  Her eyes were wide and very lucid.
For the first time in many weeks she looked like she had come out
of her fantasy world.  Her fear was very evident.  "We must leave
this place." she plead.
     "What?" Utlin wasn't sure if she knew what she was talking
about.
     "They know we're here." Purlerna said "They've been waiting
for us. Tell the Lords of this vessel, tell them we must leave
this place,...please" she started begging and dropped to her
knees, clutching Lieutenant Utlin around the legs.  "Please," she
sobbed, "we must leave here...we must."

----------------

     Not long after Lady Purlerna had to be sedated the Vigilante
started its slow trek into the Borg system.  The course the
computer mapped out would get them to the Borg 'Home World' in 5
days.
     The crew was more on edge now than when they had entered the
Borg outpost.  Nobody knew how the Borg would react to an alien
vessel entering their system.  Would they consider it irrelevant
as they seemed to consider everything else, or would it be enough
out the ordinary that it would warrant investigation.  Nobody
seemed to notice that the Vigilante traveled with its cloaking
activated, it was assumed by the speculators that the Borg could
defeat the cloak.  The only remaining question was just how long
would it take the Borg to come to investigate.
     Captain Anthony and Commander Tarva were not nearly as
skeptical as most of the crew.  There was yet to be any evidence
that the Borg sensors could defeat the cloaking.  They were
making preliminary plans for surveying and exploring the Borg
planet when someone signaled at the door to the Command Room then
entered..
     It was S'Erlet "Sir, I've been tracking the movement of Borg
vessels in the area."  He began.
     "What do you have?" the Captain said turning his computer
display aside.  He knew that S'Erlet would not disturb them if it
wasn't important.
     "Since we began the final approach to the Borg planet, there
has constantly been five Borg cubes within two hundred million
kilometers of our position."
     "What!" Captain Anthony was suddenly very interested. "Are
you saying that we are being shadowed by five Borg cubes."

     "Not exactly." S'Erlet replied "The Borg flight patterns
keep that many vessels with in the sphere I described."
     "What does that mean?" Commander Tarva asked.
     "I mean, Sir, that it appears that we are being shadowed but
not by the same vessels.  The five are constantly changing
depending on what looks like normal flight paths."
     "Could this be a coincidence?" The Captain sounded very
concerned.
     "If we were stationary, yes," S'Erlet said "but we are
moving, and still continue to be the center of a sphere of flight
paths."  S'Erlet then produced the results of his statistical
analysis of the Borg flight paths.
     The Captain studied the data for a few minutes then called a
meeting of the top command staff.  It was obvious that the Borg
knew they were there and were going to great lengths not to show
it.
     The options were limited, continue with the current flight
plan until the Borg made their move, or exit the system with all
possible haste.
     "If we must leave now, we are not coming back." The Captain
said.  He wasn't arguing a choice of action, just brainstorming
the consequences.  "Our job is not to fight our way to the Borg
home world, it is to gather intelligence.  We now know more about
the Borg then the Federation could have ever dreamed of before
commissioning the Vigilante."
     "But to get this close and not actually go the Borg home
planet would be tantamount to failure." Tarva interjected "What
if they continue to ignore us?  What if this adjustment of flight
paths is their way of studying an anomaly without taking ships
away from normal operations?"
     Commander Norton then spoke up.  He normally remained silent
at these meetings unless addressed.  When he spoke, they all
listened "While we sit here discussing the intentions of the
Borg, they are studying us, they are analyzing us, they are
_Learning_ from us."
     The Captain turned and looked at his First Officer for a
second then jumped to his feet.  He headed to the bridge at a
dead run.

     "Ensign," Captain Anthony said loudly "plot a course out of
the system, best speed."
     "And the wake, Sir?" Ensign O'Malley ventured.
     "Damn the wake, get us out of here." The Captain paused in
thought for a second "Plot the course to head directly away from
were the closest Borg ships are headed."  Captain Anthony then
ordered the ship to Red Alert.  "I doubt they're going to let us
go peacefully." he added under his breath.
     The ship was already at battle stations, but at red alert,
they strapped in to the rough duty seats and closed the
restraints.  The guards and other security personnel took their
weapons off safety and brought them to full charge.  People were
already in their places for "silent running" now they were
hanging on, waiting for the fight to begin.
     "Speculate,"  the Captain said to the bridge crew "have they
pierced the cloaking, and, or the hull.  Can they scan us without
our sensors picking it up?"
     "Sir," Commander Tarva spoke up "If they could fully scan
us, wouldn't they have boarded or confronted us......"
     "Captain" Ensign O'Malley said "new course plotted and laid
in, Sir."
     "Thank you, Ensign, engage, full impulse."
     The Vigilante immediately took a sharp ninety degree nose
dive.  Even with the inertial dampening fields, a maneuver that
sharp was still felt by the crew.  Anybody who was not strapped
into their seats found themselves scrambling for support.
     The Captain had a hard time holding back a smile for Ensign
O'Malley.  She had plotted the exact course he had asked for and
threw the ship into it just as he had ordered.  Many commanders
would at least be annoyed with that kind of behavior, but he had
given this Ensign a lecture about second guessing him in an
emergency.  She proved she had learned her lesson well, it also
showed great self confidence in not looking for approval of the
drastic maneuver.  The Captain, of course, knew he had cleared
the way for her by not asking to see the course before ordering
it.
     "If tomorrow comes," Captain Anthony thought "I have a lot
of notations to make in the personnel records."
     With the Vigilante's sudden change of course and velocity,
the Borg vessels immediately broke their flight paths and headed
toward the ship.
     The Vigilante dodged through the debris field of the Borg
system at full impulse.  The path was not the most direct to open
space but was calculated to put as much distance as possible
between the ship and the Borg.  The Vigilante was using the star
system as a buffer between them and the Borg craft.
     The Borg took up immediate pursuit.  Within two minutes,
they could detect eight Borg cubes heading toward the vicinity of
the Vigilante's exit from the system.
     "Sir" S'Erlet spoke up "I'm reading a low level resitron
pulse emanating from all Borg outposts.  The pulse is acting like
a motion detector, it is how the Borg can track up."
     Tarva turned her chair toward the young Vulcan.  "How does
it work?"
     "All outposts are sending the resitron signal to all other
outposts. If they have the system accurately charted, they will
be able to detect any new movement or object."
     S'Erlet's consoled beep and he looked at new readings.
"Sir," he said "new data indicates a sub-space force field
connecting the outposts in our vicinity."
     "What effect will it have on us?" Tarva asked.
     "Uncertain, I'm analyzing now."
     "No need," Commander Norton said "Minimally, a sub-space
force field of this type will rip away our deflector shields and
it may rupture the hull."

     The Captain began typing at his console. "Ensign O'Mallley,
I'm entering a new course."
     "Aye, plotting new course." The young woman responded as she
laid in the new orders. The bridge could see O'Malley tense up as
she translated the new heading. She couldn't help a quick
questioning glance over her shoulder at the Captain.
     "Engage."
     All expected the Vigilante to make another sharp turn, but
the change wasn't noticeable.
     "There are now twelve Borg vessel converging on our previous
exit point." Someone offered.
     The Captain brought a chart up on his screen and on one of
O'Malley's screens.  "Ensign, here is our way out of the system."
Captain Anthony said "This is going to take some precision flying
on your part, I hope your ready."
     "I hope so too, Sir." Ensign O'Malley returned with a forced
smile.
     An object soon appeared in the middle of the main view
screen.
     Commander Tarva leaned forward looking at the image on the
screen.  "It's one of the outposts?"
     "Correct," Captain Anthony said he then pointed to the
diagram on his monitor "here" he pointed to an outer section of
the super-structure.  "We can take the Vigilante through here and
avoid the force field."
     "Sir?" Tarva said quietly "Are you sure we can make it at
speed?"
     "We're going to have to, aren't we." The Captain returned in
the same hushed tone.
     "Reading activity at the outpost." Ensign O'Malley reported.
"There are Borg ships deploying from the station."
     "Steady as she goes." Captain Anthony said "Maintain course.
What's our ETA?"
     S'Erlet spoke up "Sir, our ETA to the outpost is three
minutes fifty seconds...mark."
     "Thank you." Anthony then turned back to O'Malley "At
precisely one minute, thirty seconds from structure begin evasive
maneuvers Diago-Alpha."
     "Diago-Alpha, aye Sir" O'Malley confirmed.
     Commander Tarva then turned to Commander Norton "Prepare
Counter Measures for release at initiation of maneuver."
     "Working on it." Norton replied as quickly entered orders
into his console.  "If the resitron tracking is as sensitive as I
think, I know just what we need."
     For the crew of the Vigilante time seemed to stand still.
All who didn't have duties to perform watched the image of the
Borg outpost rushing toward them.  Only the bridge crew knew of
the pending Diago-Alpha maneuvers.  To the rest it just seemed
they were rushing head first into the Lion's den.
     The ships deploying from the outpost formed a grid in front
of the structure and started heading toward them.  "Sir, S'Erlet
reported they are sweeping for us."
     "Thank you, Ensign." Captain Anthony replied then said
"Change evasive maneuvers to Diag-Beta, initiate on my mark."
     "Diag-Beta." O'Malley responded "Aye, Sir."

     On Captain Anthony's command the Vigilante started a series
of evasive maneuver's design.  First a series of low power photon
torpedoes were launched to detonate sequentially carrying the
signature of the Vigilante's momentum forward.  They also hoped
the explosions would overload the resitron receptors and help
blind the Borg for a few seconds as the Vigilante made its run
through the superstructure of the outpost.
     The Vigilante cut speed and made a series of sharp course
changes. The photon torpedoes continued to detonate along the
ship's former path.  The Vigilante dropped under the cubes and
was soon beyond the ships.  The Borg had immediately focused
their attention on the Vigilante's old path and the counter
measures.  The crew watched as their old flight path was filled
with energy charges and tractor beams from the Borg ships.
     "Nice job, Ensign." Anthony said "Now take us in."
     "Aye, Sir, starting final run now."  O'Malley replied.
     "Prepare to jump to warp as soon as we exit." Anthony told
the bridge.  "Evasive pattern Romeo-One."
     The Vigilante increased speed and headed toward the right
side of the structure.  The computer was given the task of
adjusting speed and direction based on the scans of other
outposts.  If this Outpost varied in design from the others, it
could be disaster for the Vigilante.  The ship weaved in, out and
around the surface structures of the station.  Every course
change and speed adjustment was predetermined from maps they made
of the  first Outpost and hopefully corrected on the fly from
incoming data.
     Approaching the final obstacle, the crew was ready to jump
to warp before being totally clear of the structure.  "Hold your
speed." the Captain said "If they can't see us on this side, we
don't want to give ourselves away by jumping too soon."
     It was a matter of seconds from clearing the last structure
to clearing the Station totally.  The few beats of time it took
to be free the station were an eternity.  The ship was barely
flexing when it flung them away from the Borg system at warp 9.
     "Any sign of pursuit?" Commander Tarva asked praying for a
negative reply.
     In response, the ship rocked hard to port and the lights
dimmed for an instant.
     "Continue evasive sequence."  Anthony said, then turned
toward Commander Norton "What's out there?"
     "We read two Borg cubes in the immediate area." Norton
replied, reading directly from reports on his screen.  "They are
holding warp nine and firing randomly in front of them."
     "Lets see them." Captain Anthony said turning toward the
main screen.
     "Stabilized rear view coming up now, Sir." Norton responded.
     The screen  showed two Borg ships that appeared to be
moving in a synchronized dance left and right, and up and down
across the screen.  The apparent movement was caused by the
Vigilante's evasive maneuvers.  Without computer stabilization,
the picture would have been a complete blur.
     "Why only two?" someone wondered aloud.

     A coded clearance appeared on Commander Tarva's screen from
the Captain. "Commander Norton have fire control target the
closest Cube.  Prepare delivery sequence Shelby-One."  She said
without turning her attention from the commands on her screen.
As second in command of the Vigilante Commander Tarva was given
many of the firing codes instead of the Captain.  It was an
attempt to decentralize command in case of capture.
     "Commander hold fire." the Captain said.  "Helm, increase
speed to warp nine point three."  Captain Anthony was hoping the
Vigilante could get away from the Borg without a fight.  He knew
they couldn't defeat the Borg and he wanted to avoid leaving the
system in a fire fight.
     Just as the Vigilante increased speed, Lieutenant S'Erlet
spoke up "Captain, no! They may be able ..."  The Vigilante shook
violently and lurched hard to port.
     As soon as the ship started to shake, Commander Tarva
started yelling, "Fire, Fire."
     The Vigilante released a stream of photon torpedoes directly
at the Borg ship behind them.  At the same time, they beamed
dozens of specially prepared torpedoes directly into the interior
of the ship.  The torpedoes fired at the cube had minimal effect
on the it, but served as a distraction.  The torpedoes were
beamed into strategic locations throughout the structure.
     The photon torpedoes exploded in a predefined pattern called
the Shelby Sequence.  Commander Shelby was one of he foremost
authorities on the Borg and had suggested that if their main
power conduits could be disrupted in exactly the right pattern,
it could create a feed-back resonance that would destroy the
ship.  The Borg immediately started experiencing trouble and
dropped out of warp.
     The Vigilante had trouble of its own and no one noticed when
one of their pursuers dropped light years behind them.  The star
ship had dropped its speed and spun wildly off course.
     "Maintain Warp." Captain Anthony yelled  "Continue evasive
maneuvers.  Engineering what's our status?"
     Tarva cross talked over the Captain, ordering the targeting
of the second cube.
     "We've sustained damage to warp nacelle One." came Commander
Dolittel's voice from engineering.
     "Unable to establish transporter lock on cube's interior."
Commander Norton reported, then added "Shields are at seventy
five percent.  Cloaking is operative."
     "Damage stableized." Dolittel echoed in the background.
     "Holding warp nine." helm reported over the commotion.
     "What the HELL happened!?" The Captain demanded.
     "Our increase in velocity registered on the Borg's motion
detectors and they were able to triangulate on us."  S'Erlet
reported speaking as quickly as he could.
     "Sir," Ensign O'Malley spoke up "I read ten Borg ships
headed in this direction at high warp, they will catch up with us
in five minutes."
     "Shiv."  Captain Anthony said loudly then started entering
new commands into his console.  "Helm, I'm entering a new
course."
     "Aye, Sir" came the simple reply.
     "Engage."
     The Vigilante immediately dropped out of warp and changed
its heading straight down.  For an instant, the ship continued on
its old course with saucer section pointing down.  The closer
cube was immediately light years beyond them with the other ships
also over shooting.
     The Vigilante used its acceleration advantage jumping
directly to warp 9.6.  This time they held a straight course
trying to put as much distance between themselves and the Borg as
possible.
     "Bridge," came Dolittel's voice from engineering.  "I don't
know if we can maintain this speed, the damaged nacelle might not
hold."
     "We won't have to for long."  The Captain replied "Prepare
for controlled worm hole.."  Before Anthony had finished
speaking, the Vigilante shudder and the lights flickered.
     "Sir we're losing speed." Ensign O'Malley reported.
     "Engineering," the Captain yelled at the intercom what's
going on down there?
     "We lost nacelle one,"  Dolittel reported  "nacelle two is
also off line."  Because of resonance and synchronization
problems, the warp nacelles could only be operated in matched
pairs.  "Recelebrating for two nacelle operation now."
     From the last maneuver, the Borg had become extremely strung
out and did not have a precise location of the Vigilante.  The
one ship in the area was able to zero in on the interference and
radiation being generated by the failing nacelle.  The ship
approached slowly, still unable to pin point the intruder.
     "All Stop." Captain Anthony commanded.
     "Initiate jamming." Tarva said as they watched the ship
approach.  The jamming devices were designed to blind the Borg
scanners and to mask the Borg link.
     The Vigilante drifted under the Borg ship as it passed
through the area.  The crew watched the Borg on the main view
screen in silence.  The ship passed beyond the Vigilante but was
still within jamming range when it turned back.
     Anthony signalled engineering. "Do we have full speed?"
     "We have full speed." came Dolittel's reply "But
acceleration will be effected slightly and we won't be able to
hold top speed indefinitely."
     "How about the controlled wormhole?" Tarva put in.
     "Aye, it is still operational." Dolittel returned.
     Approaching the Vigilante's position the Borg began an
intense off-frequency sensor sweep of the area.  The cube wasn't
heading directly toward the ship but would pass extremely close.
     "Prepare to jump to warp nine point six on my command."
Anthony told the crew.
     The Borg passed just beyond its closest point when the ship
came to a dead stop.  Sensors on the Vigilante told them the
whole area was under intense study from the Borg.
     The crew leaned forward watching the Borg closely.  Should
they wait and see if they passed on or jump now and hope to out
run them.
     "It can maintain nine point six just as well as we can."
Captain Anthony said to Commander Tarva when she looked at him
questioningly.  "Lets see if they pass on.  Helm be prepared for
warp if they get any closer."
     "Sir, I'm ready a power buildup in the closest face of the
Cube."  S'Erlet reported.
     "Get us out of here!" Anthony said.
     A tractor beam sprang from the Borg ship aimed directly at
the damaged nacelle.  The Vigilante jumped to warp nine point six
just in time to avoid the beam.  The Borg immediately took up
pursuit.
     "Prepare for  controlled worm hole." Anthony commanded.
"We've got to get out of here before they can triangulate in on
us again."
     The Vigilante rocked again as the Borg latched out with
their tractor beam.  The beam locked solidly on the deflector
shields around the disabled nacelle.
     "They've established a tractor Beam lock. We're dropping out
of warp."  Commander Norton reported.  "Targeting all weapons
now."
     "Fire at will."  Anthony said. "Get us out of here."
     For the first time ever the Vigilante's phasers fired in
anger.  The high powered phaser banks fired through a 'rippling'
effect in the cloaking and did heavy damage to the cube's
superstructure, but the tractor beam held tight.  At the same
time all of the Vigilante's torpedo delivery systems targeted the
cube.  The launched torpedoes were aimed at the source of the
tractor beam and at the sights that were taking damage from the
phasers.  The tractor beam area was heavily shielded and the
torpedoes did no significant damage.  Heavy damage continued to
be inflicted on the areas the phasers could reach, the beam held
tight.  Internally, torpedoes were beamed in but they couldn't
achieve the Shelby Sequence and were doing no noticeable damage.
     Another beam came from the Borg ship, this was the high
powered cutting beam.  It immediately struck the shields between
the top nacelles, next to the tractor beam.  The Vigilante
shuddered and lost power to many low priority systems as the
computer tried to maintain the shields.
     "Shields down to forty five percent."  Commander Norton
reported.
     "Disengage cloaking." Captain Anthony said "Save the energy,
they know we're here."
     "At current rate, shields will fail in five minutes."
Commander Norton said.
     "Sir," it was S'Erlet.
     "Yes" The Captain said quickly glance toward the young
Vulcan.
     "We may be able to escape when the shields fail."
     "Explain."
     "The Borg still haven't dealt with the Vigilante's hull
material.  Because of its energy absorbing nature the tractor
beam may not be as effective against the bare hull."
     The Captain looked at his security chief "What do you
think?"
     "Its a solid hypothesis based on current data." Norton said
"But the data is not conclusive."
     "What about the cutting beam?" Commander Tarva asked.
     "Oh," S'Erlet said almost nonchalantly "We'll take a direct
hit over Engine Room One."
     Tarva immediately signaled evacuation of Engine Room One and
emergency lock down of Engine Room Two.  All personnel were
evacuated from Engine Room One and all non essential personnel
from Engine Room Two.  The remaining personnel stayed in their
rough duty chairs which would automatically drop to safety in an
emergency.  They all knew this wouldn't happen, since if E.R. Two
failed, there would be no safety.
     "Prepare to drop shields." Anthony commanded.  "Helm and
Engineering be ready for warp as soon as we cut the rear
shields."
     Captain Anthony sat back and braced himself.  He could sense
the rest of the Bridge crew and the ship tense up as the lights
dimmed again from the power strain of the two beams.
     Phaser and torpedo fire continued to pour from the Vigilante
but was having considerably less of an effect.  When the
Vigilante dropped it's rear shields its lights seemed to brighten
for an instant.  Immediately, however, the cutting beam hit the
craft amid ships near the saucer section.  Much of the energy was
dissipated by the hull, but Engine Room One was  still engulfed
in fire and explosions.
     The Borg tractor beam was much less focused and needed more
time to adjust to the new target.  This was all the Vigilante
needed and it was instantly out of sight.  Borg being as single
minded as they are immediately took off after the strange little
ship.
     Commander Dolittel and several technicians worked feverishly
in the engine room control center that over looked both areas.
The evacuated Engine Room One was engulfed in flame and high
power electrical discharges the instant the Borg struck the ship.
Most functions had already been diverted to Engine Room Two, but
the Vigilante still felt a massive power loss from the damage.
     Seconds before the strike, Commander Dolittel had closed the
blast shields between the control room and Engine Room One.
Through failing monitors, he watched one of the two most advanced
engine rooms in Star Fleet burn.
     Now they had another problem, they had started shutting down
the ALPHA warp core as soon as the evacuation was ordered, but
there hadn't been nearly enough time.  The team was doing all
they could to release the energy building up in the damaged
coils, but they knew it was only a matter of minutes before a
total breach.
     Sirens howled around him as Commander Dolittel signaled the
bridge.  "We have less then two minutes before warp core breach."
he reported.  "Prepare for ejection of ALPHA warp core and anti-
matter pods."
     Dolittel then glanced at the stats for BETA core, it was
pushing 98% capacity.  Continuing work on the ejection he
signaled the bridge with the stats for the BETA core and the
count down for the ejection of ALPHA core.

     10...9...
     The Vigilante held warp eight and the bridge crew watched
the countdown for the ejection of ALPHA core.
     .8...7...
     They watched the Borg gaining on them and knew they had only
one card left to play.
     .6...5...
     "Prepare for controlled worm hole." Anthony yelled.
     .4...3...
     Explosive charges released the ALPHA Core exterior hull
plates from the Vigilante.
     .2...1...
     The plates didn't have time to separate from the ship when
they were blown away from the much larger explosions expelling
ALPHA core and its anti-matter pods.
     The ship rocked from the radical maneuver but the maintained
power thanks to the BETA core.  The picture of the approaching
Borg ship was soon obliterated by the exploding warp core.  All
silently hoped the cube would be destroyed or disabled by the
explosion, but it quickly emerged from the cloud unscathed.
     "Bridge, Dolittel here." came a voice over the intercom.
     "Commander," Anthony called back "do we have the controlled
wormhole?"
     "Sir, it's a mess down here." Dolittel returned.  "There's
no way we can implement a worm hole and have any control over
it."
     "I read five more Borg ship closing fast." S'Erlet reported
in the background.
     "I don't care about control!" Anthony yelled at the bearded
face on his monitor.  "Get us out of here, now."
     The nearest Borg ship was close enough to fire on the
Vigilante but had sustained sufficient damage to effect its
targeting systems.  The first bursts of energy missed the
Vigilante, but they would use the misses to adjust their
sighting.
     Ensign O'Malley had been trying to run setup routines on the
Worm Hole console next to her but was getting no response.
Suddenly the ship was filled with a loud siren that none
recognized at first.  It was the ten second warning for the
wormhole.
     Dolittel had to over ride every safety precaution built into
the controlled wormhole, but that was easy working at the
engineering main console.  The Captain didn't seem to care were
they went, as long as it was away from here, and Dolittel quite
agreed.  Strapping himself into his rough duty seat, he looked
out into the engine room and watched his crew scramble for their
own chairs.
     "God, I hope they make it." he thought to himself, then
frowned.  "God I hope WE make it."

     They hit a brick wall, or at least if felt like it.  Captain
Anthony wasn't sure what happened.  Everything flew at him and he
felt himself crush into his chair.  The bridge wrapped around him
then began to spiral in front of him.  It looked like a long
tunnel with the view screen and stars at the far end.  The
tunneling felt like it was drilling into his hole body.  Then it
was through him and he felt like he would be blown apart.

     When the Vigilante purposely breached the alignments of its
warp coils, the pursuing Borg ship was extremely close.  The
artificial wormhole created by the breach sucked the large Borg
ship into its starship sized corridor.  The Cube collapsed like
water flowing through a funnel.

----------

     Pain surged through everybody on the Vigilante.  They felt
like every blood vessel their bodies had exploded. Captain
Anthony gasped for breath and fumbled to release himself from his
restraints.  The Bridge was almost black except for faint red
emergency lighting.  The Wormhole control systems had emergency
power cut offs in case accidents, but they too may have been
disabled to implement maneuver.
     Captain Anthony felt extremely light headed, but didn't know
if it was from injuries or from loss of gravity.  When he got the
restraints removed and tried to stand, it felt like the seat just
dropped away from him.  He wasn't in free fall, but gravity was
minimal.
     "Bridge to engineering." The Captain said looking around the
bridge.  "What's our status?"  The bridge crew was slowly gaining
consciousness.  Debris hung from the ceiling and littered the
deck.
     "Bridge to Engineering, report."  Anthony tried again.
     There was still no response.  Captain Anthony made it one of
the Bridge engineering stations and tried to run some
diagnostics.
     "Bridge to any station, report." came Commander Tarva's
voice from behind Anthony.
     The Captain looked back at his First Officer, he had
neglected his bridge crew knowing the status of the ship was more
important then any one of them.  The short Kalonian was working
herself free of the restraints and trying to raise the rest of
the ship at the same time.
     The diagnostics didn't look good, they had minimal power,
and it looked the safety over rides on the worm hole had totally
shut down the BETA warp core.
     "This isn't good." Captain Anthony said softly.
     Other Bridge crew were slowly gaining consciousness.
Commander Tarva was able to raise several sections of the
Vigilante, but not Engineering.
     "Were are we?" Anthony said, "Did we get away from the
Borg?"
     As if in answer to his question, the Vigilante rocked with a
great THUD.  The whole crew scrambled for the support and looked
at each other trying not show the fear they we feeling.  The ship
rocked again.
     "What is it?" Antony demand "Are we under attack?"
     The crew tried every station for answers but none responded.
The power loss was total for external sensors.  When the ship
rocked a third time, Captain Anthony and Commander Tarva both
scrambled for the command room.  After prying the door open, they
had to contend with the blast shields.  There were manual
controls, but they were not designed for emergencies, only
maintenance.
     After getting one shield half open they had a small area
looking across the rear of the ship.  The Vigilante floated in
blackness.  The few pin points of light from distant stars
weren't enough to tell them what was out there.
     "We have contact with the drop bays." Anthony said.
     "Yes, Sir." Tarva replied.
     "Tell them to turn on the emergency landing beacons, that
might give us enough light to see what out there." Another
thudding sound echoed through the ship.
     "Commander Kartang reports they have about a minutes worth
of battery power for you." Tarva report from here large
communicator.
     "That should be plenty."  Anthony said.
     Tarva put the communicator away bring out a tri-corder and
leaned down to look out the window with the Captain.  In such an
absence of light even the smallest amount can seem like a sun
rise.  Straight back, light suddenly came up from where the hull
dropped off to the shuttle bays.
     Captain Anthony and Commander Tarva grimaced at what they
saw first. To their right, the hull was scorched black and cracks
radiated from the center of the strike.  The upper port nacelle
had a large hole blown in the front and was shattered down the
side.  Wires and debris dangled from it.
     At first they saw no sign of what was hitting the Vigilante,
finally they saw a large chunk of debris slowly float out of the
darkness and glance of the side of the ship.  With the hit, a
dull THUD echoed through the starship.  Soon after they were hit,
the lights from the shuttle bay faded and went out.
     "Did you get it?" Anthony asked.
     "Yes, Sir." Tarva replied holding up the tri-corder show a
clear picture of the object that had just struck the ship.
     The two headed for the Bridge and heard the computers begin
to come back on line.  Tarva went straight to S'Erlet to help
with identifying the debris and Captain Anthony tried signalling
engineering again.
     The intercom was filled with static, a step forward, then a
voice broke though. ".ridge, this is Comm....Dolit...damage from
worm........casualties.  Will have some..ower on line
in....minutes."  Dolittel was speaking quickly to get the message
through before communication was lost again.
     Captain Anthony turned to one of the technicians nearby get
down there and find out what exactly is our status."  He then
turned to someone else, "Try to set up a computer link with
engineering, maybe we can get some information that way."
     "Can anybody tell me where we are yet?" Anthony said looking
around at the whole bridge.
     Ensign O'Malley spoke up. "Sir, I have established a link
with Stellar Cartography we are working on our location now.
With the main computers still down, it may take awhile."
     "OK, Ensign, keep working on it."
     "Sir." It was Commander Tarva.
     "Yes, Commander.
     "We've tentatively identified the debris we saw." Tarva
reported.
     "What is it?" the Captain asked he figured it was from some
part of the Vigilante he couldn't see.
     "The piece I recorded is a fragment of a Borg ship." Tarva
reported.  "We've also enhanced the pictures to show more of the
space around us."
     Tarva then showed Captain Anthony the tri-corder's screen.
It showed that the Vigilante was floating in a cloud of debris.
     "Apparently," S'Erlet offered "The cube followed us through
the worm hole and was torn apart in the process."
     The Captain looked at the picture and smiled "I guess it
didn't fit."
     The ship rocked again from another strike.
     "If we don't get the shields back up soon, that damned Borg
ship may still be the end of us."  Anthony said in frustration.
     At that, the main lights came up and everyone suddenly felt
much less light headed.
     "Bridge, this is Engineering." came Commander Dolittel's
voice over the intercom.
     "Go ahead, Commander." Tarva replied.
     "We have main power back on line and shields at eight
percent.  We've sustained major damage to all drive systems but
should be able to repair most of it." Dolittel reported.  "We are
currently working on getting the impulse drives back on line so
we get some maneuverability back."
     "What about the warp drives."  Tarva asked.
     "It's hard to say, Commander.  We should be able to get
nacelles three and four on line, but not at full capacity.  Top
speed will probably be around warp seven and top sustainable
speed around warp five."
     "How about the controlled worm hole" the Captain asked
dryly.
     "Sir," Commander Dolittel returned.  "that last jump  is
about as controlled as it gets."
     "No control on the worm hole and no high warp capability."
Captain Anthony summarized.  "I hope we landed somewhere near the
Federation, or else it could be a very long ride home."
     Ensign O'Malley looked up from her console with a glazed
look in her eyes.  "Sir we have determined our present location.
We are on the far side of the Gamma quadrant."
     "The Gamma Quadrant?" Tarva asked in disbelief.
     "We would have had to go right through the Alpha quadrant to
get here."  someone said.
     "Sir," S'Erlet offered. "At high warp, the Gamma quadrant is
eighty years from Federation space."
     "Thank you Lieutenant, I know." Captain Anthony said as he
dropped heavily into his chair,  "I know."




                You who find us in this place,
                Have you pity in your breast
                Let us in our last embrace,
                Under earth sun-hallowed rest.
                Night's a claw upon my brain:
                Oh, to see the Sun again.
                       "Sunshine"
                         Robert W. Service


 